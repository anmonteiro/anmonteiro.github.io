{"componentChunkName":"component---src-templates-post-js","path":"/2018/11/reason-and-the-language-server-protocol-the-landscape/","result":{"data":{"markdownRemark":{"excerpt":"\nThe state of editor tooling for programming languages has seen great change in\nrecent memory thanks to Microsoft's specification of a [Language Server\nProtocol]( https://microsoft.github.io/language-server-protocol/overview) (LSP).\n\nWhile some editors bundle LSP out of the box, making it a breeze to get up and\nrunning, others take a little more tweaking. In a series of posts, I will detail\nthe state of LSP editor tooling in Reason / OCaml, as well as how to get set up\nquickly in a variety of editors.\n\n","html":"<p>The state of editor tooling for programming languages has seen great change in\nrecent memory thanks to Microsoft's specification of a <a href=\"https://microsoft.github.io/language-server-protocol/overview\">Language Server\nProtocol</a> (LSP).</p>\n<p>While some editors bundle LSP out of the box, making it a breeze to get up and\nrunning, others take a little more tweaking. In a series of posts, I will detail\nthe state of LSP editor tooling in Reason / OCaml, as well as how to get set up\nquickly in a variety of editors.</p>\n<!--more-->\n<div style=\"margin:30px\">\n  <img style=\"max-width:30%;margin:0 auto\" src=\"https://user-images.githubusercontent.com/661909/48664817-99be8d80-ea9c-11e8-84ad-f24eed85336f.png\">\n</div>\n<h2>Language Server Protocol Implementations</h2>\n<p>There are currently two alternative LSP server implementations for the OCaml\necosystem. Despite what their names might suggest, all of them support both\nOCaml and Reason. Their goals and tradeoffs are described below.</p>\n<h3>1. <a href=\"https://github.com/freebroccolo/ocaml-language-server\"><code class=\"language-text\">ocaml-language-server</code></a></h3>\n<p><a href=\"https://github.com/freebroccolo/ocaml-language-server\"><code class=\"language-text\">ocaml-language-server</code></a>\nis the first implementation of an LSP server to have appeared for OCaml / Reason\nand made a few compromises in the name of shipping quickly and iterating fast:</p>\n<ul>\n<li>It is implemented in TypeScript, and makes use of the upstream <a href=\"https://github.com/Microsoft/vscode-languageserver-node\">LSP\nimplementation\nlibrary</a> by Microsoft\nfor Node.js</li>\n<li>\n<p>It makes extensive use of existing tools for functionality such as code\nformatting, autocompletion and type information reporting.</p>\n<ul>\n<li>\n<p>These include, but are not limited to:</p>\n<ul>\n<li><a href=\"https://github.com/ocaml/merlin\">Merlin</a><sup id=\"fnref:1\"><sub><a\nhref=\"#fn:1\">1</a></sub></sup> for code diagnostics, completion and\ntype information reporting;</li>\n<li><a href=\"https://github.com/OCamlPro/ocp-indent\"><code class=\"language-text\">ocp-indent</code></a> and\n<a href=\"https://github.com/facebook/reason\"><code class=\"language-text\">refmt</code></a> for OCaml and Reason code\nformatting, respectively;</li>\n<li>Calls to the underlying build systems and package managers, including\n<a href=\"https://github.com/bucklescript/bucklescript\">BuckleScript</a>, the OCaml\n/ Reason to JavaScript compiler.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>2. <a href=\"https://github.com/jaredly/reason-language-server\"><code class=\"language-text\">reason-language-server</code></a></h3>\n<p><a href=\"https://github.com/jaredly/reason-language-server\"><code class=\"language-text\">reason-language-server</code></a> is\na new implementation of the Language Server Protocol that is implemented in\nReason and compiled to native code. It makes another set of trade-offs, which\nare detailed below, and is the implementation that will be covered in this\nseries of posts.</p>\n<ul>\n<li>It reduces the reliance on external tools such as Merlin â€“\n<code class=\"language-text\">reason-language-server</code> implements its own type information reporting and\nsource code diagnostics.</li>\n<li>Given it is written in Reason and compiled to native code,\n<code class=\"language-text\">reason-language-server</code> has implemented its own LSP protocol communication\ninfrastructure because there wasn't one yet in the OCaml ecosystem.</li>\n<li>It also includes support for\n<a href=\"https://github.com/bsansouci/bsb-native\"><code class=\"language-text\">bsb-native</code></a>, a fork of\nBuckleScript that can build OCaml and Reason projects to OCaml bytecode and\nnative assembly.</li>\n</ul>\n<h2>Setting up Reason in <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a></h2>\n<p>The first editor that we are going to cover in this series is also the simplest\none to set up. The following instructions assume that you have a working <a href=\"https://code.visualstudio.com/\">Visual\nStudio Code</a> installation.</p>\n<ol>\n<li>\n<p>Open VS Code and select the extensions panel.</p>\n</li>\n<li>\n<p>Look for the <code class=\"language-text\">reason-vscode</code> package by <a href=\"https://twitter.com/jaredforsyth\">Jared\nForsyth</a> as seen in the following image<sup\nid=\"fnref:2\"><sub><a href=\"#fn:2\">2</a></sub></sup>.</p>\n<div style=\"margin:30px\">\n  <img style=\"max-width:50%;margin:0 auto\" src=\"https://user-images.githubusercontent.com/661909/48666415-3e4ec880-eab9-11e8-84b9-1e0beb28f95e.png\">\n</div>\n</li>\n<li>\n<p>Click \"Install\", wait until it finishes and click the \"Reload\" button to\nreload the workspace and apply your changes.</p>\n</li>\n</ol>\n<p>The above should be all you need! From now on, whenever you open a Reason or\nOCaml file you'll see the Reason Language Server in action: beyond the syntax\nhighlighting provided by the extension, you'll see type hinting and error\ninformation if that is the case. Please open an\n<a href=\"https://github.com/jaredly/reason-language-server/issues/new/choose\">issue</a> in\nReason Language Server in case anything has gone wrong.</p>\n<h2>Parting Thoughts and Next Posts</h2>\n<p>This post briefly covered the landscape of Language Server Protocol\nimplementations in OCaml and Reason, as well as the tradeoffs each one embraces\nand the differences between them.</p>\n<p>Next time we'll be covering how to set up the Reason LSP integration for Emacs.\nPlease tweet <a href=\"https://twitter.com/_anmonteiro\">@_anmonteiro</a> with any\nquestions or feedback about this post.</p>\n<p>Happy hacking!</p>\n<hr>\n<div id=\"fn:1\">\n  <sup><sub>1</sub></sup> <sub>Merlin is an editor service that implements\n  modern IDE features for OCaml and Reason. It solves the same problem as LSP,\n  however there needs to be a specific implementation for every editor that\n  intends to integrate with the Merlin protocol. LSP, however, only needs one\n  implementation per editor in order to support every language that provides an\n  LSP server.\n  <a href=\"#fnref:1\">\n    <img draggable=\"false\" class=\"emoji\" alt=\"&#x21A9;\" src=\"/img/top.svg\">\n  </a></sub>\n</div>\n<div id=\"fn:2\">\n  <sup><sub>2</sub></sup> <sub>  Alternatively, you can install the second\n  package shown in the picture, which will install `ocaml-language-server`. That\n  won&apos;t, however, be covered in this post.\n  <a href=\"#fnref:2\">\n    <img draggable=\"false\" class=\"emoji\" alt=\"&#x21A9;\" src=\"/img/top.svg\">\n  </a></sub>\n</div>","fields":{"title":"Reason and the Language Server Protocol: The Landscape","date":"17 Nov 2018","tags":["reason","ocaml","emacs","editors"],"slug":"/2018/11/reason-and-the-language-server-protocol-the-landscape/","url":"https://anmonteiro.com/2018/11/reason-and-the-language-server-protocol-the-landscape/"}},"allPosts":{"edges":[{"node":{"fields":{"title":"On OCaml and the JS platform","slug":"/2021/03/on-ocaml-and-the-js-platform/","tags":["reason","ocaml","rescript"],"date":"12 Mar 2021"}}},{"node":{"fields":{"title":"Reason and the Language Server Protocol: The Landscape","slug":"/2018/11/reason-and-the-language-server-protocol-the-landscape/","tags":["reason","ocaml","emacs","editors"],"date":"17 Nov 2018"}}},{"node":{"fields":{"title":"The State of ClojureScript Compilation in Lumo","slug":"/2017/09/the-state-of-clojurescript-compilation-in-lumo/","tags":["clojure","clojurescript","lumo"],"date":"19 Sep 2017"}}},{"node":{"fields":{"title":"Shipping a (very simplistic) ReasonReact app","slug":"/2017/08/shipping-a-very-simplistic-reasonreact-app/","tags":["reason","ocaml"],"date":"20 Aug 2017"}}},{"node":{"fields":{"title":"On Lumo's Growth and Sustainability","slug":"/2017/05/on-lumos-growth-and-sustainability/","tags":["clojure","clojurescript","lumo"],"date":"01 May 2017"}}},{"node":{"fields":{"title":"Requiring Node.js modules from ClojureScript namespaces","slug":"/2017/03/requiring-node-js-modules-from-clojurescript-namespaces/","tags":["clojure","clojurescript","node","nodejs"],"date":"17 Mar 2017"}}},{"node":{"fields":{"title":"Compiling ClojureScript Projects Without the JVM","slug":"/2017/02/compiling-clojurescript-projects-without-the-jvm/","tags":["clojure","clojurescript","lumo"],"date":"21 Feb 2017"}}},{"node":{"fields":{"title":"The fastest Clojure REPL in the world","slug":"/2016/11/the-fastest-clojure-repl-in-the-world/","tags":["clojure","clojurescript","lumo"],"date":"09 Nov 2016"}}},{"node":{"fields":{"title":"ClojureScript `require` outside `ns`","slug":"/2016/10/clojurescript-require-outside-ns/","tags":["clojure","clojurescript"],"date":"02 Oct 2016"}}},{"node":{"fields":{"title":"Om Next internals: Incremental Rendering","slug":"/2016/09/om-next-internals-incremental-rendering/","tags":["clojure","clojurescript","om"],"date":"29 Sep 2016"}}},{"node":{"fields":{"title":"Om Next Server-Side Rendering","slug":"/2016/09/om-next-server-side-rendering/","tags":["clojure","clojurescript","om"],"date":"15 Sep 2016"}}},{"node":{"fields":{"title":"Om Next at Full Stack Fest 2016","slug":"/2016/09/om-next-at-full-stack-fest-2016/","tags":["talks","clojure","clojurescript","om"],"date":"14 Sep 2016"}}},{"node":{"fields":{"title":"Om Next and Bootstrapped ClojureScript","slug":"/2016/08/om-next-and-bootstrapped-clojurescript/","tags":["clojure","clojurescript","om"],"date":"24 Aug 2016"}}},{"node":{"fields":{"title":"ClojureScript `require` now supports `:rename`","slug":"/2016/08/clojurescript-require-now-supports-rename/","tags":["clojure","clojurescript"],"date":"10 Aug 2016"}}},{"node":{"fields":{"title":"The quest for a unified routing solution in Om Next","slug":"/2016/06/the-quest-for-a-unified-routing-solution-in-om-next/","tags":["clojure","clojurescript","om"],"date":"12 Jun 2016"}}},{"node":{"fields":{"title":"&apos;Clients in control&apos; â€” Om Next at Craft Conference 2016","slug":"/2016/05/clients-in-control-om-next-craft-conf-2016/","tags":["talks","clojure","clojurescript","om"],"date":"14 May 2016"}}},{"node":{"fields":{"title":"Routing in Om Next â€” a Catalog of Approaches","slug":"/2016/02/routing-in-om-next-a-catalog-of-approaches/","tags":["clojure","clojurescript","om"],"date":"22 Feb 2016"}}},{"node":{"fields":{"title":"Om Next meets Devcards â€” the full reloadable experience","slug":"/2016/02/om-next-meets-devcards-the-full-reloadable-experience/","tags":["clojure","clojurescript","om"],"date":"01 Feb 2016"}}},{"node":{"fields":{"title":"Writing Om Next Reloadable Code â€” A Checklist","slug":"/2016/01/writing-om-next-reloadable-code-a-checklist/","tags":["clojure","clojurescript","om"],"date":"21 Jan 2016"}}},{"node":{"fields":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 2","slug":"/2016/01/exploration-patterns-om-next-part-2/","tags":["clojure","clojurescript","om"],"date":"09 Jan 2016"}}},{"node":{"fields":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 1","slug":"/2016/01/exploration-patterns-om-next-part-1/","tags":["clojure","clojurescript","om"],"date":"07 Jan 2016"}}},{"node":{"fields":{"title":"Om Next Query Syntax Explained","slug":"/2016/01/om-next-query-syntax/","tags":["clojure","clojurescript","om"],"date":"04 Jan 2016"}}},{"node":{"fields":{"title":"Om Next Study Material","slug":"/2015/12/om-next-study-material/","tags":["clojure","clojurescript","om"],"date":"10 Dec 2015"}}},{"node":{"fields":{"title":"clj-isitup - a simple isitup.org API client","slug":"/2015/11/clj-isitup-a-simple-isitup-org-api-client/","tags":["clojure"],"date":"17 Nov 2015"}}},{"node":{"fields":{"title":"Hosting files on the cloud via GitHub Issues","slug":"/2015/09/hosting-files-on-the-cloud-via-github-issues/","tags":["git","GitHub"],"date":"26 Sep 2015"}}},{"node":{"fields":{"title":"Solving Closure Library's Html5history double event dispatch","slug":"/2015/09/solving-closure-librarys-html5history-double-event-dispatch/","tags":["clojure","clojurescript"],"date":"11 Sep 2015"}}},{"node":{"fields":{"title":"Setting up Heroku config variables with Clojure","slug":"/2015/09/setting-up-heroku-config-variables-with-clojure/","tags":["clojure","heroku"],"date":"03 Sep 2015"}}},{"node":{"fields":{"title":"Jekyll related posts revamped","slug":"/2015/08/jekyll-related-posts-revamped/","tags":["jekyll"],"date":"29 Aug 2015"}}},{"node":{"fields":{"title":"Custom subdomains in GitHub project pages","slug":"/2015/08/custom-subdomains-in-github-project-pages/","tags":["git","GitHub"],"date":"24 Aug 2015"}}},{"node":{"fields":{"title":"Grand opening","slug":"/2015/08/grand-opening/","tags":["lifestyle"],"date":"18 Aug 2015"}}}]}},"pageContext":{"slug":"/2018/11/reason-and-the-language-server-protocol-the-landscape/"}},"staticQueryHashes":["3074767223","4056790316"]}