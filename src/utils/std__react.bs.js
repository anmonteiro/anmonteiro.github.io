// Generated by Melange

import * as Curry from "melange/lib/es6/curry.mjs";
import * as React from "react";
import * as $$Option from "melange/lib/es6/option.mjs";
import * as $$Promise from "reason-promise/./src/js/promise.bs.js";
import * as Caml_obj from "melange/lib/es6/caml_obj.mjs";
import * as CamlinternalLazy from "melange/lib/es6/camlinternalLazy.mjs";

function reactUseState(prim) {
  return React.useState(function () {
              return Curry._1(prim, undefined);
            });
}

function useState(initState) {
  var match = React.useState(function () {
        return Curry._1(initState, undefined);
      });
  var setState = match[1];
  return [
          match[0],
          (function (f) {
              var f$p = function (oldState) {
                var newState = Curry._1(f, oldState);
                if (Caml_obj.caml_notequal(newState, oldState)) {
                  return newState;
                } else {
                  return oldState;
                }
              };
              setState(f$p);
            })
        ];
}

var Uncurried = {
  reactUseState: reactUseState,
  useState: useState
};

function reactUseState$1(prim) {
  return React.useState(function () {
              return Curry._1(prim, undefined);
            });
}

function useState$1(initState) {
  var match = React.useState(function () {
        return Curry._1(initState, undefined);
      });
  var setState = match[1];
  return [
          match[0],
          (function (f) {
              Curry._1(setState, (function (oldState) {
                      var newState = Curry._1(f, oldState);
                      if (Caml_obj.caml_notequal(newState, oldState)) {
                        return newState;
                      } else {
                        return oldState;
                      }
                    }));
            })
        ];
}

function a(prim) {
  return prim;
}

function i(prim) {
  return prim;
}

function f(prim) {
  return prim;
}

function s(prim) {
  return prim;
}

var Utils = {
  a: a,
  i: i,
  f: f,
  s: s
};

function create(promise) {
  var t = {
    LAZY_DONE: false,
    VAL: (function () {
        return {
                status: /* Pending */0,
                value: undefined,
                suspender: $$Promise.map(promise, (function (v) {
                        var t$1 = CamlinternalLazy.force(t);
                        if (v.TAG === /* Ok */0) {
                          t$1.status = /* Resolved */1;
                          t$1.value = {
                            TAG: /* Ok */0,
                            _0: v._0
                          };
                          return ;
                        }
                        t$1.status = /* Error */2;
                        t$1.value = {
                          TAG: /* Error */1,
                          _0: v._0
                        };
                      }))
              };
      })
  };
  return CamlinternalLazy.force(t);
}

function read(t) {
  var match = t.status;
  if (match) {
    return $$Option.get(t.value);
  } else {
    return (function(suspender) {throw suspender})(t.suspender);
  }
}

function write(t, value) {
  t.status = /* Resolved */1;
  t.value = value;
}

var Resource = {
  create: create,
  read: read,
  write: write
};

function useInitialRender(param) {
  var isFirstRender = React.useRef(true);
  React.useEffect((function () {
          isFirstRender.current = false;
        }), []);
  return isFirstRender.current;
}

function usePrevious(value) {
  var ref = React.useRef(value);
  React.useEffect(function () {
        ref.current = value;
      });
  return ref.current;
}

function useDidUpdate0(cb) {
  var didMountRef = React.useRef(false);
  React.useEffect((function () {
          if (didMountRef.current) {
            return Curry._1(cb, undefined);
          } else {
            didMountRef.current = true;
            return ;
          }
        }), []);
}

function useDidUpdate1(cb, deps) {
  var didMountRef = React.useRef(false);
  React.useEffect((function () {
          if (didMountRef.current) {
            return Curry._1(cb, undefined);
          } else {
            didMountRef.current = true;
            return ;
          }
        }), deps);
}

function useDidUpdate2(cb, deps) {
  var didMountRef = React.useRef(false);
  React.useEffect((function () {
          if (didMountRef.current) {
            return Curry._1(cb, undefined);
          } else {
            didMountRef.current = true;
            return ;
          }
        }), deps);
}

var Hooks = {
  useInitialRender: useInitialRender,
  usePrevious: usePrevious,
  useDidUpdate0: useDidUpdate0,
  useDidUpdate1: useDidUpdate1,
  useDidUpdate2: useDidUpdate2
};

var Scheduler = {};

export {
  Uncurried ,
  reactUseState$1 as reactUseState,
  useState$1 as useState,
  Utils ,
  Resource ,
  Hooks ,
  Scheduler ,
}
/* react Not a pure module */
