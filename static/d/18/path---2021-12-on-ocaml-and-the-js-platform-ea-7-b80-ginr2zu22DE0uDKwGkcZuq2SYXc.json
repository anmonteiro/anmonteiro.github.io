{"data":{"markdownRemark":{"excerpt":"\n[ReScript](https://rescript-lang.org/), née\n[BuckleScript](https://bucklescript.netlify.app/), is a state of the art\ncompiler that used to target OCaml (and Reason), but is fast moving away from\nits parent language. OCaml compatibility is high on my list, and I've been\ndisillusioned with the direction of the project. So I took matters into my own\nhands. Read on!\n\n","html":"<p><a href=\"https://rescript-lang.org/\">ReScript</a>, née\n<a href=\"https://bucklescript.netlify.app/\">BuckleScript</a>, is a state of the art\ncompiler that used to target OCaml (and Reason), but is fast moving away from\nits parent language. OCaml compatibility is high on my list, and I've been\ndisillusioned with the direction of the project. So I took matters into my own\nhands. Read on!</p>\n<!--more-->\n<h2>What ReScript looks like today</h2>\n<p>The BuckleScript project started out as an OCaml to JavaScript compiler. Last\nyear, after a surprising announcement and discussions that I'll choose not to\nrehash in this space, ReScript <a href=\"https://rescript-lang.org/blog/bucklescript-is-rebranding\">has made it\nclear</a> that they'll\nbe pursuing their own path, which includes:</p>\n<ul>\n<li>Not supporting newer versions of Reason</li>\n<li>\n<p>Dropping support for OCaml features that are not deemed necessary for the\nsuccess of ReScript</p>\n<ul>\n<li>An example is the <a href=\"https://github.com/rescript-lang/rescript-compiler/pull/4967\">recent\nmove</a> to\nreally break away from OCaml by removing support for the OCaml object\nsystem (it's even\n<a href=\"https://github.com/rescript-lang/ocaml/commit/803c6e676d2be50b10e39a49e763cb8f1396c0e7\">removed</a>\nfrom the OCaml compiler in ReScript \"mode\" )</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rescript-lang/rescript-compiler/pull/4701\">Dropping support for custom\nPPXes</a> such as\n<code class=\"language-text\">ppx_deriving</code> (the <code class=\"language-text\">deriving</code> attribute is now exclusively interpreted as\n<code class=\"language-text\">bs.deriving</code>)</li>\n<li>Focusing almost excusively on the \"ReScript syntax\", which lacks many common\nfeatures present in OCaml (e.g. custom infix operators, weird syntax for\nlists, and others)</li>\n<li>not staying up-to-date with the OCaml release cycle\n(<a href=\"https://github.com/rescript-lang/rescript-compiler/wiki\">source</a>)</li>\n</ul>\n<h2>So, what have I been up to?</h2>\n<p>I mentioned above that the direction of ReScript doesn't align with my personal\nuse cases. Specifically, I'm interested in as much compatibility as possible\nwith the OCaml ecosystem (after all, BuckleScript stands on the shoulders of\ngiants), and the possibility of sharing code with native OCaml projects (this\nis extremely useful for sharing types and common business logic).</p>\n<h3>BuckleScript running on OCaml 4.12</h3>\n<p>I've been maintaining my own fork of BuckleScript since the summer 2020. A few\ndays ago, I started exploring bumping the OCaml version. And you know what?\nTurns out updating the compiler version isn't hard at all (it only took 3\ndays!).</p>\n<p>The end result is a state of the art compiler for the JavaScript platform\n(preserving all features of BuckleScript), that diverges from upstream :</p>\n<ul>\n<li>generates dune files instead of (a very custom, patched, outdated version of)\n<a href=\"https://ninja-build.org/\">ninja</a></li>\n<li>\n<p>most tooling in the OCaml ecosystem just works</p>\n<ul>\n<li>this is especially important as <a href=\"https://github.com/ocaml/ocaml-lsp\"><code class=\"language-text\">ocaml-lsp</code></a>\nis dropping support for OCaml 4.06 soon.</li>\n</ul>\n</li>\n<li>Reason is bundled as a library inside the compiler, instead of shelling out\nto <code class=\"language-text\">refmt</code>.</li>\n<li>we get all the cool enhancements to OCaml in recent history <em>for free</em>,\nincluding <code class=\"language-text\">letop</code> bindings and many new and improved standard library modules.</li>\n</ul>\n<p>Being on a recent (the latest, in fact!) OCaml version has lots of advantages:</p>\n<p>-</p>\n<div style=\"margin:30px\">\n  <img style=\"max-width:30%;margin:0 auto\" src=\"https://user-images.githubusercontent.com/661909/48664817-99be8d80-ea9c-11e8-84ad-f24eed85336f.png\">\n</div>\n<h2>Looking onwards</h2>\n<p>What does the future look like? I'm not sure. I built something that is useful to me,\nand I'm planning on maintaining it for my own use cases. If more folks are interested,\nthere are some really interesting things that this could enable:</p>\n<ul>\n<li>deeper dune integration (perhaps in Dune itself)</li>\n<li>move away from an ad-hoc <code class=\"language-text\">bsconfig.json</code> way of specifying configuration,\ntowards something more established in the OCaml community</li>\n<li>support for consuming OPAM packages directly (this is possible with some\nheavy lifting in userspace today)</li>\n</ul>\n<h2>Feedback</h2>\n<p>If any of this sounds useful to you, I'd love for you to reach out to me. I\nthink there's a opportunity here to make something really great that has the\nbest of both worlds: our favorite OCaml on the world's most popular platform.</p>\n<p>Please send me a message on Twitter\n<a href=\"https://twitter.com/_anmonteiro\">@_anmonteiro</a>, or otherwise catch me on the\nOCaml / Reason Discord servers.</p>\n<p>Thanks for reading and happy hacking!</p>\n<hr>\n<div id=\"fn:1\">\n  <sup><sub>1</sub></sup> <sub>Merlin is an editor service that implements\n  modern IDE features for OCaml and Reason. It solves the same problem as LSP,\n  however there needs to be a specific implementation for every editor that\n  intends to integrate with the Merlin protocol. LSP, however, only needs one\n  implementation per editor in order to support every language that provides an\n  LSP server.\n  <a href=\"#fnref:1\">\n    <img draggable=\"false\" class=\"emoji\" alt=\"&#x21A9;\" src=\"/img/top.svg\">\n  </a></sub>\n</div>\n<div id=\"fn:2\">\n  <sup><sub>2</sub></sup> <sub>  Alternatively, you can install the second\n  package shown in the picture, which will install `ocaml-language-server`. That\n  won&apos;t, however, be covered in this post.\n  <a href=\"#fnref:2\">\n    <img draggable=\"false\" class=\"emoji\" alt=\"&#x21A9;\" src=\"/img/top.svg\">\n  </a></sub>\n</div>","fields":{"title":"On OCaml and the JS platform","date":"12 Dec 2021","tags":["reason","ocaml","rescript"],"slug":"/2021/12/on-ocaml-and-the-js-platform/","url":"https://anmonteiro.com/2021/12/on-ocaml-and-the-js-platform/"}},"allPosts":{"edges":[{"node":{"fields":{"title":"On OCaml and the JS platform","slug":"/2021/12/on-ocaml-and-the-js-platform/","tags":["reason","ocaml","rescript"],"date":"12 Dec 2021"}}},{"node":{"fields":{"title":"Reason and the Language Server Protocol: The Landscape","slug":"/2018/11/reason-and-the-language-server-protocol-the-landscape/","tags":["reason","ocaml","emacs","editors"],"date":"17 Nov 2018"}}},{"node":{"fields":{"title":"The State of ClojureScript Compilation in Lumo","slug":"/2017/09/the-state-of-clojurescript-compilation-in-lumo/","tags":["clojure","clojurescript","lumo"],"date":"19 Sep 2017"}}},{"node":{"fields":{"title":"Shipping a (very simplistic) ReasonReact app","slug":"/2017/08/shipping-a-very-simplistic-reasonreact-app/","tags":["reason","ocaml"],"date":"20 Aug 2017"}}},{"node":{"fields":{"title":"On Lumo's Growth and Sustainability","slug":"/2017/05/on-lumos-growth-and-sustainability/","tags":["clojure","clojurescript","lumo"],"date":"01 May 2017"}}},{"node":{"fields":{"title":"Requiring Node.js modules from ClojureScript namespaces","slug":"/2017/03/requiring-node-js-modules-from-clojurescript-namespaces/","tags":["clojure","clojurescript","node","nodejs"],"date":"17 Mar 2017"}}},{"node":{"fields":{"title":"Compiling ClojureScript Projects Without the JVM","slug":"/2017/02/compiling-clojurescript-projects-without-the-jvm/","tags":["clojure","clojurescript","lumo"],"date":"21 Feb 2017"}}},{"node":{"fields":{"title":"The fastest Clojure REPL in the world","slug":"/2016/11/the-fastest-clojure-repl-in-the-world/","tags":["clojure","clojurescript","lumo"],"date":"09 Nov 2016"}}},{"node":{"fields":{"title":"ClojureScript `require` outside `ns`","slug":"/2016/10/clojurescript-require-outside-ns/","tags":["clojure","clojurescript"],"date":"02 Oct 2016"}}},{"node":{"fields":{"title":"Om Next internals: Incremental Rendering","slug":"/2016/09/om-next-internals-incremental-rendering/","tags":["clojure","clojurescript","om"],"date":"29 Sep 2016"}}},{"node":{"fields":{"title":"Om Next Server-Side Rendering","slug":"/2016/09/om-next-server-side-rendering/","tags":["clojure","clojurescript","om"],"date":"15 Sep 2016"}}},{"node":{"fields":{"title":"Om Next at Full Stack Fest 2016","slug":"/2016/09/om-next-at-full-stack-fest-2016/","tags":["talks","clojure","clojurescript","om"],"date":"14 Sep 2016"}}},{"node":{"fields":{"title":"Om Next and Bootstrapped ClojureScript","slug":"/2016/08/om-next-and-bootstrapped-clojurescript/","tags":["clojure","clojurescript","om"],"date":"24 Aug 2016"}}},{"node":{"fields":{"title":"ClojureScript `require` now supports `:rename`","slug":"/2016/08/clojurescript-require-now-supports-rename/","tags":["clojure","clojurescript"],"date":"10 Aug 2016"}}},{"node":{"fields":{"title":"The quest for a unified routing solution in Om Next","slug":"/2016/06/the-quest-for-a-unified-routing-solution-in-om-next/","tags":["clojure","clojurescript","om"],"date":"12 Jun 2016"}}},{"node":{"fields":{"title":"&apos;Clients in control&apos; — Om Next at Craft Conference 2016","slug":"/2016/05/clients-in-control-om-next-craft-conf-2016/","tags":["talks","clojure","clojurescript","om"],"date":"14 May 2016"}}},{"node":{"fields":{"title":"Routing in Om Next — a Catalog of Approaches","slug":"/2016/02/routing-in-om-next-a-catalog-of-approaches/","tags":["clojure","clojurescript","om"],"date":"22 Feb 2016"}}},{"node":{"fields":{"title":"Om Next meets Devcards — the full reloadable experience","slug":"/2016/02/om-next-meets-devcards-the-full-reloadable-experience/","tags":["clojure","clojurescript","om"],"date":"01 Feb 2016"}}},{"node":{"fields":{"title":"Writing Om Next Reloadable Code — A Checklist","slug":"/2016/01/writing-om-next-reloadable-code-a-checklist/","tags":["clojure","clojurescript","om"],"date":"21 Jan 2016"}}},{"node":{"fields":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 2","slug":"/2016/01/exploration-patterns-om-next-part-2/","tags":["clojure","clojurescript","om"],"date":"09 Jan 2016"}}},{"node":{"fields":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 1","slug":"/2016/01/exploration-patterns-om-next-part-1/","tags":["clojure","clojurescript","om"],"date":"07 Jan 2016"}}},{"node":{"fields":{"title":"Om Next Query Syntax Explained","slug":"/2016/01/om-next-query-syntax/","tags":["clojure","clojurescript","om"],"date":"04 Jan 2016"}}},{"node":{"fields":{"title":"Om Next Study Material","slug":"/2015/12/om-next-study-material/","tags":["clojure","clojurescript","om"],"date":"10 Dec 2015"}}},{"node":{"fields":{"title":"clj-isitup - a simple isitup.org API client","slug":"/2015/11/clj-isitup-a-simple-isitup-org-api-client/","tags":["clojure"],"date":"17 Nov 2015"}}},{"node":{"fields":{"title":"Hosting files on the cloud via GitHub Issues","slug":"/2015/09/hosting-files-on-the-cloud-via-github-issues/","tags":["git","GitHub"],"date":"26 Sep 2015"}}},{"node":{"fields":{"title":"Solving Closure Library's Html5history double event dispatch","slug":"/2015/09/solving-closure-librarys-html5history-double-event-dispatch/","tags":["clojure","clojurescript"],"date":"11 Sep 2015"}}},{"node":{"fields":{"title":"Setting up Heroku config variables with Clojure","slug":"/2015/09/setting-up-heroku-config-variables-with-clojure/","tags":["clojure","heroku"],"date":"03 Sep 2015"}}},{"node":{"fields":{"title":"Jekyll related posts revamped","slug":"/2015/08/jekyll-related-posts-revamped/","tags":["jekyll"],"date":"29 Aug 2015"}}},{"node":{"fields":{"title":"Custom subdomains in GitHub project pages","slug":"/2015/08/custom-subdomains-in-github-project-pages/","tags":["git","GitHub"],"date":"24 Aug 2015"}}},{"node":{"fields":{"title":"Grand opening","slug":"/2015/08/grand-opening/","tags":["lifestyle"],"date":"18 Aug 2015"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2021/12/on-ocaml-and-the-js-platform/"}}