{"data":{"markdownRemark":{"excerpt":"\nThe phrase \"incremental rendering\" is frequently thrown around in the context of\nOm Next's design. This post is an attempt to clarify what the concept of incremental rendering is\nall about, what it does for your Om Next applications and how you can take advantage\nof its properties.\n\n\n","html":"<p>The phrase \"incremental rendering\" is frequently thrown around in the context of\nOm Next's design. This post is an attempt to clarify what the concept of incremental rendering is\nall about, what it does for your Om Next applications and how you can take advantage\nof its properties.</p>\n<!--more-->\n<div style=\"margin-bottom:30px\">\n  <img style=\"max-width:45%;margin:0 auto\" src=\"https://cloud.githubusercontent.com/assets/661909/18785824/d4a58916-819a-11e6-8ed4-13165501e9b9.png\">\n</div>\n<h2>First things first</h2>\n<p>Some of the properties behind Om Next's design make it possible to perform a number\nof optimizations under the hood. These optimizations are mostly driven by the fact\nthat components are annotated with query expressions and identity. One example of\nsuch optimizations is behind the <a href=\"https://github.com/omcljs/om/pull/650\">solution</a>\nfor <a href=\"https://github.com/omcljs/om/issues/556\">issue #556</a>: transacting large values\nor reading large data sets is not slow anymore <sup id=\"fnref:1\"><sub><a href=\"#fn:1\">1</a></sub></sup>.</p>\n<p>Incremental rendering is another such optimization in Om Next, based on its knowledge\nabout an application's data requirements. In plain React, re-rendering always initiates\nat the <strong>root component</strong>, whether its children (in the tree) end up updating or\nnot. This means that each node in the component tree gets asked if it needs to update\n— via the <code class=\"language-text\">shouldComponentUpdate</code> lifecycle method. Om Next, on the other hand, knows\nexactly what data components need, which means it can always start diffing their\nprops at the root of the <strong>concrete subtrees</strong> that need the data related to transactions.\nThe next image compares React and Om Next's updating phases after a transaction that\noriginated at the red node.</p>\n<div style=\"display:table; margin: 30px 0\">\n  <figure style=\"display:table-cell\">\n    <img style=\"max-width:50%; margin: 0 auto\" src=\"https://cloud.githubusercontent.com/assets/661909/18786506/87c5eb28-819e-11e6-8610-af5217738dee.png\" alt=\"React rendering\">\n    <figcaption class=\"caption\">React&apos;s update phase</figcaption>\n  </figure>\n  <figure style=\"display:table-cell\">\n    <img style=\"max-width:50%; margin: 0 auto\" src=\"https://cloud.githubusercontent.com/assets/661909/18786505/87a29114-819e-11e6-8aa5-c50ea811e06f.png\" alt=\"Om Next rendering\">\n    <figcaption class=\"caption\">Om Next&apos;s update phase</figcaption>\n  </figure>\n</div>\n<h2>How can this work?</h2>\n<p>Astute readers might now be asking themselves — but how can incremental rendering\nbe made to work, if the Om Next parser dispatches on the top-level keys in a query?\nWell, that's the entire purpose of path metadata and <code class=\"language-text\">om.next/full-query</code>. When\nupdating a subtree, Om Next does two things. Firstly, it calls the parser with the\n<code class=\"language-text\">full-query</code> of the component rooted at that subtree — which is really just a fancy\nway of saying \"give me a query starting at the root of my application, but narrowly\nfocused at the current component's query\". It then extracts the data relevant to\nthe component that is updating, which is located at its data path. Cool stuff, right?\nEven better, this behavior is extensible through the <code class=\"language-text\">:ui-&gt;props</code> key in the reconciler!</p>\n<p>If the above sounded too dense, here's a practical example:</p>\n<ul>\n<li>Say we have an application that shows 2 tabs. We might have the components below:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span>defui TabInfo\n  static om/IQuery\n  <span class=\"token punctuation\">(</span>query <span class=\"token punctuation\">[</span>this<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token operator\">:info</span>/id <span class=\"token operator\">:info</span>/<span class=\"token keyword\">name</span> <span class=\"token operator\">:info</span>/items<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>defui Tab\n  static om/IQuery\n  <span class=\"token punctuation\">(</span>query <span class=\"token punctuation\">[</span>this<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token operator\">:tab</span>/title <span class=\"token punctuation\">{</span><span class=\"token operator\">:tab</span>/info <span class=\"token punctuation\">(</span>om/get-query TabInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>defui Root\n  static om/IQuery\n  <span class=\"token punctuation\">(</span>query <span class=\"token punctuation\">[</span>this<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:tab1</span> <span class=\"token punctuation\">(</span>om/get-query Tab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">{</span><span class=\"token operator\">:tab2</span> <span class=\"token punctuation\">(</span>om/get-query Tab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>Now let's imagine that the <code class=\"language-text\">TabInfo</code> component in tab #2 has performed a transaction\nthat adds more items to its <code class=\"language-text\">:info/items</code> list. Check out the differences below\nbetween the application's root query and the <code class=\"language-text\">full-query</code> of the transacting component:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token comment\">;; Application's root query</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:tab1</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">:tab</span>/title\n         <span class=\"token punctuation\">{</span><span class=\"token operator\">:tab</span>/info <span class=\"token punctuation\">[</span><span class=\"token operator\">:info</span>/id <span class=\"token operator\">:info</span>/<span class=\"token keyword\">name</span> <span class=\"token operator\">:info</span>/items<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">{</span><span class=\"token operator\">:tab2</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">:tab</span>/title\n         <span class=\"token punctuation\">{</span><span class=\"token operator\">:tab</span>/info <span class=\"token punctuation\">[</span><span class=\"token operator\">:info</span>/id <span class=\"token operator\">:info</span>/<span class=\"token keyword\">name</span> <span class=\"token operator\">:info</span>/items<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">;; `om.next/full-query` of tab #2's `TabInfo`</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:tab2</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:tab</span>/info <span class=\"token punctuation\">[</span><span class=\"token operator\">:info</span>/id <span class=\"token operator\">:info</span>/<span class=\"token keyword\">name</span> <span class=\"token operator\">:info</span>/items<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>As you can see, the <code class=\"language-text\">full-query</code> is narrowly focused at the specific data requirements\nthat <code class=\"language-text\">TabInfo</code> declares. Two beneficial consequences follow: for one thing, it allows\nthe parser to dispatch on the same key as the root query; additionally, it makes\n<code class=\"language-text\">om.next/db-&gt;tree</code>'s data denormalization perform faster, as we're only interested\nin a specific subset of the data when compared to the application's root query.</p>\n<ul>\n<li>What about the \"data path\" mentioned above? What is that?</li>\n</ul>\n<p>The data path of a given component is simply a vector of keywords that describe how\nwe can get to the query of a given component starting from the query of an applications'\nroot component. In our example above, the path of tab #2's <code class=\"language-text\">TabInfo</code> would be\n<code class=\"language-text\">[:tab2 :tab/info]</code>. This means that Om Next can simply use <code class=\"language-text\">get-in</code> in the result\nof parsing and pass the correct data to the updating component(s).</p>\n<h2>Wrapping up</h2>\n<p>I hope this article helps you understand some of the inner workings that make Om\nNext awesome :-) In a next post, I'll talk about how we can optimize incremental\nrendering even further with \"path optimization\".</p>\n<p>Stay tuned, and thanks for reading!</p>\n<hr>\n<div id=\"fn:1\">\n  <sup><sub>1</sub></sup> <sub>Om Next&apos;s props are annotated with their &quot;path&quot; for\nvarious internal purposes. Before, we naively walked the data structure that resulted\nfrom parsing. Now we follow the data along the query path and only annotate the\nmatches. <a href=\"#fnref:1\"><img draggable=\"false\" class=\"emoji\" alt=\"&#x21A9;\" src=\"/public/img/top.svg\"></a></sub>\n</div>","fields":{"title":"Om Next internals: Incremental Rendering","date":"29 Sep 2016","tags":["clojure","clojurescript","om"],"slug":"/2016/09/om-next-internals-incremental-rendering/","url":"https://anmonteiro.com/2016/09/om-next-internals-incremental-rendering/"}},"allPosts":{"edges":[{"node":{"fields":{"title":"Reason and the Language Server Protocol: The Landscape","slug":"/2018/11/reason-and-the-language-server-protocol-the-landscape/","tags":["reason","ocaml","emacs","editors"],"date":"17 Nov 2018"}}},{"node":{"fields":{"title":"The State of ClojureScript Compilation in Lumo","slug":"/2017/09/the-state-of-clojurescript-compilation-in-lumo/","tags":["clojure","clojurescript","lumo"],"date":"19 Sep 2017"}}},{"node":{"fields":{"title":"Shipping a (very simplistic) ReasonReact app","slug":"/2017/08/shipping-a-very-simplistic-reasonreact-app/","tags":["reason","ocaml"],"date":"20 Aug 2017"}}},{"node":{"fields":{"title":"On Lumo's Growth and Sustainability","slug":"/2017/05/on-lumos-growth-and-sustainability/","tags":["clojure","clojurescript","lumo"],"date":"01 May 2017"}}},{"node":{"fields":{"title":"Requiring Node.js modules from ClojureScript namespaces","slug":"/2017/03/requiring-node-js-modules-from-clojurescript-namespaces/","tags":["clojure","clojurescript","node","nodejs"],"date":"17 Mar 2017"}}},{"node":{"fields":{"title":"Compiling ClojureScript Projects Without the JVM","slug":"/2017/02/compiling-clojurescript-projects-without-the-jvm/","tags":["clojure","clojurescript","lumo"],"date":"21 Feb 2017"}}},{"node":{"fields":{"title":"The fastest Clojure REPL in the world","slug":"/2016/11/the-fastest-clojure-repl-in-the-world/","tags":["clojure","clojurescript","lumo"],"date":"09 Nov 2016"}}},{"node":{"fields":{"title":"ClojureScript `require` outside `ns`","slug":"/2016/10/clojurescript-require-outside-ns/","tags":["clojure","clojurescript"],"date":"02 Oct 2016"}}},{"node":{"fields":{"title":"Om Next internals: Incremental Rendering","slug":"/2016/09/om-next-internals-incremental-rendering/","tags":["clojure","clojurescript","om"],"date":"29 Sep 2016"}}},{"node":{"fields":{"title":"Om Next Server-Side Rendering","slug":"/2016/09/om-next-server-side-rendering/","tags":["clojure","clojurescript","om"],"date":"15 Sep 2016"}}},{"node":{"fields":{"title":"Om Next at Full Stack Fest 2016","slug":"/2016/09/om-next-at-full-stack-fest-2016/","tags":["talks","clojure","clojurescript","om"],"date":"14 Sep 2016"}}},{"node":{"fields":{"title":"Om Next and Bootstrapped ClojureScript","slug":"/2016/08/om-next-and-bootstrapped-clojurescript/","tags":["clojure","clojurescript","om"],"date":"24 Aug 2016"}}},{"node":{"fields":{"title":"ClojureScript `require` now supports `:rename`","slug":"/2016/08/clojurescript-require-now-supports-rename/","tags":["clojure","clojurescript"],"date":"10 Aug 2016"}}},{"node":{"fields":{"title":"The quest for a unified routing solution in Om Next","slug":"/2016/06/the-quest-for-a-unified-routing-solution-in-om-next/","tags":["clojure","clojurescript","om"],"date":"12 Jun 2016"}}},{"node":{"fields":{"title":"&apos;Clients in control&apos; — Om Next at Craft Conference 2016","slug":"/2016/05/clients-in-control-om-next-craft-conf-2016/","tags":["talks","clojure","clojurescript","om"],"date":"14 May 2016"}}},{"node":{"fields":{"title":"Routing in Om Next — a Catalog of Approaches","slug":"/2016/02/routing-in-om-next-a-catalog-of-approaches/","tags":["clojure","clojurescript","om"],"date":"22 Feb 2016"}}},{"node":{"fields":{"title":"Om Next meets Devcards — the full reloadable experience","slug":"/2016/02/om-next-meets-devcards-the-full-reloadable-experience/","tags":["clojure","clojurescript","om"],"date":"01 Feb 2016"}}},{"node":{"fields":{"title":"Writing Om Next Reloadable Code — A Checklist","slug":"/2016/01/writing-om-next-reloadable-code-a-checklist/","tags":["clojure","clojurescript","om"],"date":"21 Jan 2016"}}},{"node":{"fields":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 2","slug":"/2016/01/exploration-patterns-om-next-part-2/","tags":["clojure","clojurescript","om"],"date":"09 Jan 2016"}}},{"node":{"fields":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 1","slug":"/2016/01/exploration-patterns-om-next-part-1/","tags":["clojure","clojurescript","om"],"date":"07 Jan 2016"}}},{"node":{"fields":{"title":"Om Next Query Syntax Explained","slug":"/2016/01/om-next-query-syntax/","tags":["clojure","clojurescript","om"],"date":"04 Jan 2016"}}},{"node":{"fields":{"title":"Om Next Study Material","slug":"/2015/12/om-next-study-material/","tags":["clojure","clojurescript","om"],"date":"10 Dec 2015"}}},{"node":{"fields":{"title":"clj-isitup - a simple isitup.org API client","slug":"/2015/11/clj-isitup-a-simple-isitup-org-api-client/","tags":["clojure"],"date":"17 Nov 2015"}}},{"node":{"fields":{"title":"Hosting files on the cloud via GitHub Issues","slug":"/2015/09/hosting-files-on-the-cloud-via-github-issues/","tags":["git","GitHub"],"date":"26 Sep 2015"}}},{"node":{"fields":{"title":"Solving Closure Library's Html5history double event dispatch","slug":"/2015/09/solving-closure-librarys-html5history-double-event-dispatch/","tags":["clojure","clojurescript"],"date":"11 Sep 2015"}}},{"node":{"fields":{"title":"Setting up Heroku config variables with Clojure","slug":"/2015/09/setting-up-heroku-config-variables-with-clojure/","tags":["clojure","heroku"],"date":"03 Sep 2015"}}},{"node":{"fields":{"title":"Jekyll related posts revamped","slug":"/2015/08/jekyll-related-posts-revamped/","tags":["jekyll"],"date":"29 Aug 2015"}}},{"node":{"fields":{"title":"Custom subdomains in GitHub project pages","slug":"/2015/08/custom-subdomains-in-github-project-pages/","tags":["git","GitHub"],"date":"24 Aug 2015"}}},{"node":{"fields":{"title":"Grand opening","slug":"/2015/08/grand-opening/","tags":["lifestyle"],"date":"18 Aug 2015"}}},{"node":{"fields":{"title":"on ocaml and the js platform","slug":"/2021/12/on-ocaml-and-the-js-platform/","tags":["reason","ocaml","rescript"],"date":"12 Dec 2021"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2016/09/om-next-internals-incremental-rendering/"}}