{"data":{"markdownRemark":{"excerpt":"\nThere are several different options to implement routing in an Om Next application. However, any  one of those approaches is not straightforward to accomplish, and often requires more time than one would like to get right. Until now.\n\n","html":"<p>There are several different options to implement routing in an Om Next application. However, any  one of those approaches is not straightforward to accomplish, and often requires more time than one would like to get right. Until now.</p>\n<!--more-->\n<div class=\"message\">\n  <strong>TL;DR</strong>: I've developed <a href=\"https://github.com/anmonteiro/compassus\">Compassus</a>, a routing library for Om Next.\n</div>\n<h4><strong>Disclaimer</strong></h4>\n<p>The meaning that <strong>routing</strong> is intended to convey throughout this post is the ability to swap UI components in and out of an application's main view according to some parameter (the \"selected route\"). This is not to be confused with URL or path navigation, terms that I will use where appropriate.</p>\n<h2>The problem</h2>\n<p>Although my <a href=\"2016/02/routing-in-om-next-a-catalog-of-approaches\">routing catalogue post</a> details a number of different ways one can implement routing in an Om Next application, adding such a feature — which has mandatory presence in the type of applications we are building today — comes at a cost. Firstly, it is most definitely not straightforward for beginner users to integrate into their apps (and let's face it, given how long Om Next has been around, we are all beginners). Moreover, we end up writing an unavoidable amount of boilerplate code that will easily be repeated across every project we have to provide routing for. Finally, writing the parser code is quite challenging and a very probable source of bugs, especially when integrating remote calls.</p>\n<h2>Embracing tradeoffs</h2>\n<p>The fact that there are many different alternatives to approach routing implementations is at the same time a very good thing — it really shows how powerful Om Next is at providing enough building blocks that can be assembled in very flexible ways — and not such a great thing, exactly because there are so <a href=\"https://en.wikipedia.org/wiki/The_Paradox_of_Choice\">many alternatives</a>.</p>\n<p>Each choice comes with its own benefits, but is not short of tradeoffs. Routing with <code class=\"language-text\">om.next/subquery</code> is very concise, but it really only works for a bounded number of routes, provided each has its own React ref. Using <code class=\"language-text\">om.next/set-query!</code> is probably easier to implement due to simpler parser integration, but we lose the holistic view of the queries in our application. Routing via union queries is, in my personal opinion, the most powerful choice, but writing working parser code for every case is possibly much trickier than in every other scenario.</p>\n<h2>Settling for a solution</h2>\n<p>Stemming from both the above motivation and my own struggle to implement a routing solution in the various projects I've been working on lately, I started thinking of ways to simplify all the work that needs to be put into integrating routing in an Om Next application. A usable solution for this problem would require working through several requirements:</p>\n<style>\nul li > ul {\n  margin-bottom: 0;\n}\n</style>\n<ul>\n<li>An idiomatic, <strong>data-first representation</strong> for application routes</li>\n<li>\n<p><strong>Automatic routing</strong> from the route representation</p>\n<ul>\n<li>A route representation should be enough to have working routing in an application</li>\n</ul>\n</li>\n<li>\n<p>Seamless integration with Om Next</p>\n<ul>\n<li>without <em>a priori</em> opinions about reconciler options</li>\n</ul>\n</li>\n<li>Simplified (<strong>not limiting</strong>) parser code for library consumers</li>\n<li>\n<p>Built-in support for URL navigation and HTML5 browser history</p>\n<ul>\n<li>providing seamless integration with existing routing libraries such as <a href=\"https://github.com/juxt/bidi\">bidi</a> and <a href=\"https://github.com/gf3/secretary\">secretary</a></li>\n</ul>\n</li>\n</ul>\n<p>After working through these requirements, I settled for a solution. <a href=\"https://github.com/compassus/compassus\">Compassus</a> is the product of this work, and you can find more information in its <a href=\"https://github.com/compassus/compassus\">GitHub repository</a>. I've also made the API docs available in <a href=\"https://compassus.github.io/compassus/doc/1.0.0-alpha2/\">this link</a>, as well as some <a href=\"https://compassus.github.io/compassus/devcards\">devcards examples</a>.</p>\n<p>I hope it is as useful for your applications' routing needs as it has been for me. All feedback is appreciated. As always, thanks for reading!</p>\n<hr>\n<p><em><small>Thanks to Tony Kay for reading a draft of this post.</small></em></p>","fields":{"title":"The quest for a unified routing solution in Om Next","date":"12 Jun 2016","tags":["clojure","clojurescript","om"],"slug":"/2016/06/the-quest-for-a-unified-routing-solution-in-om-next/","url":"https://anmonteiro.com/2016/06/the-quest-for-a-unified-routing-solution-in-om-next/"}},"allPosts":{"edges":[{"node":{"fields":{"title":"Reason and the Language Server Protocol: The Landscape","slug":"/2018/11/reason-and-the-language-server-protocol-the-landscape/","tags":["reason","ocaml","emacs","editors"],"date":"17 Nov 2018"}}},{"node":{"fields":{"title":"The State of ClojureScript Compilation in Lumo","slug":"/2017/09/the-state-of-clojurescript-compilation-in-lumo/","tags":["clojure","clojurescript","lumo"],"date":"19 Sep 2017"}}},{"node":{"fields":{"title":"Shipping a (very simplistic) ReasonReact app","slug":"/2017/08/shipping-a-very-simplistic-reasonreact-app/","tags":["reason","ocaml"],"date":"20 Aug 2017"}}},{"node":{"fields":{"title":"On Lumo's Growth and Sustainability","slug":"/2017/05/on-lumos-growth-and-sustainability/","tags":["clojure","clojurescript","lumo"],"date":"01 May 2017"}}},{"node":{"fields":{"title":"Requiring Node.js modules from ClojureScript namespaces","slug":"/2017/03/requiring-node-js-modules-from-clojurescript-namespaces/","tags":["clojure","clojurescript","node","nodejs"],"date":"17 Mar 2017"}}},{"node":{"fields":{"title":"Compiling ClojureScript Projects Without the JVM","slug":"/2017/02/compiling-clojurescript-projects-without-the-jvm/","tags":["clojure","clojurescript","lumo"],"date":"21 Feb 2017"}}},{"node":{"fields":{"title":"The fastest Clojure REPL in the world","slug":"/2016/11/the-fastest-clojure-repl-in-the-world/","tags":["clojure","clojurescript","lumo"],"date":"09 Nov 2016"}}},{"node":{"fields":{"title":"ClojureScript `require` outside `ns`","slug":"/2016/10/clojurescript-require-outside-ns/","tags":["clojure","clojurescript"],"date":"02 Oct 2016"}}},{"node":{"fields":{"title":"Om Next internals: Incremental Rendering","slug":"/2016/09/om-next-internals-incremental-rendering/","tags":["clojure","clojurescript","om"],"date":"29 Sep 2016"}}},{"node":{"fields":{"title":"Om Next Server-Side Rendering","slug":"/2016/09/om-next-server-side-rendering/","tags":["clojure","clojurescript","om"],"date":"15 Sep 2016"}}},{"node":{"fields":{"title":"Om Next at Full Stack Fest 2016","slug":"/2016/09/om-next-at-full-stack-fest-2016/","tags":["talks","clojure","clojurescript","om"],"date":"14 Sep 2016"}}},{"node":{"fields":{"title":"Om Next and Bootstrapped ClojureScript","slug":"/2016/08/om-next-and-bootstrapped-clojurescript/","tags":["clojure","clojurescript","om"],"date":"24 Aug 2016"}}},{"node":{"fields":{"title":"ClojureScript `require` now supports `:rename`","slug":"/2016/08/clojurescript-require-now-supports-rename/","tags":["clojure","clojurescript"],"date":"10 Aug 2016"}}},{"node":{"fields":{"title":"The quest for a unified routing solution in Om Next","slug":"/2016/06/the-quest-for-a-unified-routing-solution-in-om-next/","tags":["clojure","clojurescript","om"],"date":"12 Jun 2016"}}},{"node":{"fields":{"title":"&apos;Clients in control&apos; — Om Next at Craft Conference 2016","slug":"/2016/05/clients-in-control-om-next-craft-conf-2016/","tags":["talks","clojure","clojurescript","om"],"date":"14 May 2016"}}},{"node":{"fields":{"title":"Routing in Om Next — a Catalog of Approaches","slug":"/2016/02/routing-in-om-next-a-catalog-of-approaches/","tags":["clojure","clojurescript","om"],"date":"22 Feb 2016"}}},{"node":{"fields":{"title":"Om Next meets Devcards — the full reloadable experience","slug":"/2016/02/om-next-meets-devcards-the-full-reloadable-experience/","tags":["clojure","clojurescript","om"],"date":"01 Feb 2016"}}},{"node":{"fields":{"title":"Writing Om Next Reloadable Code — A Checklist","slug":"/2016/01/writing-om-next-reloadable-code-a-checklist/","tags":["clojure","clojurescript","om"],"date":"21 Jan 2016"}}},{"node":{"fields":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 2","slug":"/2016/01/exploration-patterns-om-next-part-2/","tags":["clojure","clojurescript","om"],"date":"09 Jan 2016"}}},{"node":{"fields":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 1","slug":"/2016/01/exploration-patterns-om-next-part-1/","tags":["clojure","clojurescript","om"],"date":"07 Jan 2016"}}},{"node":{"fields":{"title":"Om Next Query Syntax Explained","slug":"/2016/01/om-next-query-syntax/","tags":["clojure","clojurescript","om"],"date":"04 Jan 2016"}}},{"node":{"fields":{"title":"Om Next Study Material","slug":"/2015/12/om-next-study-material/","tags":["clojure","clojurescript","om"],"date":"10 Dec 2015"}}},{"node":{"fields":{"title":"clj-isitup - a simple isitup.org API client","slug":"/2015/11/clj-isitup-a-simple-isitup-org-api-client/","tags":["clojure"],"date":"17 Nov 2015"}}},{"node":{"fields":{"title":"Hosting files on the cloud via GitHub Issues","slug":"/2015/09/hosting-files-on-the-cloud-via-github-issues/","tags":["git","GitHub"],"date":"26 Sep 2015"}}},{"node":{"fields":{"title":"Solving Closure Library's Html5history double event dispatch","slug":"/2015/09/solving-closure-librarys-html5history-double-event-dispatch/","tags":["clojure","clojurescript"],"date":"11 Sep 2015"}}},{"node":{"fields":{"title":"Setting up Heroku config variables with Clojure","slug":"/2015/09/setting-up-heroku-config-variables-with-clojure/","tags":["clojure","heroku"],"date":"03 Sep 2015"}}},{"node":{"fields":{"title":"Jekyll related posts revamped","slug":"/2015/08/jekyll-related-posts-revamped/","tags":["jekyll"],"date":"29 Aug 2015"}}},{"node":{"fields":{"title":"Custom subdomains in GitHub project pages","slug":"/2015/08/custom-subdomains-in-github-project-pages/","tags":["git","GitHub"],"date":"24 Aug 2015"}}},{"node":{"fields":{"title":"Grand opening","slug":"/2015/08/grand-opening/","tags":["lifestyle"],"date":"18 Aug 2015"}}},{"node":{"fields":{"title":"on ocaml and the js platform","slug":"/2021/12/on-ocaml-and-the-js-platform/","tags":["reason","ocaml","rescript"],"date":"12 Dec 2021"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2016/06/the-quest-for-a-unified-routing-solution-in-om-next/"}}