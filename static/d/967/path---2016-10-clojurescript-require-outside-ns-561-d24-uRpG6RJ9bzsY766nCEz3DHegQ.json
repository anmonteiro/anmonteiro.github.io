{"data":{"markdownRemark":{"excerpt":"\nThe next version of the ClojureScript compiler adds support for using `require`\noutside of the `ns` form. Owing to ClojureScript's compilation model, however, there\nexist subtle differences with respect to the behavior that Clojure provides. Read\non to learn more.\n\n","html":"<p>The next version of the ClojureScript compiler adds support for using <code class=\"language-text\">require</code>\noutside of the <code class=\"language-text\">ns</code> form. Owing to ClojureScript's compilation model, however, there\nexist subtle differences with respect to the behavior that Clojure provides. Read\non to learn more.</p>\n<!--more-->\n<div class=\"message\">\n  <strong style=\"text-decoration:underline\">Update:</strong> This has been released\n  as part of ClojureScript version 1.9.293.\n</div>\n<div style=\"margin:20px\">\n  <img style=\"max-width: 70%;margin:0 auto\" src=\"https://cloud.githubusercontent.com/assets/661909/19021756/7a918376-88c0-11e6-9449-dc8a595e3b20.jpg\">\n</div>\n<h2>Background</h2>\n<p>Ever since its inception, ClojureScript has always required files to provide a namespace\ndeclaration at the top. A hard requirement like that is sometimes counterproductive\nwhen we just want to try something out quickly. Besides, it doesn't mimic Clojure's\nbehavior very well, where it assumes you're in the default <code class=\"language-text\">user</code> namespace when\na namespace declaration is not provided. In addition, forms like <code class=\"language-text\">require</code>, <code class=\"language-text\">use</code>\nand <code class=\"language-text\">import</code> were never supported outside of the ClojureScript REPL, and even those\nwere implemented as a hack on top of <code class=\"language-text\">ns</code>.</p>\n<p>A number of tickets (<a href=\"http://dev.clojure.org/jira/browse/CLJS-1277\">1</a>, <a href=\"http://dev.clojure.org/jira/browse/CLJS-1346\">2</a>)\nhad been lying around in ClojureScript's issue tracker to address these shortcomings.\nNow, a <a href=\"https://github.com/clojure/clojurescript/commit/b5147bfeb1e8034e93014e35bb27c9fb4d9c10de\">recent addition</a>\nto the compiler (coming in the next release) fixes these issues, paving the way for\na number of enhancements coming to ClojureScript in the near future.</p>\n<h2>Differences from Clojure</h2>\n<p>In Clojure, you can <code class=\"language-text\">require</code> namespaces dynamically into your namespace, load code\nconditionally and at arbitrary nesting levels. In ClojureScript, this is not the\ncase, mostly due to the static nature of namespaces in the Google Closure Library.\nConsequently, there are couple of rules to abide by when calling <code class=\"language-text\">require</code> and similar\nforms (<code class=\"language-text\">use</code>, <code class=\"language-text\">use-macros</code>, etc.) in ClojureScript:</p>\n<ol>\n<li>A file can have one of:</li>\n<li>a namespace declaration, <strong>or</strong></li>\n<li>(possibly several) <code class=\"language-text\">require</code> forms, <strong>or</strong></li>\n<li>none of the above, in the case it doesn't depend on any other namespace.</li>\n<li>when present, <code class=\"language-text\">require</code> forms must appear at the top of a file.</li>\n<li>All the definitions in a file without a namespace declaration are interned in\nthe <code class=\"language-text\">cljs.user</code> namespace <sup id=\"fnref:1\"><sub><a href=\"#fn:1\">1</a></sub></sup>.</li>\n</ol>\n<h2>Example</h2>\n<p>Because this new feature is currently unreleased, the only way you can try it out\ntoday is by <a href=\"https://github.com/clojure/clojurescript/wiki/Building-the-compiler\">building the compiler</a>\nuberjar (with <code class=\"language-text\">script/uberjar</code>). Below is an example you can use to guide you through\nthis new addition.</p>\n<p>Create a project with the following structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">project\n├─ src\n│  └─ foo.cljs\n└─ cljs.jar</code></pre></div>\n<p>In <code class=\"language-text\">foo.cljs</code>, place the contents below. As an aside, note that we're taking advantage\nof <a href=\"http://blog.fikesfarm.com/posts/2016-07-03-clojurescript-clojure-namespace-aliasing.html\">Clojure namespace aliasing</a>\n(<a href=\"http://dev.clojure.org/jira/browse/CLJS-1692\">JIRA ticket</a>) and\n<a href=\"http://dev.clojure.org/jira/browse/CLJS-1507\">implicit macro loading</a>. This too —\nas one might expect — works outside the namespace declaration.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token comment\">;; src/foo.cljs</span>\n<span class=\"token punctuation\">(</span>require '<span class=\"token punctuation\">[</span>clojure.<span class=\"token keyword\">test</span> <span class=\"token operator\">:refer</span> <span class=\"token punctuation\">[</span>deftest is run-tests<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>deftest failing-test\n  <span class=\"token punctuation\">(</span>is <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>run-tests<span class=\"token punctuation\">)</span></code></pre></div>\n<p>With the <code class=\"language-text\">cljs.jar</code> uberjar in place, running the following command will land you\ndirectly in a ClojureScript Node.js REPL (<em>note</em>: requires a Node.js installation).</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ java -cp src:cljs.jar clojure.main -e <span class=\"token string\">\"(require 'cljs.repl) (require 'cljs.repl.node) (cljs.repl/repl (cljs.repl.node/repl-env))\"</span></code></pre></div>\n<p>Then you can load the file into the REPL and see it execute!</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\">ClojureScript Node.js REPL server listening on <span class=\"token number\">53518</span>\nTo quit<span class=\"token punctuation\">,</span> type: <span class=\"token operator\">:cljs</span>/quit\n\ncljs.user=<span class=\"token keyword\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">load-file</span> <span class=\"token string\">\"src/foo.cljs\"</span><span class=\"token punctuation\">)</span>\n\nTesting cljs.user\n\nFAIL in <span class=\"token punctuation\">(</span>failing-test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>at .cljs_node_repl/cljs/<span class=\"token keyword\">test</span>.js:<span class=\"token number\">432</span>:<span class=\"token number\">14</span><span class=\"token punctuation\">)</span>\nexpected: <span class=\"token boolean\">false</span>\n  actual: <span class=\"token boolean\">false</span>\n\nRan <span class=\"token number\">1</span> tests containing <span class=\"token number\">1</span> assertions.\n<span class=\"token number\">1</span> failures<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> errors.\n<span class=\"token boolean\">nil</span>\ncljs.user=></code></pre></div>\n<p>I've also captured all the above in a <a href=\"https://gist.github.com/anmonteiro/478fc609c297cfd1217ebb9890ceba08\">gist</a>\nthat you can refer back to later.</p>\n<h2>Parting thoughts</h2>\n<p>This addition unlocked a number of new possibilities for ClojureScript, which are\nalready bearing fruits. First of all, it already allowed us to\n<a href=\"https://github.com/clojure/clojurescript/commit/c9c122\">delete a ton of hacky code</a>\nthat made <code class=\"language-text\">require</code> work in REPLs. In a very near future, it will allow ClojureScript\nto add a number of new exciting features, one of which is support for\n<a href=\"http://dev.clojure.org/jira/browse/CLJS-1194\">extensible tagged literals</a>.</p>\n<p>Thanks for reading!</p>\n<hr>\n<div id=\"fn:1\">\n  <sup><sub>1</sub></sup> <sub>If a <code>ns</code> form\n  is not present, a generated namespace will be provided in the form of\n  <code class=\"highlighter-rouge\">cljs.user.file_nameXXXX</code>, where\n  <code class=\"highlighter-rouge\">XXXX</code> are the first characters of the filenames&apos;s\n  SHA1 hash. This implementation detail effectively works around the fact that the\n  Google Closure Library requires files to provide different namespaces.\n  <a href=\"#fnref:1\"><img draggable=\"false\" class=\"emoji\" alt=\"&#x21A9;\" src=\"/public/img/top.svg\"></a></sub>\n</div>\n<br>\n*<small>Thanks to <a href=\"https://twitter.com/mfikes\">Mike Fikes</a> for reading a draft of this post.</small>*","fields":{"title":"ClojureScript `require` outside `ns`","date":"02 Oct 2016","tags":["clojure","clojurescript"],"slug":"/2016/10/clojurescript-require-outside-ns/","url":"https://anmonteiro.com/2016/10/clojurescript-require-outside-ns/"}},"allPosts":{"edges":[{"node":{"fields":{"title":"Reason and the Language Server Protocol: The Landscape","slug":"/2018/11/reason-and-the-language-server-protocol-the-landscape/","tags":["reason","ocaml","emacs","editors"],"date":"17 Nov 2018"}}},{"node":{"fields":{"title":"The State of ClojureScript Compilation in Lumo","slug":"/2017/09/the-state-of-clojurescript-compilation-in-lumo/","tags":["clojure","clojurescript","lumo"],"date":"19 Sep 2017"}}},{"node":{"fields":{"title":"Shipping a (very simplistic) ReasonReact app","slug":"/2017/08/shipping-a-very-simplistic-reasonreact-app/","tags":["reason","ocaml"],"date":"20 Aug 2017"}}},{"node":{"fields":{"title":"On Lumo's Growth and Sustainability","slug":"/2017/05/on-lumos-growth-and-sustainability/","tags":["clojure","clojurescript","lumo"],"date":"01 May 2017"}}},{"node":{"fields":{"title":"Requiring Node.js modules from ClojureScript namespaces","slug":"/2017/03/requiring-node-js-modules-from-clojurescript-namespaces/","tags":["clojure","clojurescript","node","nodejs"],"date":"17 Mar 2017"}}},{"node":{"fields":{"title":"Compiling ClojureScript Projects Without the JVM","slug":"/2017/02/compiling-clojurescript-projects-without-the-jvm/","tags":["clojure","clojurescript","lumo"],"date":"21 Feb 2017"}}},{"node":{"fields":{"title":"The fastest Clojure REPL in the world","slug":"/2016/11/the-fastest-clojure-repl-in-the-world/","tags":["clojure","clojurescript","lumo"],"date":"09 Nov 2016"}}},{"node":{"fields":{"title":"ClojureScript `require` outside `ns`","slug":"/2016/10/clojurescript-require-outside-ns/","tags":["clojure","clojurescript"],"date":"02 Oct 2016"}}},{"node":{"fields":{"title":"Om Next internals: Incremental Rendering","slug":"/2016/09/om-next-internals-incremental-rendering/","tags":["clojure","clojurescript","om"],"date":"29 Sep 2016"}}},{"node":{"fields":{"title":"Om Next Server-Side Rendering","slug":"/2016/09/om-next-server-side-rendering/","tags":["clojure","clojurescript","om"],"date":"15 Sep 2016"}}},{"node":{"fields":{"title":"Om Next at Full Stack Fest 2016","slug":"/2016/09/om-next-at-full-stack-fest-2016/","tags":["talks","clojure","clojurescript","om"],"date":"14 Sep 2016"}}},{"node":{"fields":{"title":"Om Next and Bootstrapped ClojureScript","slug":"/2016/08/om-next-and-bootstrapped-clojurescript/","tags":["clojure","clojurescript","om"],"date":"24 Aug 2016"}}},{"node":{"fields":{"title":"ClojureScript `require` now supports `:rename`","slug":"/2016/08/clojurescript-require-now-supports-rename/","tags":["clojure","clojurescript"],"date":"10 Aug 2016"}}},{"node":{"fields":{"title":"The quest for a unified routing solution in Om Next","slug":"/2016/06/the-quest-for-a-unified-routing-solution-in-om-next/","tags":["clojure","clojurescript","om"],"date":"12 Jun 2016"}}},{"node":{"fields":{"title":"&apos;Clients in control&apos; — Om Next at Craft Conference 2016","slug":"/2016/05/clients-in-control-om-next-craft-conf-2016/","tags":["talks","clojure","clojurescript","om"],"date":"14 May 2016"}}},{"node":{"fields":{"title":"Routing in Om Next — a Catalog of Approaches","slug":"/2016/02/routing-in-om-next-a-catalog-of-approaches/","tags":["clojure","clojurescript","om"],"date":"22 Feb 2016"}}},{"node":{"fields":{"title":"Om Next meets Devcards — the full reloadable experience","slug":"/2016/02/om-next-meets-devcards-the-full-reloadable-experience/","tags":["clojure","clojurescript","om"],"date":"01 Feb 2016"}}},{"node":{"fields":{"title":"Writing Om Next Reloadable Code — A Checklist","slug":"/2016/01/writing-om-next-reloadable-code-a-checklist/","tags":["clojure","clojurescript","om"],"date":"21 Jan 2016"}}},{"node":{"fields":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 2","slug":"/2016/01/exploration-patterns-om-next-part-2/","tags":["clojure","clojurescript","om"],"date":"09 Jan 2016"}}},{"node":{"fields":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 1","slug":"/2016/01/exploration-patterns-om-next-part-1/","tags":["clojure","clojurescript","om"],"date":"07 Jan 2016"}}},{"node":{"fields":{"title":"Om Next Query Syntax Explained","slug":"/2016/01/om-next-query-syntax/","tags":["clojure","clojurescript","om"],"date":"04 Jan 2016"}}},{"node":{"fields":{"title":"Om Next Study Material","slug":"/2015/12/om-next-study-material/","tags":["clojure","clojurescript","om"],"date":"10 Dec 2015"}}},{"node":{"fields":{"title":"clj-isitup - a simple isitup.org API client","slug":"/2015/11/clj-isitup-a-simple-isitup-org-api-client/","tags":["clojure"],"date":"17 Nov 2015"}}},{"node":{"fields":{"title":"Hosting files on the cloud via GitHub Issues","slug":"/2015/09/hosting-files-on-the-cloud-via-github-issues/","tags":["git","GitHub"],"date":"26 Sep 2015"}}},{"node":{"fields":{"title":"Solving Closure Library's Html5history double event dispatch","slug":"/2015/09/solving-closure-librarys-html5history-double-event-dispatch/","tags":["clojure","clojurescript"],"date":"11 Sep 2015"}}},{"node":{"fields":{"title":"Setting up Heroku config variables with Clojure","slug":"/2015/09/setting-up-heroku-config-variables-with-clojure/","tags":["clojure","heroku"],"date":"03 Sep 2015"}}},{"node":{"fields":{"title":"Jekyll related posts revamped","slug":"/2015/08/jekyll-related-posts-revamped/","tags":["jekyll"],"date":"29 Aug 2015"}}},{"node":{"fields":{"title":"Custom subdomains in GitHub project pages","slug":"/2015/08/custom-subdomains-in-github-project-pages/","tags":["git","GitHub"],"date":"24 Aug 2015"}}},{"node":{"fields":{"title":"Grand opening","slug":"/2015/08/grand-opening/","tags":["lifestyle"],"date":"18 Aug 2015"}}},{"node":{"fields":{"title":"On OCaml and the JS platform","slug":"/2021/12/on-ocaml-and-the-js-platform/","tags":["reason","ocaml","rescript"],"date":"11 Dec 2021"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2016/10/clojurescript-require-outside-ns/"}}