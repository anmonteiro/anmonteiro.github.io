{"data":{"markdownRemark":{"excerpt":"\nConfiguration or environment variables are really useful whether you want to externally affect the way your apps run or if you simply want to keep private, sensitive data out of your version control system. The other day I ran into some trouble having [Heroku](https://www.heroku.com/) read the config variables of a Clojure app of mine. So here's how to get it working.\n\n","html":"<p>Configuration or environment variables are really useful whether you want to externally affect the way your apps run or if you simply want to keep private, sensitive data out of your version control system. The other day I ran into some trouble having <a href=\"https://www.heroku.com/\">Heroku</a> read the config variables of a Clojure app of mine. So here's how to get it working.</p>\n<!--more-->\n<h3>1. Add the variables to Heroku</h3>\n<p>In your Heroku app dashboard, go into settings and click \"Reveal Config Vars\". If you haven't added any configuration variables yet, it should look something like this:</p>\n<img title=\"No configuration variables\" src=\"https://cloud.githubusercontent.com/assets/661909/10079248/392b124c-62e9-11e5-9b9f-3b796b135d09.png\">\n<p>Go ahead, then, and click \"Edit\" to add the configuration variables you want to add. The next image shows what you should now be seeing. Type in the key and the value for each one.</p>\n<img title=\"Add configuration variables\" src=\"https://cloud.githubusercontent.com/assets/661909/10079262/49fb210c-62e9-11e5-965f-2c97fbec80e5.png\">\n<h3>2. Reference your variables in your Clojure code</h3>\n<p>Now for the trickier part. You might be tempted to simply write something like the following (which was actually what I was doing):</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">def</span> MY-VAR <span class=\"token punctuation\">(</span>System/getenv <span class=\"token string\">\"MY-VAR\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>However, as per <a href=\"https://devcenter.heroku.com/articles/getting-started-with-clojure#define-config-vars\">Heroku's documentation</a>, only <em>\"at runtime, config vars are exposed as environment variables to the application\"</em>, and since <code class=\"language-text\">def</code> calls are bound at compile time, the above code would not work.</p>\n<h4 style=\"text-shadow: 1px 0 #000;letter-spacing: 1px;\"> So, what's the solution?</h4>\n<p>Well, the solution is to bind your variables at runtime, inside a function call which executes when the app is started.</p>\n<p><strong>- But you shouldn't declare vars inside functions, or <a href=\"https://github.com/bbatsov/clojure-style-guide#alter-var\">change them</a> using <code class=\"language-text\">def</code> calls!</strong> - the attentive reader argues; correctly. The code that follows doesn't do either.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token comment\">;;;;;;;;;;;;;;</span>\n<span class=\"token comment\">;; option A ;;</span>\n<span class=\"token comment\">;;;;;;;;;;;;;;</span>\n\n<span class=\"token comment\">;; 1) declare a nil atom</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">def</span> MY-VAR <span class=\"token punctuation\">(</span>atom <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;; 2) \"reset!\" it in a function that is called when the app starts</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">defn</span> init-config <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">(</span>reset! MY-VAR <span class=\"token punctuation\">(</span>System/getenv <span class=\"token string\">\"MY-VAR\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">;;;;;;;;;;;;;;</span>\n<span class=\"token comment\">;; option B ;;</span>\n<span class=\"token comment\">;;;;;;;;;;;;;;</span>\n\n<span class=\"token comment\">;; 1. declare an unbound var (can also be bound,</span>\n<span class=\"token comment\">;;  but its value will change)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">def</span> MY-VAR<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;; 2. \"alter-var-root\" it in a function which is</span>\n<span class=\"token comment\">;;  called when the app starts</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">defn</span> init-config <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">(</span>alter-var-root #<span class=\"token operator\">'MY-VAR</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">constantly</span> <span class=\"token punctuation\">(</span>System/getenv <span class=\"token string\">\"MY-VAR\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Either option will work in Heroku, as long as reading the environment is done at runtime. A third alternative can be accomplished by using the <a href=\"https://github.com/weavejester/environ\">Environ</a> library. It allows for a more programatic approach and encompasses a handful of other features that you might find useful. Refer to its GitHub page for more information.</p>\n<p>If you liked this post or have any questions / suggestions, be sure to <a href=\"mailto:%7B%7B%20site.author.email%20%7D%7D\">drop me a line</a> or reach me on <a href=\"https://twitter.com/%7B%7B%20site.author.twitter_username%20%7D%7D\">Twitter</a>. Happy hacking!</p>","fields":{"title":"Setting up Heroku config variables with Clojure","date":"03 Sep 2015","tags":["clojure","heroku"],"slug":"/2015/09/setting-up-heroku-config-variables-with-clojure/","url":"https://anmonteiro.com/2015/09/setting-up-heroku-config-variables-with-clojure/"}},"allPosts":{"edges":[{"node":{"fields":{"title":"On OCaml and the JS platform","slug":"/2021/12/on-ocaml-and-the-js-platform/","tags":["reason","ocaml","rescript"],"date":"12 Dec 2021"}}},{"node":{"fields":{"title":"Reason and the Language Server Protocol: The Landscape","slug":"/2018/11/reason-and-the-language-server-protocol-the-landscape/","tags":["reason","ocaml","emacs","editors"],"date":"17 Nov 2018"}}},{"node":{"fields":{"title":"The State of ClojureScript Compilation in Lumo","slug":"/2017/09/the-state-of-clojurescript-compilation-in-lumo/","tags":["clojure","clojurescript","lumo"],"date":"19 Sep 2017"}}},{"node":{"fields":{"title":"Shipping a (very simplistic) ReasonReact app","slug":"/2017/08/shipping-a-very-simplistic-reasonreact-app/","tags":["reason","ocaml"],"date":"20 Aug 2017"}}},{"node":{"fields":{"title":"On Lumo's Growth and Sustainability","slug":"/2017/05/on-lumos-growth-and-sustainability/","tags":["clojure","clojurescript","lumo"],"date":"01 May 2017"}}},{"node":{"fields":{"title":"Requiring Node.js modules from ClojureScript namespaces","slug":"/2017/03/requiring-node-js-modules-from-clojurescript-namespaces/","tags":["clojure","clojurescript","node","nodejs"],"date":"17 Mar 2017"}}},{"node":{"fields":{"title":"Compiling ClojureScript Projects Without the JVM","slug":"/2017/02/compiling-clojurescript-projects-without-the-jvm/","tags":["clojure","clojurescript","lumo"],"date":"21 Feb 2017"}}},{"node":{"fields":{"title":"The fastest Clojure REPL in the world","slug":"/2016/11/the-fastest-clojure-repl-in-the-world/","tags":["clojure","clojurescript","lumo"],"date":"09 Nov 2016"}}},{"node":{"fields":{"title":"ClojureScript `require` outside `ns`","slug":"/2016/10/clojurescript-require-outside-ns/","tags":["clojure","clojurescript"],"date":"02 Oct 2016"}}},{"node":{"fields":{"title":"Om Next internals: Incremental Rendering","slug":"/2016/09/om-next-internals-incremental-rendering/","tags":["clojure","clojurescript","om"],"date":"29 Sep 2016"}}},{"node":{"fields":{"title":"Om Next Server-Side Rendering","slug":"/2016/09/om-next-server-side-rendering/","tags":["clojure","clojurescript","om"],"date":"15 Sep 2016"}}},{"node":{"fields":{"title":"Om Next at Full Stack Fest 2016","slug":"/2016/09/om-next-at-full-stack-fest-2016/","tags":["talks","clojure","clojurescript","om"],"date":"14 Sep 2016"}}},{"node":{"fields":{"title":"Om Next and Bootstrapped ClojureScript","slug":"/2016/08/om-next-and-bootstrapped-clojurescript/","tags":["clojure","clojurescript","om"],"date":"24 Aug 2016"}}},{"node":{"fields":{"title":"ClojureScript `require` now supports `:rename`","slug":"/2016/08/clojurescript-require-now-supports-rename/","tags":["clojure","clojurescript"],"date":"10 Aug 2016"}}},{"node":{"fields":{"title":"The quest for a unified routing solution in Om Next","slug":"/2016/06/the-quest-for-a-unified-routing-solution-in-om-next/","tags":["clojure","clojurescript","om"],"date":"12 Jun 2016"}}},{"node":{"fields":{"title":"&apos;Clients in control&apos; — Om Next at Craft Conference 2016","slug":"/2016/05/clients-in-control-om-next-craft-conf-2016/","tags":["talks","clojure","clojurescript","om"],"date":"14 May 2016"}}},{"node":{"fields":{"title":"Routing in Om Next — a Catalog of Approaches","slug":"/2016/02/routing-in-om-next-a-catalog-of-approaches/","tags":["clojure","clojurescript","om"],"date":"22 Feb 2016"}}},{"node":{"fields":{"title":"Om Next meets Devcards — the full reloadable experience","slug":"/2016/02/om-next-meets-devcards-the-full-reloadable-experience/","tags":["clojure","clojurescript","om"],"date":"01 Feb 2016"}}},{"node":{"fields":{"title":"Writing Om Next Reloadable Code — A Checklist","slug":"/2016/01/writing-om-next-reloadable-code-a-checklist/","tags":["clojure","clojurescript","om"],"date":"21 Jan 2016"}}},{"node":{"fields":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 2","slug":"/2016/01/exploration-patterns-om-next-part-2/","tags":["clojure","clojurescript","om"],"date":"09 Jan 2016"}}},{"node":{"fields":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 1","slug":"/2016/01/exploration-patterns-om-next-part-1/","tags":["clojure","clojurescript","om"],"date":"07 Jan 2016"}}},{"node":{"fields":{"title":"Om Next Query Syntax Explained","slug":"/2016/01/om-next-query-syntax/","tags":["clojure","clojurescript","om"],"date":"04 Jan 2016"}}},{"node":{"fields":{"title":"Om Next Study Material","slug":"/2015/12/om-next-study-material/","tags":["clojure","clojurescript","om"],"date":"10 Dec 2015"}}},{"node":{"fields":{"title":"clj-isitup - a simple isitup.org API client","slug":"/2015/11/clj-isitup-a-simple-isitup-org-api-client/","tags":["clojure"],"date":"17 Nov 2015"}}},{"node":{"fields":{"title":"Hosting files on the cloud via GitHub Issues","slug":"/2015/09/hosting-files-on-the-cloud-via-github-issues/","tags":["git","GitHub"],"date":"26 Sep 2015"}}},{"node":{"fields":{"title":"Solving Closure Library's Html5history double event dispatch","slug":"/2015/09/solving-closure-librarys-html5history-double-event-dispatch/","tags":["clojure","clojurescript"],"date":"11 Sep 2015"}}},{"node":{"fields":{"title":"Setting up Heroku config variables with Clojure","slug":"/2015/09/setting-up-heroku-config-variables-with-clojure/","tags":["clojure","heroku"],"date":"03 Sep 2015"}}},{"node":{"fields":{"title":"Jekyll related posts revamped","slug":"/2015/08/jekyll-related-posts-revamped/","tags":["jekyll"],"date":"29 Aug 2015"}}},{"node":{"fields":{"title":"Custom subdomains in GitHub project pages","slug":"/2015/08/custom-subdomains-in-github-project-pages/","tags":["git","GitHub"],"date":"24 Aug 2015"}}},{"node":{"fields":{"title":"Grand opening","slug":"/2015/08/grand-opening/","tags":["lifestyle"],"date":"18 Aug 2015"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2015/09/setting-up-heroku-config-variables-with-clojure/"}}