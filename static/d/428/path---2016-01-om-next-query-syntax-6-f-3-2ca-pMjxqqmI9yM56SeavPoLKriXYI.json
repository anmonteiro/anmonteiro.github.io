{"data":{"markdownRemark":{"excerpt":"\nAs more people start tinkering with Om Next, similar questions keep popping up increasingly often. While this is a natural thing given any new learning efforts, there can never be too many resources when we start learning something new. This write-up is an attempt to get people up and running with Om Next's query syntax by providing comprehensive examples and a quick syntax reference for the future.\n\n","html":"<p>As more people start tinkering with Om Next, similar questions keep popping up increasingly often. While this is a natural thing given any new learning efforts, there can never be too many resources when we start learning something new. This write-up is an attempt to get people up and running with Om Next's query syntax by providing comprehensive examples and a quick syntax reference for the future.</p>\n<!--more-->\n<h2><strong>Read queries</strong></h2>\n<p>This section covers the syntax for read queries, which are the ones we put into components that implement the <code class=\"language-text\">IQuery</code> protocol. The examples start out with the simplest form, progressing to more complex use cases as more syntax is revealed.</p>\n<h3>Property read</h3>\n<p>The simplest, self-explanatory case of reading a single property.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">[</span><span class=\"token operator\">:some</span>/<span class=\"token keyword\">key</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3>Parameterized property read</h3>\n<p>A property read that takes in one or more parameters (possibly defined in a component's implementation of the <code class=\"language-text\">IQueryParams</code> protocol). These parameters are passed as the third argument to the <code class=\"language-text\">read</code> parsing function.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token operator\">:some</span>/<span class=\"token keyword\">key</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">:some</span>/param <span class=\"token number\">42</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">;; Using it in IQuery &amp; IQueryParams</span>\n<span class=\"token punctuation\">(</span>defui SomeComponent\n  static om/IQueryParams\n  <span class=\"token punctuation\">(</span>params <span class=\"token punctuation\">[</span>this<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">:some</span>/param <span class=\"token number\">42</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  static om/IQuery\n  <span class=\"token punctuation\">(</span>query <span class=\"token punctuation\">[</span>this<span class=\"token punctuation\">]</span>\n    '<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token operator\">:some</span>/<span class=\"token keyword\">key</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">:some</span>/param ?some/param<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Join query</h3>\n<p>A join refers to reading a property of the state, e.g. a vector of elements, while specifying the exact (sub-)set of sub-properties that should be read for each item in that vector.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token comment\">;; given this state</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">def</span> state <span class=\"token punctuation\">{</span><span class=\"token operator\">:some</span>/<span class=\"token keyword\">key</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:subkey</span>/one <span class=\"token number\">1</span>\n                        <span class=\"token operator\">:subkey</span>/two <span class=\"token number\">2</span>\n                        <span class=\"token operator\">:subkey</span>/three <span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\n                       <span class=\"token punctuation\">{</span><span class=\"token operator\">:subkey</span>/one <span class=\"token number\">1</span>\n                        <span class=\"token operator\">:subkey</span>/two <span class=\"token number\">2</span>\n                        <span class=\"token operator\">:subkey</span>/three <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;; this query will yield the elements of `:some/key`</span>\n<span class=\"token comment\">;; containing only the properties `:subkey/one` and `:subkey/two`</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:some</span>/<span class=\"token keyword\">key</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">:subkey</span>/one <span class=\"token operator\">:subkey</span>/two<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">;; this one reads every sub-key</span>\n'<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:some</span>/<span class=\"token keyword\">key</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">*</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3>Parameterized join query</h3>\n<p>As with property query, we can also parameterize joins. The syntax for a parameterized join follows.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:some</span>/<span class=\"token keyword\">key</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">:subkey</span>/one <span class=\"token operator\">:subkey</span>/two<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">:some</span>/param <span class=\"token number\">42</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3>Reference (Idents &#x26; Links) queries</h3>\n<p>When working with normalized data, using an <code class=\"language-text\">Ident</code> reference in a query will direct the Om Next parser to lookup the element with that reference at the root of the application state.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token comment\">;; using an `ident` will yield (get-in state [:item/by-id 0])</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token operator\">:item</span>/by-id <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">;; Using a `_` will produce (get-in state [:active/panel])</span>\n'<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token operator\">:active</span>/panel _<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3>Union query</h3>\n<p>Certain types of applications require us to handle heterogeneous data that share the same parent. Union queries provide the basis to handle such heterogeneity by allowing us to define just that â€” there might live different pieces of data under a certain application state key.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token comment\">;; Given the following app state:</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">def</span> state <span class=\"token punctuation\">{</span><span class=\"token operator\">:items</span>/<span class=\"token keyword\">list</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:item</span>/id <span class=\"token number\">0</span> <span class=\"token operator\">:item</span>/type <span class=\"token operator\">:foo</span> <span class=\"token operator\">:foo</span>/value <span class=\"token number\">42</span><span class=\"token punctuation\">}</span>\n                         <span class=\"token punctuation\">{</span><span class=\"token operator\">:item</span>/id <span class=\"token number\">1</span> <span class=\"token operator\">:item</span>/type <span class=\"token operator\">:bar</span> <span class=\"token operator\">:bar</span>/value <span class=\"token number\">43</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;; Foo has property `:foo/value`</span>\n<span class=\"token punctuation\">(</span>defui Foo\n  static om/Ident\n  <span class=\"token punctuation\">(</span>ident <span class=\"token punctuation\">[</span>this <span class=\"token punctuation\">{</span><span class=\"token operator\">:keys</span> <span class=\"token punctuation\">[</span>item/type item/id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span>type id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  static om/IQuery\n  <span class=\"token punctuation\">(</span>query <span class=\"token punctuation\">[</span>this<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token operator\">:item</span>/id <span class=\"token operator\">:item</span>/type <span class=\"token operator\">:foo</span>/value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;; Bar has property `:bar/value`</span>\n<span class=\"token punctuation\">(</span>defui Bar\n  static om/Ident\n  <span class=\"token punctuation\">(</span>ident <span class=\"token punctuation\">[</span>this <span class=\"token punctuation\">{</span><span class=\"token operator\">:keys</span> <span class=\"token punctuation\">[</span>item/type item/id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span>type id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  static om/IQuery\n  <span class=\"token punctuation\">(</span>query <span class=\"token punctuation\">[</span>this<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token operator\">:item</span>/id <span class=\"token operator\">:item</span>/type <span class=\"token operator\">:bar</span>/value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;; An item can be either Foo or Bar</span>\n<span class=\"token punctuation\">(</span>defui Item\n  static om/IQuery\n  <span class=\"token punctuation\">(</span>query <span class=\"token punctuation\">[</span>this<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">:foo</span> <span class=\"token punctuation\">(</span>om/get-query Foo<span class=\"token punctuation\">)</span>\n     <span class=\"token operator\">:bar</span> <span class=\"token punctuation\">(</span>om/get-query Bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;; The item list contains items (either Foo items or Bar items)</span>\n<span class=\"token punctuation\">(</span>defui ItemList\n  static om/IQuery\n  <span class=\"token punctuation\">(</span>query <span class=\"token punctuation\">[</span>this<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:items</span>/<span class=\"token keyword\">list</span> <span class=\"token punctuation\">(</span>om/get-query Item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;; the entire (ItemList) query will then be:</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:items</span>/<span class=\"token keyword\">list</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">:foo</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">:item</span>/id <span class=\"token operator\">:item</span>/type <span class=\"token operator\">:foo</span>/value<span class=\"token punctuation\">]</span>\n               <span class=\"token operator\">:bar</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">:item</span>/id <span class=\"token operator\">:item</span>/type <span class=\"token operator\">:bar</span>/value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3>Recursive query</h3>\n<p>You can also specify Om Next queries that recurse into themselves. This is useful when your components can host themselves. The following example illustrates this.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token comment\">;; say we have the following app state. notice that each</span>\n<span class=\"token comment\">;; node can contain children of its type. this is where</span>\n<span class=\"token comment\">;; recursion is useful</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">def</span> state <span class=\"token punctuation\">{</span><span class=\"token operator\">:tree</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">:id</span> <span class=\"token number\">0</span> <span class=\"token operator\">:value</span> <span class=\"token number\">42</span>\n                   <span class=\"token operator\">:children</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:id</span> <span class=\"token number\">1</span> <span class=\"token operator\">:value</span> <span class=\"token number\">43</span>\n                               <span class=\"token operator\">:children</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:id</span> <span class=\"token number\">2</span> <span class=\"token operator\">:value</span> <span class=\"token number\">99</span>\n                                           <span class=\"token operator\">:children</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n                              <span class=\"token punctuation\">{</span><span class=\"token operator\">:id</span> <span class=\"token number\">3</span> <span class=\"token operator\">:value</span> <span class=\"token number\">101</span>\n                               <span class=\"token operator\">:children</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;; We would need 2 components. One which expresses a node:</span>\n<span class=\"token comment\">;; (the new thing here is the symbol '... â€” it represents</span>\n<span class=\"token comment\">;; the recursion)</span>\n<span class=\"token punctuation\">(</span>defui Node\n  static om/IQuery\n  <span class=\"token punctuation\">(</span>query <span class=\"token punctuation\">[</span>this<span class=\"token punctuation\">]</span>\n    '<span class=\"token punctuation\">[</span><span class=\"token operator\">:id</span> <span class=\"token operator\">:value</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">:children</span> <span class=\"token keyword\">..</span>.<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;; One that expresses the node tree</span>\n<span class=\"token punctuation\">(</span>defui Tree\n  static om/IQuery\n  <span class=\"token punctuation\">(</span>query <span class=\"token punctuation\">[</span>this<span class=\"token punctuation\">]</span>\n    `<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:tree</span> ~<span class=\"token punctuation\">(</span>om/get-query Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;; the entire query would be:</span>\n'<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:tree</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">:id</span> <span class=\"token operator\">:value</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">:children</span> <span class=\"token keyword\">..</span>.<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">;; we can also specify a recursion limit by specifying</span>\n<span class=\"token comment\">;; a number instead of '... .</span>\n<span class=\"token comment\">;; the query below will only allow 5-depth recursion</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:tree</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">:id</span> <span class=\"token operator\">:value</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">:children</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3>Recursive union query</h3>\n<p>Our last example is a composition of the last two. What if we have heterogeneous recursive components? That almost makes my brain hurt! Let's get into it:</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token comment\">;; heterogeneous recursive state</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">def</span> state\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">:tree</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">:id</span> <span class=\"token number\">0</span> <span class=\"token operator\">:node</span>/type <span class=\"token operator\">:node</span>/foo\n          <span class=\"token operator\">:foo</span>/value <span class=\"token number\">42</span>\n          <span class=\"token operator\">:children</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:id</span> <span class=\"token number\">1</span> <span class=\"token operator\">:node</span>/type <span class=\"token operator\">:node</span>/foo\n                      <span class=\"token operator\">:bar</span>/value <span class=\"token number\">43</span>\n                      <span class=\"token operator\">:children</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:id</span> <span class=\"token number\">2</span> <span class=\"token operator\">:node</span>/type <span class=\"token operator\">:node</span>/bar\n                                  <span class=\"token operator\">:bar</span>/value <span class=\"token number\">99</span>\n                                  <span class=\"token operator\">:children</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n                     <span class=\"token punctuation\">{</span><span class=\"token operator\">:id</span> <span class=\"token number\">3</span> <span class=\"token operator\">:node</span>/type <span class=\"token operator\">:node</span>/bar\n                                 <span class=\"token operator\">:bar</span>/value <span class=\"token number\">101</span>\n                                 <span class=\"token operator\">:children</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;; ':node/bar' nodes contain `:bar/value`</span>\n<span class=\"token punctuation\">(</span>defui BarNode\n  static om/IQuery\n  <span class=\"token punctuation\">(</span>query <span class=\"token punctuation\">[</span>this<span class=\"token punctuation\">]</span>\n    '<span class=\"token punctuation\">[</span><span class=\"token operator\">:id</span> <span class=\"token operator\">:node</span>/type <span class=\"token operator\">:bar</span>/value <span class=\"token punctuation\">{</span><span class=\"token operator\">:children</span> <span class=\"token keyword\">..</span>.<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;; ':node/foo' nodes contain `:foo/value`</span>\n<span class=\"token punctuation\">(</span>defui FooNode\n  static om/IQuery\n  <span class=\"token punctuation\">(</span>query <span class=\"token punctuation\">[</span>this<span class=\"token punctuation\">]</span>\n    '<span class=\"token punctuation\">[</span><span class=\"token operator\">:id</span> <span class=\"token operator\">:node</span>/type <span class=\"token operator\">:foo</span>/value <span class=\"token punctuation\">{</span><span class=\"token operator\">:children</span> <span class=\"token keyword\">..</span>.<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;; An ItemNode can be either FooNode or BarNode</span>\n<span class=\"token punctuation\">(</span>defui ItemNode\n  static om/Ident\n  <span class=\"token punctuation\">(</span>ident <span class=\"token punctuation\">[</span>this <span class=\"token punctuation\">{</span><span class=\"token operator\">:keys</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">node</span>/type id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span>type id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  static om/IQuery\n  <span class=\"token punctuation\">(</span>query <span class=\"token punctuation\">[</span>this<span class=\"token punctuation\">]</span>\n    `<span class=\"token punctuation\">{</span><span class=\"token operator\">:node</span>/foo ~<span class=\"token punctuation\">(</span>om/get-query FooNode<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:node</span>/bar ~<span class=\"token punctuation\">(</span>om/get-query BarNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>defui Tree\n  static om/IQuery\n  <span class=\"token punctuation\">(</span>query <span class=\"token punctuation\">[</span>this<span class=\"token punctuation\">]</span>\n    `<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:tree</span> ~<span class=\"token punctuation\">(</span>om/get-query ItemNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;; the complete query:</span>\n'<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:tree</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">:node</span>/foo <span class=\"token punctuation\">[</span><span class=\"token operator\">:id</span> <span class=\"token operator\">:node</span>/type <span class=\"token operator\">:foo</span>/value <span class=\"token punctuation\">{</span><span class=\"token operator\">:children</span> <span class=\"token keyword\">..</span>.<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n          <span class=\"token operator\">:node</span>/bar <span class=\"token punctuation\">[</span><span class=\"token operator\">:id</span> <span class=\"token operator\">:node</span>/type <span class=\"token operator\">:bar</span>/value <span class=\"token punctuation\">{</span><span class=\"token operator\">:children</span> <span class=\"token keyword\">..</span>.<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">;; again, expressing a recursion limit</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:tree</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">:node</span>/foo <span class=\"token punctuation\">[</span><span class=\"token operator\">:id</span> <span class=\"token operator\">:node</span>/type <span class=\"token operator\">:foo</span>/value <span class=\"token punctuation\">{</span><span class=\"token operator\">:children</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n         <span class=\"token operator\">:node</span>/bar <span class=\"token punctuation\">[</span><span class=\"token operator\">:id</span> <span class=\"token operator\">:node</span>/type <span class=\"token operator\">:bar</span>/value <span class=\"token punctuation\">{</span><span class=\"token operator\">:children</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h2><strong>Mutations</strong></h2>\n<p>Mutation syntax is pretty simple in the sense that there aren't so many combinations one can compose. The cases of a simple mutation and a mutation with parameters are shown below. Thanks for reading!</p>\n<h3>Simple mutation</h3>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">do</span>/something!<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">;; it would look like this in a call to `transact!`</span>\n<span class=\"token punctuation\">(</span>om/transact! <span class=\"token number\">c</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">do</span>/something!<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Parameterized mutation</h3>\n<p>Now, in order to pass parameters to a mutation, one can use the following syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">do</span>/something! <span class=\"token punctuation\">{</span><span class=\"token operator\">:some</span>/param <span class=\"token number\">42</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">;; which would look like this when calling `transact!`</span>\n<span class=\"token punctuation\">(</span>om/transact! <span class=\"token number\">c</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">do</span>/something! <span class=\"token punctuation\">{</span><span class=\"token operator\">:some</span>/param <span class=\"token number\">42</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2><strong>Everything in one place</strong></h2>\n<p>For future (and quick) reference, a single list with every example from this post follows. As a freebie, here's a reference card (<a href=\"https://cloud.githubusercontent.com/assets/661909/12114476/81a8a37e-b3aa-11e5-9c3f-2986e2eaee78.png\">light</a>, <a href=\"https://cloud.githubusercontent.com/assets/661909/12114475/81a710b8-b3aa-11e5-9ece-78bdafb9af64.png\">dark</a>) with the contents below.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token comment\">;; Reads</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">:some</span>/<span class=\"token keyword\">key</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">;; property read</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token operator\">:some</span>/<span class=\"token keyword\">key</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">:some</span>/param <span class=\"token number\">42</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">;; parameterized property read</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:some</span>/<span class=\"token keyword\">key</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">:subkey</span>/one <span class=\"token operator\">:subkey</span>/two<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">;; join</span>\n'<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:some</span>/<span class=\"token keyword\">key</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">*</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">;; join (read all subkeys)</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:some</span>/<span class=\"token keyword\">key</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">:subkey</span>/one <span class=\"token operator\">:subkey</span>/two<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">:some</span>/param <span class=\"token number\">42</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">;; parameterized join</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token operator\">:item</span>/by-id <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">;; ident reference</span>\n'<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token operator\">:active</span>/panel _<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">;; link reference</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:items</span>/<span class=\"token keyword\">list</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">:foo</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">:item</span>/id <span class=\"token operator\">:item</span>/type <span class=\"token operator\">:foo</span>/value<span class=\"token punctuation\">]</span>\n               <span class=\"token operator\">:bar</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">:item</span>/id <span class=\"token operator\">:item</span>/type <span class=\"token operator\">:bar</span>/value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">;; union query</span>\n\n'<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:tree</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">:id</span> <span class=\"token operator\">:value</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">:children</span> <span class=\"token keyword\">..</span>.<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">;; recursive query</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:tree</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">:id</span> <span class=\"token operator\">:value</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">:children</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">;; recursive query with recursion limit</span>\n\n'<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:tree</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">:node</span>/foo <span class=\"token punctuation\">[</span><span class=\"token operator\">:id</span> <span class=\"token operator\">:node</span>/type <span class=\"token operator\">:foo</span>/value <span class=\"token punctuation\">{</span><span class=\"token operator\">:children</span> <span class=\"token keyword\">..</span>.<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n          <span class=\"token operator\">:node</span>/bar <span class=\"token punctuation\">[</span><span class=\"token operator\">:id</span> <span class=\"token operator\">:node</span>/type <span class=\"token operator\">:bar</span>/value <span class=\"token punctuation\">{</span><span class=\"token operator\">:children</span> <span class=\"token keyword\">..</span>.<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">;; recursive union query</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:tree</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">:node</span>/foo <span class=\"token punctuation\">[</span><span class=\"token operator\">:id</span> <span class=\"token operator\">:node</span>/type <span class=\"token operator\">:foo</span>/value <span class=\"token punctuation\">{</span><span class=\"token operator\">:children</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n         <span class=\"token operator\">:node</span>/bar <span class=\"token punctuation\">[</span><span class=\"token operator\">:id</span> <span class=\"token operator\">:node</span>/type <span class=\"token operator\">:bar</span>/value <span class=\"token punctuation\">{</span><span class=\"token operator\">:children</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">;; recursive union query with recursion limit</span>\n\n\n<span class=\"token comment\">;; Mutations</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">do</span>/something!<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">;; simple mutation</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">do</span>/something! <span class=\"token punctuation\">{</span><span class=\"token operator\">:some</span>/param <span class=\"token number\">42</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">;; parameterized mutation</span></code></pre></div>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://github.com/omcljs/om/blob/9ea96efc0367d6b49a7aeb8eef5014fb55f3ba6e/src/main/om/next/impl/parser.cljc#L15-L22\">Official query expression grammar</a></li>\n<li><a href=\"http://docs.datomic.com/pull.html\">Datomic Pull Syntax Docs</a></li>\n<li><a href=\"https://github.com/omcljs/om/wiki\">Om Wiki</a></li>\n</ul>","fields":{"title":"Om Next Query Syntax Explained","date":"04 Jan 2016","tags":["clojure","clojurescript","om"],"slug":"/2016/01/om-next-query-syntax/","url":"https://anmonteiro.com/2016/01/om-next-query-syntax/"}},"allPosts":{"edges":[{"node":{"fields":{"title":"Reason and the Language Server Protocol: The Landscape","slug":"/2018/11/reason-and-the-language-server-protocol-the-landscape/","tags":["reason","ocaml","emacs","editors"],"date":"17 Nov 2018"}}},{"node":{"fields":{"title":"The State of ClojureScript Compilation in Lumo","slug":"/2017/09/the-state-of-clojurescript-compilation-in-lumo/","tags":["clojure","clojurescript","lumo"],"date":"19 Sep 2017"}}},{"node":{"fields":{"title":"Shipping a (very simplistic) ReasonReact app","slug":"/2017/08/shipping-a-very-simplistic-reasonreact-app/","tags":["reason","ocaml"],"date":"20 Aug 2017"}}},{"node":{"fields":{"title":"On Lumo's Growth and Sustainability","slug":"/2017/05/on-lumos-growth-and-sustainability/","tags":["clojure","clojurescript","lumo"],"date":"01 May 2017"}}},{"node":{"fields":{"title":"Requiring Node.js modules from ClojureScript namespaces","slug":"/2017/03/requiring-node-js-modules-from-clojurescript-namespaces/","tags":["clojure","clojurescript","node","nodejs"],"date":"17 Mar 2017"}}},{"node":{"fields":{"title":"Compiling ClojureScript Projects Without the JVM","slug":"/2017/02/compiling-clojurescript-projects-without-the-jvm/","tags":["clojure","clojurescript","lumo"],"date":"21 Feb 2017"}}},{"node":{"fields":{"title":"The fastest Clojure REPL in the world","slug":"/2016/11/the-fastest-clojure-repl-in-the-world/","tags":["clojure","clojurescript","lumo"],"date":"09 Nov 2016"}}},{"node":{"fields":{"title":"ClojureScript `require` outside `ns`","slug":"/2016/10/clojurescript-require-outside-ns/","tags":["clojure","clojurescript"],"date":"02 Oct 2016"}}},{"node":{"fields":{"title":"Om Next internals: Incremental Rendering","slug":"/2016/09/om-next-internals-incremental-rendering/","tags":["clojure","clojurescript","om"],"date":"29 Sep 2016"}}},{"node":{"fields":{"title":"Om Next Server-Side Rendering","slug":"/2016/09/om-next-server-side-rendering/","tags":["clojure","clojurescript","om"],"date":"15 Sep 2016"}}},{"node":{"fields":{"title":"Om Next at Full Stack Fest 2016","slug":"/2016/09/om-next-at-full-stack-fest-2016/","tags":["talks","clojure","clojurescript","om"],"date":"14 Sep 2016"}}},{"node":{"fields":{"title":"Om Next and Bootstrapped ClojureScript","slug":"/2016/08/om-next-and-bootstrapped-clojurescript/","tags":["clojure","clojurescript","om"],"date":"24 Aug 2016"}}},{"node":{"fields":{"title":"ClojureScript `require` now supports `:rename`","slug":"/2016/08/clojurescript-require-now-supports-rename/","tags":["clojure","clojurescript"],"date":"10 Aug 2016"}}},{"node":{"fields":{"title":"The quest for a unified routing solution in Om Next","slug":"/2016/06/the-quest-for-a-unified-routing-solution-in-om-next/","tags":["clojure","clojurescript","om"],"date":"12 Jun 2016"}}},{"node":{"fields":{"title":"&apos;Clients in control&apos; â€” Om Next at Craft Conference 2016","slug":"/2016/05/clients-in-control-om-next-craft-conf-2016/","tags":["talks","clojure","clojurescript","om"],"date":"14 May 2016"}}},{"node":{"fields":{"title":"Routing in Om Next â€” a Catalog of Approaches","slug":"/2016/02/routing-in-om-next-a-catalog-of-approaches/","tags":["clojure","clojurescript","om"],"date":"22 Feb 2016"}}},{"node":{"fields":{"title":"Om Next meets Devcards â€” the full reloadable experience","slug":"/2016/02/om-next-meets-devcards-the-full-reloadable-experience/","tags":["clojure","clojurescript","om"],"date":"01 Feb 2016"}}},{"node":{"fields":{"title":"Writing Om Next Reloadable Code â€” A Checklist","slug":"/2016/01/writing-om-next-reloadable-code-a-checklist/","tags":["clojure","clojurescript","om"],"date":"21 Jan 2016"}}},{"node":{"fields":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 2","slug":"/2016/01/exploration-patterns-om-next-part-2/","tags":["clojure","clojurescript","om"],"date":"09 Jan 2016"}}},{"node":{"fields":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 1","slug":"/2016/01/exploration-patterns-om-next-part-1/","tags":["clojure","clojurescript","om"],"date":"07 Jan 2016"}}},{"node":{"fields":{"title":"Om Next Query Syntax Explained","slug":"/2016/01/om-next-query-syntax/","tags":["clojure","clojurescript","om"],"date":"04 Jan 2016"}}},{"node":{"fields":{"title":"Om Next Study Material","slug":"/2015/12/om-next-study-material/","tags":["clojure","clojurescript","om"],"date":"10 Dec 2015"}}},{"node":{"fields":{"title":"clj-isitup - a simple isitup.org API client","slug":"/2015/11/clj-isitup-a-simple-isitup-org-api-client/","tags":["clojure"],"date":"17 Nov 2015"}}},{"node":{"fields":{"title":"Hosting files on the cloud via GitHub Issues","slug":"/2015/09/hosting-files-on-the-cloud-via-github-issues/","tags":["git","GitHub"],"date":"26 Sep 2015"}}},{"node":{"fields":{"title":"Solving Closure Library's Html5history double event dispatch","slug":"/2015/09/solving-closure-librarys-html5history-double-event-dispatch/","tags":["clojure","clojurescript"],"date":"11 Sep 2015"}}},{"node":{"fields":{"title":"Setting up Heroku config variables with Clojure","slug":"/2015/09/setting-up-heroku-config-variables-with-clojure/","tags":["clojure","heroku"],"date":"03 Sep 2015"}}},{"node":{"fields":{"title":"Jekyll related posts revamped","slug":"/2015/08/jekyll-related-posts-revamped/","tags":["jekyll"],"date":"29 Aug 2015"}}},{"node":{"fields":{"title":"Custom subdomains in GitHub project pages","slug":"/2015/08/custom-subdomains-in-github-project-pages/","tags":["git","GitHub"],"date":"24 Aug 2015"}}},{"node":{"fields":{"title":"Grand opening","slug":"/2015/08/grand-opening/","tags":["lifestyle"],"date":"18 Aug 2015"}}},{"node":{"fields":{"title":"On OCaml and the JS platform","slug":"/2021/12/on-ocaml-and-the-js-platform/","tags":["reason","ocaml","rescript"],"date":"12 Dec 2021"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2016/01/om-next-query-syntax/"}}