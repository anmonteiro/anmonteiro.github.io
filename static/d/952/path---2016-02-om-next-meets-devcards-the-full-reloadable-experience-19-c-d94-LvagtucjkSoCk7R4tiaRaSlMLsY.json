{"data":{"markdownRemark":{"excerpt":"\nIn a recent post, I've put together a checklist covering the steps involved in [writing reloadable Om Next code](2016/01/writing-om-next-reloadable-code-a-checklist). If you are trying to use them in your devcards, however, you might find that current [Devcards helpers for Om Next](https://github.com/bhauman/devcards/pull/85) are still lacking full support for a pleasant, out-of-the-box reloadable experience, even when sticking to every recommendation in that list. Enter [\\`devcards-om-next\\`](https://github.com/anmonteiro/devcards-om-next).\n\n","html":"<p>In a recent post, I've put together a checklist covering the steps involved in <a href=\"2016/01/writing-om-next-reloadable-code-a-checklist\">writing reloadable Om Next code</a>. If you are trying to use them in your devcards, however, you might find that current <a href=\"https://github.com/bhauman/devcards/pull/85\">Devcards helpers for Om Next</a> are still lacking full support for a pleasant, out-of-the-box reloadable experience, even when sticking to every recommendation in that list. Enter <a href=\"https://github.com/anmonteiro/devcards-om-next\">`devcards-om-next`</a>.</p>\n<!--more-->\n<h2>The state of Om Next helpers for Devcards</h2>\n<p>As mentioned in the <a href=\"2016/01/writing-om-next-reloadable-code-a-checklist\">checklist</a>, Om Next's own <code class=\"language-text\">add-root!</code> will unmount any components currently mounted on the target DOM node before actually mounting the component in question. In a reloadable scenario, this behavior is undesirable because it will result in components losing their local state. Unfortunately, the current Devcards <code class=\"language-text\">om-next-root</code> and <code class=\"language-text\">defcard-om-next</code> helpers employ this exact approach, which although simple, makes impossible to set up an actual interactive programming environment.</p>\n<h2>The full experience: <a href=\"https://github.com/anmonteiro/devcards-om-next\"><code class=\"language-text\">devcards-om-next</code></a></h2>\n<p><code class=\"language-text\">devcards-om-next</code> is a small Devcards extension that aims to replace the current helpers with ones that know the dynamics of Om Next components. By being aware of how exactly to mount and reload components, these new <code class=\"language-text\">om-next-root</code> and <code class=\"language-text\">defcard-om-next</code> helpers enable the creation of fully reloadable Om Next component cards. For now, they are in their own library, but are expected to be <a href=\"https://github.com/bhauman/devcards/pull/91#issuecomment-173391945\">integrated in Devcards</a> itself going forward. Read on for an example of how to use them in your code. Also refer to the <a href=\"https://github.com/anmonteiro/devcards-om-next/blob/master/src/devcards/devcards_om_next/devcards/core.cljs\">devcards demos</a> in the <a href=\"https://github.com/anmonteiro/devcards-om-next\">repository</a> itself for more information.</p>\n<h2>Examples / How-tos</h2>\n<ul>\n<li>Start by adding the <code class=\"language-text\">devcards-om-next</code> dependency information to your project:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token comment\">;; for Leiningen:</span>\n<span class=\"token punctuation\">[</span>devcards-om-next <span class=\"token string\">\"0.3.0\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>Require the <code class=\"language-text\">devcards-om-next</code> namespace, as well as the macros you intend to use:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">ns</span> my-ns.core\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">:require</span> <span class=\"token punctuation\">[</span>devcards-om-next.core <span class=\"token operator\">:as</span> don\n             <span class=\"token operator\">:refer-macros</span> <span class=\"token punctuation\">[</span>om-next-root defcard-om-next<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">[</span>om.<span class=\"token keyword\">next</span> <span class=\"token operator\">:as</span> om <span class=\"token operator\">:refer-macros</span> <span class=\"token punctuation\">[</span>defui<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>Write your cards in the normal reloadable manner. <code class=\"language-text\">om-next-root</code> is the simplest of the two. <code class=\"language-text\">defcard-om-next</code> is a shortcut for <code class=\"language-text\">defcard</code> plus <code class=\"language-text\">om-next-root</code>. Both take an Om Next component and a reconciler, but they can also take a state map or atom instead. Below is a small example. I encourage you to run it with <a href=\"https://github.com/bhauman/lein-figwheel\">Figwheel</a>, increment the counter, modify e.g. the button label and watch your changes being pushed to the browser as the component's local state remains unchanged <sup><sub>1</sub></sup>. Pretty cool!</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token comment\">;; use ^:once meta in `defui`</span>\n<span class=\"token punctuation\">(</span>defui ^<span class=\"token operator\">:once</span> Counter\n  Object\n  <span class=\"token punctuation\">(</span>initLocalState <span class=\"token punctuation\">[</span>this<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">:val</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span>render <span class=\"token punctuation\">[</span>this<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token operator\">:keys</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">val</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">(</span>om/get-state this<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">(</span>dom/div <span class=\"token boolean\">nil</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">str</span> <span class=\"token string\">\"val: \"</span> <span class=\"token keyword\">val</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span>dom/button\n          #js <span class=\"token punctuation\">{</span><span class=\"token operator\">:onClick</span> #<span class=\"token punctuation\">(</span>om/update-state! this update <span class=\"token operator\">:val</span> <span class=\"token keyword\">inc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token string\">\"inc!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;; defonce the reconciler</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">defonce</span> counter-reconciler\n  <span class=\"token punctuation\">(</span>om/reconciler <span class=\"token punctuation\">{</span><span class=\"token operator\">:state</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n                  <span class=\"token operator\">:parser</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">:read</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">:value</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;; the usual `defcard` calls `om-next-root`</span>\n<span class=\"token punctuation\">(</span>defcard om-next-root-example\n  \"`om-next-root` takes <span class=\"token number\">a</span> component <span class=\"token keyword\">class</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span>optionally<span class=\"token punctuation\">)</span>\n   <span class=\"token number\">a</span> <span class=\"token keyword\">map</span> with the state <span class=\"token keyword\">or</span> <span class=\"token number\">a</span> reconciler\"\n  <span class=\"token punctuation\">(</span>om-next-root Counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;; `defcard-om-next` takes every normal `defcard` argument</span>\n<span class=\"token comment\">;; (documentation, devcard, options, etc.), and the arguments of `om-next-root`</span>\n<span class=\"token punctuation\">(</span>defcard-om-next defcard-om-next-example\n  <span class=\"token string\">\"`defcard-om-next` example with a Component class and a reconciler\"</span>\n  Counter\n  counter-reconciler<span class=\"token punctuation\">)</span></code></pre></div>\n<p>I hope these new helpers are useful in your journey writing reloadable Om Next cards. Thanks for reading!</p>\n<hr>\n<p><sup><sub>1</sub></sup> keep in mind that you must still follow the recommendations in the <a href=\"2016/01/writing-om-next-reloadable-code-a-checklist\">reloadable code checklist</a> to see this in action <em>i.e.</em>, you must supply a reconciler that has been defined with <code class=\"language-text\">defonce</code> for it to work. The <code class=\"language-text\">(om-next-root Component)</code> or <code class=\"language-text\">(defcard-om-next my-card Component)</code> shortcuts don't count as reloadable (they define a reconciler under the hood everytime) and will therefore reset the component's local state.</p>","fields":{"title":"Om Next meets Devcards — the full reloadable experience","date":"01 Feb 2016","tags":["clojure","clojurescript","om"],"slug":"/2016/02/om-next-meets-devcards-the-full-reloadable-experience/","url":"https://anmonteiro.com/2016/02/om-next-meets-devcards-the-full-reloadable-experience/"}},"allPosts":{"edges":[{"node":{"fields":{"title":"On OCaml and the JS platform","slug":"/2021/12/on-ocaml-and-the-js-platform/","tags":["reason","ocaml","rescript"],"date":"11 Dec 2021"}}},{"node":{"fields":{"title":"Reason and the Language Server Protocol: The Landscape","slug":"/2018/11/reason-and-the-language-server-protocol-the-landscape/","tags":["reason","ocaml","emacs","editors"],"date":"17 Nov 2018"}}},{"node":{"fields":{"title":"The State of ClojureScript Compilation in Lumo","slug":"/2017/09/the-state-of-clojurescript-compilation-in-lumo/","tags":["clojure","clojurescript","lumo"],"date":"19 Sep 2017"}}},{"node":{"fields":{"title":"Shipping a (very simplistic) ReasonReact app","slug":"/2017/08/shipping-a-very-simplistic-reasonreact-app/","tags":["reason","ocaml"],"date":"20 Aug 2017"}}},{"node":{"fields":{"title":"On Lumo's Growth and Sustainability","slug":"/2017/05/on-lumos-growth-and-sustainability/","tags":["clojure","clojurescript","lumo"],"date":"01 May 2017"}}},{"node":{"fields":{"title":"Requiring Node.js modules from ClojureScript namespaces","slug":"/2017/03/requiring-node-js-modules-from-clojurescript-namespaces/","tags":["clojure","clojurescript","node","nodejs"],"date":"17 Mar 2017"}}},{"node":{"fields":{"title":"Compiling ClojureScript Projects Without the JVM","slug":"/2017/02/compiling-clojurescript-projects-without-the-jvm/","tags":["clojure","clojurescript","lumo"],"date":"21 Feb 2017"}}},{"node":{"fields":{"title":"The fastest Clojure REPL in the world","slug":"/2016/11/the-fastest-clojure-repl-in-the-world/","tags":["clojure","clojurescript","lumo"],"date":"09 Nov 2016"}}},{"node":{"fields":{"title":"ClojureScript `require` outside `ns`","slug":"/2016/10/clojurescript-require-outside-ns/","tags":["clojure","clojurescript"],"date":"02 Oct 2016"}}},{"node":{"fields":{"title":"Om Next internals: Incremental Rendering","slug":"/2016/09/om-next-internals-incremental-rendering/","tags":["clojure","clojurescript","om"],"date":"29 Sep 2016"}}},{"node":{"fields":{"title":"Om Next Server-Side Rendering","slug":"/2016/09/om-next-server-side-rendering/","tags":["clojure","clojurescript","om"],"date":"15 Sep 2016"}}},{"node":{"fields":{"title":"Om Next at Full Stack Fest 2016","slug":"/2016/09/om-next-at-full-stack-fest-2016/","tags":["talks","clojure","clojurescript","om"],"date":"14 Sep 2016"}}},{"node":{"fields":{"title":"Om Next and Bootstrapped ClojureScript","slug":"/2016/08/om-next-and-bootstrapped-clojurescript/","tags":["clojure","clojurescript","om"],"date":"24 Aug 2016"}}},{"node":{"fields":{"title":"ClojureScript `require` now supports `:rename`","slug":"/2016/08/clojurescript-require-now-supports-rename/","tags":["clojure","clojurescript"],"date":"10 Aug 2016"}}},{"node":{"fields":{"title":"The quest for a unified routing solution in Om Next","slug":"/2016/06/the-quest-for-a-unified-routing-solution-in-om-next/","tags":["clojure","clojurescript","om"],"date":"12 Jun 2016"}}},{"node":{"fields":{"title":"&apos;Clients in control&apos; — Om Next at Craft Conference 2016","slug":"/2016/05/clients-in-control-om-next-craft-conf-2016/","tags":["talks","clojure","clojurescript","om"],"date":"14 May 2016"}}},{"node":{"fields":{"title":"Routing in Om Next — a Catalog of Approaches","slug":"/2016/02/routing-in-om-next-a-catalog-of-approaches/","tags":["clojure","clojurescript","om"],"date":"22 Feb 2016"}}},{"node":{"fields":{"title":"Om Next meets Devcards — the full reloadable experience","slug":"/2016/02/om-next-meets-devcards-the-full-reloadable-experience/","tags":["clojure","clojurescript","om"],"date":"01 Feb 2016"}}},{"node":{"fields":{"title":"Writing Om Next Reloadable Code — A Checklist","slug":"/2016/01/writing-om-next-reloadable-code-a-checklist/","tags":["clojure","clojurescript","om"],"date":"21 Jan 2016"}}},{"node":{"fields":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 2","slug":"/2016/01/exploration-patterns-om-next-part-2/","tags":["clojure","clojurescript","om"],"date":"09 Jan 2016"}}},{"node":{"fields":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 1","slug":"/2016/01/exploration-patterns-om-next-part-1/","tags":["clojure","clojurescript","om"],"date":"07 Jan 2016"}}},{"node":{"fields":{"title":"Om Next Query Syntax Explained","slug":"/2016/01/om-next-query-syntax/","tags":["clojure","clojurescript","om"],"date":"04 Jan 2016"}}},{"node":{"fields":{"title":"Om Next Study Material","slug":"/2015/12/om-next-study-material/","tags":["clojure","clojurescript","om"],"date":"10 Dec 2015"}}},{"node":{"fields":{"title":"clj-isitup - a simple isitup.org API client","slug":"/2015/11/clj-isitup-a-simple-isitup-org-api-client/","tags":["clojure"],"date":"17 Nov 2015"}}},{"node":{"fields":{"title":"Hosting files on the cloud via GitHub Issues","slug":"/2015/09/hosting-files-on-the-cloud-via-github-issues/","tags":["git","GitHub"],"date":"26 Sep 2015"}}},{"node":{"fields":{"title":"Solving Closure Library's Html5history double event dispatch","slug":"/2015/09/solving-closure-librarys-html5history-double-event-dispatch/","tags":["clojure","clojurescript"],"date":"11 Sep 2015"}}},{"node":{"fields":{"title":"Setting up Heroku config variables with Clojure","slug":"/2015/09/setting-up-heroku-config-variables-with-clojure/","tags":["clojure","heroku"],"date":"03 Sep 2015"}}},{"node":{"fields":{"title":"Jekyll related posts revamped","slug":"/2015/08/jekyll-related-posts-revamped/","tags":["jekyll"],"date":"29 Aug 2015"}}},{"node":{"fields":{"title":"Custom subdomains in GitHub project pages","slug":"/2015/08/custom-subdomains-in-github-project-pages/","tags":["git","GitHub"],"date":"24 Aug 2015"}}},{"node":{"fields":{"title":"Grand opening","slug":"/2015/08/grand-opening/","tags":["lifestyle"],"date":"18 Aug 2015"}}},{"node":{"fields":{"title":"On OCaml and the JS platform","slug":"/2021/12/on-ocaml-and-the-js-platform/","tags":["reason","ocaml","rescript"],"date":"12 Dec 2021"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2016/02/om-next-meets-devcards-the-full-reloadable-experience/"}}