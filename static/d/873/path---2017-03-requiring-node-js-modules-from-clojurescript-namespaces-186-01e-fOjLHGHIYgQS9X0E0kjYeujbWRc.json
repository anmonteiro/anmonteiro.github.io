{"data":{"markdownRemark":{"excerpt":"\nNode.js module support has been greatly enhanced in the upcoming release of the\nClojureScript compiler. This post explains how to seamlessly require Node.js packages\nfrom any ClojureScript namespace. Read on!\n\n","html":"<p>Node.js module support has been greatly enhanced in the upcoming release of the\nClojureScript compiler. This post explains how to seamlessly require Node.js packages\nfrom any ClojureScript namespace. Read on!</p>\n<!--more-->\n<div class=\"message\">\n  <strong style=\"text-decoration:underline\">Update:</strong> This has been released\n  as part of ClojureScript version 1.9.518. ClojureScript 1.9.854 ships with even\n  <a href=\"https://clojurescript.org/news/2017-07-12-clojurescript-is-not-an-island-integrating-node-modules\">better support</a> for this feature.\n</div>\n<div style=\"margin:30px\">\n  <img style=\"max-width: 70%;margin:0 auto\" src=\"https://cloud.githubusercontent.com/assets/661909/23828334/9eedc8b0-0683-11e7-89bb-45afc0da79fd.jpg\">\n</div>\n<h2>What's new</h2>\n<p>The ClojureScript compiler added basic support for\n<a href=\"https://clojurescript.org/guides/javascript-modules#node-modules\">Node.js module resolution</a>\nin version 1.9.456. However, it didn't allow requiring those modules from ClojureScript\nnamespaces, relying instead on shim JavaScript sources that would import them. The next\nversion of the compiler fixes that problem by including\n<a href=\"https://github.com/clojure/clojurescript/wiki/Enhanced-Node.js-Modules-Support\">significant enhancements</a>\naround this behavior, effectively making it possible to seamlessly\n<a href=\"https://github.com/clojure/clojurescript/commit/777d41b9b6fe83c3d29fc51ee3ddbdfeff4f803b\">require Node.js modules</a>\nas if they were regular ClojureScript namespaces.</p>\n<h2>How we made it work</h2>\n<p>To make all this possible, a new compiler option has been introduced. When compiling\nyour projects, the ClojureScript compiler will now read the <code class=\"language-text\">:npm-deps</code> option and\ntake care of installing the specified dependencies for you. This option takes a map\nof package name to version. It goes without saying that you'll need to have both\nNode.js and NPM installed for dependencies to be installed.</p>\n<p>What's better, there are no changes necessary to downstream tooling. The NPM package\nsource files are computed and effectively become\n<a href=\"https://clojurescript.org/reference/compiler-options#foreign-libs\">foreign libraries</a>,\nwhich have long been supported.</p>\n<h2>Example</h2>\n<p>Let's look at a specific example: say we want to use the\n<a href=\"https://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/\">immensely popular</a>\n<code class=\"language-text\">left-pad</code> library in a ClojureScript project. Given the following directory structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">project\n├─ src\n│  ├─ example\n│  │   └─ core.cljs</code></pre></div>\n<p>and our <code class=\"language-text\">src/example/core.cljs</code> file,</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token comment\">;; src/example/core.cljs</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">ns</span> example.core\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">:require</span> left-pad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>enable-console-print!<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;; pad the number 42 with five zeros</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">println</span> <span class=\"token punctuation\">(</span>left-pad <span class=\"token number\">42</span> <span class=\"token number\">5</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>the following script would successfully compile this project:</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token comment\">;; build.clj</span>\n<span class=\"token punctuation\">(</span>require '<span class=\"token punctuation\">[</span>cljs.build.api <span class=\"token operator\">:as</span> <span class=\"token number\">b</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">b</span>/build <span class=\"token string\">\"src\"</span>\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">:optimizations</span> <span class=\"token operator\">:none</span>\n   <span class=\"token operator\">:main</span> <span class=\"token operator\">'example</span>.core\n   <span class=\"token operator\">:npm-deps</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">:left-pad</span> <span class=\"token string\">\"1.1.3\"</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">;; NEW</span>\n   <span class=\"token operator\">:install-deps</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">;; NEW</span>\n   <span class=\"token operator\">:output-to</span> <span class=\"token string\">\"main.js\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>It's interesting to note how <code class=\"language-text\">left-pad</code> is both a namespace and a function. This\nis due to it being the only export of the <code class=\"language-text\">left-pad</code> CommonJS module. Support for\nthis resolution is also part of a\n<a href=\"https://github.com/clojure/clojurescript/commit/1d38f73a86081ad54cb230c507fbae183d768d6b\">recent development</a>\nin the ClojureScript compiler.</p>\n<p>If a module, e.g. the widely used <code class=\"language-text\">react</code> package, exports an object, we would\nbe able to refer to functions in that object as if they were Vars in a Clojure(Script) namespace.\nHere's an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">ns</span> example.core\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">:require</span> react<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;; react/DOM.div is equivalent to (react/createElement \"div\"), and that is</span>\n<span class=\"token comment\">;; made clear in the h1 element.</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">def</span> title\n  <span class=\"token punctuation\">(</span>react/DOM.div <span class=\"token boolean\">nil</span>\n    <span class=\"token punctuation\">(</span>react/createElement <span class=\"token string\">\"h1\"</span> <span class=\"token boolean\">nil</span> <span class=\"token string\">\"Page title\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>But there's more</h2>\n<h3>Packaged ClojureScript libraries benefit too</h3>\n<p>ClojureScript libraries that\n<a href=\"https://clojurescript.org/reference/packaging-foreign-deps\">package foreign dependencies</a>\ncan also benefit from these enhancements. Ticket <a href=\"http://dev.clojure.org/jira/browse/CLJS-1973\">CLJS-1973</a>\nadds support for the <code class=\"language-text\">:npm-deps</code> option in <code class=\"language-text\">deps.cljs</code> files, allowing library\nauthors to develop and distribute libraries that directly depend on Node.js modules.</p>\n<h3>This does <strong>not</strong> obviate the need for externs</h3>\n<p>Even though the Google Closure Compiler can now consume Node.js modules, externs\nare still very much necessary. This is a consequence of the fact that the Google\nClosure Compiler doesn't support much of the dynamic programming employed in writing\nsome, if not most Node.js packages.</p>\n<p>Fortunately, the ClojureScript compiler has\nrecently introduced <a href=\"https://clojurescript.org/guides/externs\">externs inference</a>\nfunctionality, which makes it much easier to generate externs from JavaScript interop.\nAdditionally, ClojureScript will agressively index every externs file in the classpath,\nso you can still add <a href=\"http://cljsjs.github.io/\">CLJSJS packages</a> to your project\nand benefit from their externs, even though you don't require the namespaces they\nexport.</p>\n<h3>Node.js module consumption is not only for Node.js apps</h3>\n<p>Consuming Node.js modules from NPM doesn't solely benefit ClojureScript projects\nthat target Node.js. NPM is currently also the <em>de facto</em> way to consume JavaScript\npackages that target the browser. This means that ClojureScript browser-based apps\ncan also take advantage of this functionality.</p>\n<h3>Dead-code elimination on Node.js modules</h3>\n<p>To me, the greatest benefit of the new module support is dead-code elimination on\nthese (not so) foreign libraries. Previously, foreign libraries included in a ClojureScript\nproject would just get appended after Google Closure compilation. Because the Closure\nCompiler can now consume Node.js modules, we get elimination of unused code for\nfree in our optimized builds!</p>\n<h2>Final remarks</h2>\n<p>It has been really satisfying to work on enhancing the Node.js module support in\nthe ClojureScript compiler. My hope is that these developments go a long way closing\nthe gap between ClojureScript and JavaScript libraries published to NPM. More\nimportantly, I believe enhanced Node.js module support will make it much easier\nto maintain codebases that share both ClojureScript and JavaScript code, as well\nas make ClojureScript more appealing to JavaScript developers that rely on NPM\npublished packages every day.</p>\n<p>Please note that Node.js module consumption is currently in alpha status. All\nfeedback is appreciated, and if you find an issue please report in the\n<a href=\"http://dev.clojure.org/jira/browse/CLJS\">ClojureScript JIRA</a>.</p>\n<p>Tweet <a href=\"https://twitter.com/_anmonteiro\">@_anmonteiro</a> with any questions or\nsuggestions. Thanks for reading!</p>\n<hr>\n<br>\n*<small>Thanks to <a href=\"https://twitter.com/ShaunMahood\">Shaun Mahood</a>\nfor reading a draft of this post.</small>*","fields":{"title":"Requiring Node.js modules from ClojureScript namespaces","date":"17 Mar 2017","tags":["clojure","clojurescript","node","nodejs"],"slug":"/2017/03/requiring-node-js-modules-from-clojurescript-namespaces/","url":"https://anmonteiro.com/2017/03/requiring-node-js-modules-from-clojurescript-namespaces/"}},"allPosts":{"edges":[{"node":{"fields":{"title":"Reason and the Language Server Protocol: The Landscape","slug":"/2018/11/reason-and-the-language-server-protocol-the-landscape/","tags":["reason","ocaml","emacs","editors"],"date":"17 Nov 2018"}}},{"node":{"fields":{"title":"The State of ClojureScript Compilation in Lumo","slug":"/2017/09/the-state-of-clojurescript-compilation-in-lumo/","tags":["clojure","clojurescript","lumo"],"date":"19 Sep 2017"}}},{"node":{"fields":{"title":"Shipping a (very simplistic) ReasonReact app","slug":"/2017/08/shipping-a-very-simplistic-reasonreact-app/","tags":["reason","ocaml"],"date":"20 Aug 2017"}}},{"node":{"fields":{"title":"On Lumo's Growth and Sustainability","slug":"/2017/05/on-lumos-growth-and-sustainability/","tags":["clojure","clojurescript","lumo"],"date":"01 May 2017"}}},{"node":{"fields":{"title":"Requiring Node.js modules from ClojureScript namespaces","slug":"/2017/03/requiring-node-js-modules-from-clojurescript-namespaces/","tags":["clojure","clojurescript","node","nodejs"],"date":"17 Mar 2017"}}},{"node":{"fields":{"title":"Compiling ClojureScript Projects Without the JVM","slug":"/2017/02/compiling-clojurescript-projects-without-the-jvm/","tags":["clojure","clojurescript","lumo"],"date":"21 Feb 2017"}}},{"node":{"fields":{"title":"The fastest Clojure REPL in the world","slug":"/2016/11/the-fastest-clojure-repl-in-the-world/","tags":["clojure","clojurescript","lumo"],"date":"09 Nov 2016"}}},{"node":{"fields":{"title":"ClojureScript `require` outside `ns`","slug":"/2016/10/clojurescript-require-outside-ns/","tags":["clojure","clojurescript"],"date":"02 Oct 2016"}}},{"node":{"fields":{"title":"Om Next internals: Incremental Rendering","slug":"/2016/09/om-next-internals-incremental-rendering/","tags":["clojure","clojurescript","om"],"date":"29 Sep 2016"}}},{"node":{"fields":{"title":"Om Next Server-Side Rendering","slug":"/2016/09/om-next-server-side-rendering/","tags":["clojure","clojurescript","om"],"date":"15 Sep 2016"}}},{"node":{"fields":{"title":"Om Next at Full Stack Fest 2016","slug":"/2016/09/om-next-at-full-stack-fest-2016/","tags":["talks","clojure","clojurescript","om"],"date":"14 Sep 2016"}}},{"node":{"fields":{"title":"Om Next and Bootstrapped ClojureScript","slug":"/2016/08/om-next-and-bootstrapped-clojurescript/","tags":["clojure","clojurescript","om"],"date":"24 Aug 2016"}}},{"node":{"fields":{"title":"ClojureScript `require` now supports `:rename`","slug":"/2016/08/clojurescript-require-now-supports-rename/","tags":["clojure","clojurescript"],"date":"10 Aug 2016"}}},{"node":{"fields":{"title":"The quest for a unified routing solution in Om Next","slug":"/2016/06/the-quest-for-a-unified-routing-solution-in-om-next/","tags":["clojure","clojurescript","om"],"date":"12 Jun 2016"}}},{"node":{"fields":{"title":"&apos;Clients in control&apos; — Om Next at Craft Conference 2016","slug":"/2016/05/clients-in-control-om-next-craft-conf-2016/","tags":["talks","clojure","clojurescript","om"],"date":"14 May 2016"}}},{"node":{"fields":{"title":"Routing in Om Next — a Catalog of Approaches","slug":"/2016/02/routing-in-om-next-a-catalog-of-approaches/","tags":["clojure","clojurescript","om"],"date":"22 Feb 2016"}}},{"node":{"fields":{"title":"Om Next meets Devcards — the full reloadable experience","slug":"/2016/02/om-next-meets-devcards-the-full-reloadable-experience/","tags":["clojure","clojurescript","om"],"date":"01 Feb 2016"}}},{"node":{"fields":{"title":"Writing Om Next Reloadable Code — A Checklist","slug":"/2016/01/writing-om-next-reloadable-code-a-checklist/","tags":["clojure","clojurescript","om"],"date":"21 Jan 2016"}}},{"node":{"fields":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 2","slug":"/2016/01/exploration-patterns-om-next-part-2/","tags":["clojure","clojurescript","om"],"date":"09 Jan 2016"}}},{"node":{"fields":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 1","slug":"/2016/01/exploration-patterns-om-next-part-1/","tags":["clojure","clojurescript","om"],"date":"07 Jan 2016"}}},{"node":{"fields":{"title":"Om Next Query Syntax Explained","slug":"/2016/01/om-next-query-syntax/","tags":["clojure","clojurescript","om"],"date":"04 Jan 2016"}}},{"node":{"fields":{"title":"Om Next Study Material","slug":"/2015/12/om-next-study-material/","tags":["clojure","clojurescript","om"],"date":"10 Dec 2015"}}},{"node":{"fields":{"title":"clj-isitup - a simple isitup.org API client","slug":"/2015/11/clj-isitup-a-simple-isitup-org-api-client/","tags":["clojure"],"date":"17 Nov 2015"}}},{"node":{"fields":{"title":"Hosting files on the cloud via GitHub Issues","slug":"/2015/09/hosting-files-on-the-cloud-via-github-issues/","tags":["git","GitHub"],"date":"26 Sep 2015"}}},{"node":{"fields":{"title":"Solving Closure Library's Html5history double event dispatch","slug":"/2015/09/solving-closure-librarys-html5history-double-event-dispatch/","tags":["clojure","clojurescript"],"date":"11 Sep 2015"}}},{"node":{"fields":{"title":"Setting up Heroku config variables with Clojure","slug":"/2015/09/setting-up-heroku-config-variables-with-clojure/","tags":["clojure","heroku"],"date":"03 Sep 2015"}}},{"node":{"fields":{"title":"Jekyll related posts revamped","slug":"/2015/08/jekyll-related-posts-revamped/","tags":["jekyll"],"date":"29 Aug 2015"}}},{"node":{"fields":{"title":"Custom subdomains in GitHub project pages","slug":"/2015/08/custom-subdomains-in-github-project-pages/","tags":["git","GitHub"],"date":"24 Aug 2015"}}},{"node":{"fields":{"title":"Grand opening","slug":"/2015/08/grand-opening/","tags":["lifestyle"],"date":"18 Aug 2015"}}},{"node":{"fields":{"title":"On OCaml and the JS platform","slug":"/2021/12/on-ocaml-and-the-js-platform/","tags":["reason","ocaml","rescript"],"date":"11 Dec 2021"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2017/03/requiring-node-js-modules-from-clojurescript-namespaces/"}}