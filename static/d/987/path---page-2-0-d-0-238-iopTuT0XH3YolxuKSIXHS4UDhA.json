{"data":{"allMarkdownRemark":{"totalCount":32,"edges":[{"node":{"frontmatter":{"title":"Requiring Node.js modules from ClojureScript namespaces"},"fields":{"title":"Requiring Node.js modules from ClojureScript namespaces","date":"17 Mar 2017","slug":"/2017/03/requiring-node-js-modules-from-clojurescript-namespaces/"},"excerpt":"<p>Node.js module support has been greatly enhanced in the upcoming release of the\nClojureScript compiler. This post explains how to seamlessly require Node.js packages\nfrom any ClojureScript namespace. Read on!</p>\n"}},{"node":{"frontmatter":{"title":"Compiling ClojureScript Projects Without the JVM"},"fields":{"title":"Compiling ClojureScript Projects Without the JVM","date":"21 Feb 2017","slug":"/2017/02/compiling-clojurescript-projects-without-the-jvm/"},"excerpt":"<p>I have dreamed about being able to compile a ClojureScript project without installing\nJava ever since coming to know that <a href=\"http://swannodette.github.io/2015/07/29/clojurescript-17\">ClojureScript can compile itself</a>.\nWhile projects like <a href=\"https://github.com/mfikes/planck\">Planck</a> and\n<a href=\"2016/11/the-fastest-clojure-repl-in-the-world\">Lumo</a> can either\nrun arbitrary ClojureScript forms at the REPL or run ClojureScript scripts, none have\nactually supported flat out compiling an entire ClojureScript project. Until now.</p>\n"}},{"node":{"frontmatter":{"title":"The fastest Clojure REPL in the world"},"fields":{"title":"The fastest Clojure REPL in the world","date":"09 Nov 2016","slug":"/2016/11/the-fastest-clojure-repl-in-the-world/"},"excerpt":"<p>One common complaint of Clojure REPLs is their <a href=\"http://puredanger.github.io/tech.puredanger.com/2013/12/01/clj-problems/\">startup time</a>.\nAlthough that complaint is often somewhat unfounded (and related to tooling), it\nstill takes the bare Clojure JAR about 1 second to start on new hardware. <a href=\"http://planck-repl.org\">Planck</a>\n— through bootstrapped ClojureScript, and owing to the small latency exhibited by\nJavaScript VMs — managed to improve the time that it takes to bootstrap a Clojure(Script)\nREPL. A new kid on the block promises to perform even faster. Read on!</p>\n"}},{"node":{"frontmatter":{"title":"ClojureScript `require` outside `ns`"},"fields":{"title":"ClojureScript `require` outside `ns`","date":"02 Oct 2016","slug":"/2016/10/clojurescript-require-outside-ns/"},"excerpt":"<p>The next version of the ClojureScript compiler adds support for using <code class=\"language-text\">require</code>\noutside of the <code class=\"language-text\">ns</code> form. Owing to ClojureScript's compilation model, however, there\nexist subtle differences with respect to the behavior that Clojure provides. Read\non to learn more.</p>\n"}},{"node":{"frontmatter":{"title":"Om Next internals: Incremental Rendering"},"fields":{"title":"Om Next internals: Incremental Rendering","date":"29 Sep 2016","slug":"/2016/09/om-next-internals-incremental-rendering/"},"excerpt":"<p>The phrase \"incremental rendering\" is frequently thrown around in the context of\nOm Next's design. This post is an attempt to clarify what the concept of incremental rendering is\nall about, what it does for your Om Next applications and how you can take advantage\nof its properties.</p>\n"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"limit":5,"skip":5,"index":2,"first":false,"last":false}}