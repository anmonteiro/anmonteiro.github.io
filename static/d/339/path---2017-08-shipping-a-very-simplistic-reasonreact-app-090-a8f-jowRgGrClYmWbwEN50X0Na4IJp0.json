{"data":{"markdownRemark":{"excerpt":"\n_I used [Reason](https://reasonml.github.io/) and [React](https://reasonml.github.io/reason-react/)\nto build a simple example app: [ReKeys](https://anmonteiro.com/rekeys/). Here's\nwhat I learned._\n\n","html":"<p><em>I used <a href=\"https://reasonml.github.io/\">Reason</a> and <a href=\"https://reasonml.github.io/reason-react/\">React</a>\nto build a simple example app: <a href=\"https://anmonteiro.com/rekeys/\">ReKeys</a>. Here's\nwhat I learned.</em></p>\n<!--more-->\n<div style=\"margin:20px 0 25px\">\n  <img style=\"margin:0 auto;width: 60%\" src=\"https://user-images.githubusercontent.com/661909/29498875-552e41b8-85b9-11e7-857a-6740824fc13c.png\">\n</div>\n<p>I've been enamored with <a href=\"https://en.wikipedia.org/wiki/ML_(programming_language)\">ML family</a>\nof programming languages for a while. However, and aside from the occasional Kata,\nI had never really <em>shipped</em> anything using an ML language.</p>\n<p>Given the recent activity in the Ocaml community, however – mostly due to the\ncommunication efforts behind <a href=\"https://github.com/facebook/reason\">Facebook's Reason</a> –\nI felt compelled to give it another try (after a very short incursion during my undergrad),\nand I was in for a treat!</p>\n<h1>Getting Started &#x26; Reading Material</h1>\n<p>I went through Reason's <a href=\"https://reasonml.github.io/guide/javascript/quickstart\">initial setup</a>\nright around the time <a href=\"https://twitter.com/jaredforsyth\">Jared Forsyth</a> published\na very detailed <a href=\"https://jaredforsyth.com/2017/07/05/a-reason-react-tutorial/\">tutorial</a>\nabout getting started with <a href=\"https://reasonml.github.io/reason-react/\">ReasonReact</a>\nand compiling Reason for the browser using <a href=\"https://bucklescript.github.io/bucklescript\">BuckleScript</a>.</p>\n<p>Despite its young age, BuckleScript is an incredible piece of technology that\nwill (<em>instantly</em>, if I may add) compile Ocaml code (with built-in) support for\nReason, to JavaScript. The <a href=\"https://bucklescript.github.io/bucklescript/Manual.html\">BuckleScript manual</a>,\nthough somewhat terse in the beginning, is an amazing reference to working with\nthe compiler and has become a pinned tab on my browser right after I started this\njourney.</p>\n<h1>Next steps &#x26; Troubleshooting</h1>\n<p>But after the initial setup I was on my own, and I had to start somewhere.\n<a href=\"https://github.com/reasonml-community/reason-scripts\"><code class=\"language-text\">reason-scripts</code></a>,\na custom template for <a href=\"https://github.com/facebookincubator/create-react-app/\"><code class=\"language-text\">create-react-app</code></a>,\nturned out to be a great way to bootstrap my project without the hassle of\nwriting boilerplate code, setting up tooling and spending hours figuring out\nthe tiniest of mistakes.</p>\n<p>As any beginner going through the hurdles of unfamiliar paradigms, it wasn't\nlong until I hit some difficulties. What follows is an attempt to document the\npitfalls that trapped me at first, which I hope will be useful for others trying\nto figure out rookie mistakes as they get started with Reason(React).</p>\n<h2>The dreadful <code class=\"language-text\">type variable cannot be generalized</code></h2>\n<p>In his tutorial, Jared describes making a\n<a href=\"https://jaredforsyth.com/2017/07/05/a-reason-react-tutorial/#13-making-a-stateful-component\">stateful component</a>,\nbut when I attempted to migrate my stateless component to a stateful one, I was\nimmediately greeted by the following, somewhat cryptic, error message:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Module build failed<span class=\"token punctuation\">:</span> Error<span class=\"token punctuation\">:</span> File <span class=\"token string\">\"/path/to/src/app.re\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> characters <span class=\"token number\">16</span><span class=\"token operator\">-</span><span class=\"token number\">51</span><span class=\"token punctuation\">:</span>\nError<span class=\"token punctuation\">:</span> The <span class=\"token keyword\">type</span> <span class=\"token keyword\">of</span> this expression<span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">(</span><span class=\"token type variable\">'_a</span><span class=\"token punctuation\">,</span> ReasonReact<span class=\"token punctuation\">.</span>stateless<span class=\"token punctuation\">,</span> ReasonReact<span class=\"token punctuation\">.</span>noRetainedProps<span class=\"token punctuation\">,</span>\n        ReasonReact<span class=\"token punctuation\">.</span>noRetainedProps<span class=\"token punctuation\">)</span>\n       ReasonReact<span class=\"token punctuation\">.</span>componentSpec<span class=\"token punctuation\">,</span>\n       contains <span class=\"token keyword\">type</span> variables that cannot be generalized</code></pre></div>\n<p>The solution was simply to use state somewhere in any function of my component. Even\njust destructuring state from the <em>e.g.</em> the single argument to <code class=\"language-text\">render</code> solves\nthe problem.</p>\n<p>Now the reason why this happens is quite interesting: if you look at the\n<a href=\"https://github.com/reasonml/reason-react/blob/8aa30ae63cc3bf7bef7bfc373c3a09a671dca267/src/reasonReact.re#L592\">type of <code class=\"language-text\">ReasonReact.statefulComponent</code></a>,\nthere's one type variable <code class=\"language-text\">&#39;state</code>. That's the variable that the error is referring to:\nwhen <code class=\"language-text\">state</code> is not used <em>within</em> the component definition, the compiler can't\ninfer what we want its type to be. If used explicitly, then we're literally telling\nwhat that type variable should be.</p>\n<p>An interesting note here is that <code class=\"language-text\">ReasonReact.statelessComponent</code> doesn't have\nthis problem. If we look at its <a href=\"https://github.com/reasonml/reason-react/blob/8aa30ae63cc3bf7bef7bfc373c3a09a671dca267/src/reasonReact.re#L590\">type definition</a>,\nit's almost immediately obvious why: there are no type variables in sight. The\ncompiler <em>always</em> knows that it will take a <code class=\"language-text\">stateless</code> argument (which is\ndefined above in the file as being the <code class=\"language-text\">unit</code> type).</p>\n<p>The team behind ReasonReact is well aware of this error and some other edge\ncases in the library, and actively working to fix them in the near future. For\nmore information, there's a section about this pitfall in the\n<a href=\"http://caml.inria.fr/resources/doc/faq/core.en.html#weak-type-variables\">Ocaml FAQ</a>.</p>\n<h2>Modules &#x26; Capitalization</h2>\n<p>Ocaml has a very interesting <a href=\"https://caml.inria.fr/pub/docs/manual-ocaml/moduleexamples.html\">module system</a>.\nIn short, modules are used to group together related definitions, and can be\narbitrarily nested. Interestingly enough, files too become modules, and one of\nmy earliest mistakes was related to their capitalization when <code class=\"language-text\">open</code>ing a module\nfrom a different file.</p>\n<p>As part of ReKeys, I define a file called <a href=\"https://github.com/anmonteiro/rekeys/blob/master/src/dom_utils.re\"><code class=\"language-text\">dom_utils.re</code></a>\nfor grouping certain definitions related to interaction with the DOM and events.\nWhen trying to open this file for consumption in <a href=\"https://github.com/anmonteiro/rekeys/blob/9430b66f362989bbdfa6adc037485790b5ae1543/src/app.re#L1\">another file</a>,\nI couldn't get it to work.</p>\n<p>The reason is that the module provided by a file is recognized by the compiler\nwith the first letter (and only the first letter) capitalized. So <code class=\"language-text\">domUtils.re</code>\nbecomes <code class=\"language-text\">DomUtils</code>, but <code class=\"language-text\">dom_utils.re</code> becomes <code class=\"language-text\">Dom_utils</code> and I was trying to\nopen <code class=\"language-text\">Dom_Utils</code>. This is one of those mistakes that I'll never make again, but\nit was a head scratcher for a while there!</p>\n<h2>Inline type signatures</h2>\n<p>Having tried other languages in the ML family such as Haskell, Elm or PureScript,\nI struggled initially with how to annotate the types of my definitions. In\nHaskell, for example, types can be annotated above a function's implementation,\nlike below:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">foo</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">foo</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>\n<p>In Ocaml/Reason, however, annotating the <code class=\"language-text\">foo</code> function would either be done\ninline, or in a <code class=\"language-text\">.rei</code> <a href=\"https://reasonml.github.io/guide/language/module#signatures\">interface file</a>.\nExample:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">/* my_file.rei */</span>\n<span class=\"token keyword\">let</span> foo<span class=\"token punctuation\">:</span> int <span class=\"token operator\">=></span> int<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* inline, in a my_file.re file */</span>\n<span class=\"token keyword\">let</span> foo<span class=\"token punctuation\">:</span> int <span class=\"token operator\">=></span> int <span class=\"token operator\">=</span> fun x <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>Parting thoughts</h1>\n<p>Overall, my experience with Reason has been incredibly smooth. For a change, I\nlove how the compiler acts as someone constantly looking over my shoulder telling\nme the amazing ways in which I can mess up what I'm doing.</p>\n<p>The Reason community on <a href=\"https://discord.gg/reasonml\">Discord</a> is ultra helpful\nand has been very patient with my constant newbie questions about anything Ocaml / Reason.</p>\n<p>I'm excited to keep tinkering with Reason and eventually build something more serious.\nIn the meantime, I highly suggest you give it a try.</p>\n<p>The code for ReKeys is free and open-source on <a href=\"https://github.com/anmonteiro/rekeys\">GitHub</a>.\nPlease tweet <a href=\"https://twitter.com/_anmonteiro\">@_anmonteiro</a> with any questions/feedback\nabout the ReKeys code and/or this blog post!</p>\n<p>Happy hacking!</p>","fields":{"title":"Shipping a (very simplistic) ReasonReact app","date":"20 Aug 2017","tags":["reason","ocaml"],"slug":"/2017/08/shipping-a-very-simplistic-reasonreact-app/","url":"https://anmonteiro.com/2017/08/shipping-a-very-simplistic-reasonreact-app/"}},"allPosts":{"edges":[{"node":{"fields":{"title":"On OCaml and the JS platform","slug":"/2021/12/on-ocaml-and-the-js-platform/","tags":["reason","ocaml","rescript"],"date":"11 Dec 2021"}}},{"node":{"fields":{"title":"Reason and the Language Server Protocol: The Landscape","slug":"/2018/11/reason-and-the-language-server-protocol-the-landscape/","tags":["reason","ocaml","emacs","editors"],"date":"17 Nov 2018"}}},{"node":{"fields":{"title":"The State of ClojureScript Compilation in Lumo","slug":"/2017/09/the-state-of-clojurescript-compilation-in-lumo/","tags":["clojure","clojurescript","lumo"],"date":"19 Sep 2017"}}},{"node":{"fields":{"title":"Shipping a (very simplistic) ReasonReact app","slug":"/2017/08/shipping-a-very-simplistic-reasonreact-app/","tags":["reason","ocaml"],"date":"20 Aug 2017"}}},{"node":{"fields":{"title":"On Lumo's Growth and Sustainability","slug":"/2017/05/on-lumos-growth-and-sustainability/","tags":["clojure","clojurescript","lumo"],"date":"01 May 2017"}}},{"node":{"fields":{"title":"Requiring Node.js modules from ClojureScript namespaces","slug":"/2017/03/requiring-node-js-modules-from-clojurescript-namespaces/","tags":["clojure","clojurescript","node","nodejs"],"date":"17 Mar 2017"}}},{"node":{"fields":{"title":"Compiling ClojureScript Projects Without the JVM","slug":"/2017/02/compiling-clojurescript-projects-without-the-jvm/","tags":["clojure","clojurescript","lumo"],"date":"21 Feb 2017"}}},{"node":{"fields":{"title":"The fastest Clojure REPL in the world","slug":"/2016/11/the-fastest-clojure-repl-in-the-world/","tags":["clojure","clojurescript","lumo"],"date":"09 Nov 2016"}}},{"node":{"fields":{"title":"ClojureScript `require` outside `ns`","slug":"/2016/10/clojurescript-require-outside-ns/","tags":["clojure","clojurescript"],"date":"02 Oct 2016"}}},{"node":{"fields":{"title":"Om Next internals: Incremental Rendering","slug":"/2016/09/om-next-internals-incremental-rendering/","tags":["clojure","clojurescript","om"],"date":"29 Sep 2016"}}},{"node":{"fields":{"title":"Om Next Server-Side Rendering","slug":"/2016/09/om-next-server-side-rendering/","tags":["clojure","clojurescript","om"],"date":"15 Sep 2016"}}},{"node":{"fields":{"title":"Om Next at Full Stack Fest 2016","slug":"/2016/09/om-next-at-full-stack-fest-2016/","tags":["talks","clojure","clojurescript","om"],"date":"14 Sep 2016"}}},{"node":{"fields":{"title":"Om Next and Bootstrapped ClojureScript","slug":"/2016/08/om-next-and-bootstrapped-clojurescript/","tags":["clojure","clojurescript","om"],"date":"24 Aug 2016"}}},{"node":{"fields":{"title":"ClojureScript `require` now supports `:rename`","slug":"/2016/08/clojurescript-require-now-supports-rename/","tags":["clojure","clojurescript"],"date":"10 Aug 2016"}}},{"node":{"fields":{"title":"The quest for a unified routing solution in Om Next","slug":"/2016/06/the-quest-for-a-unified-routing-solution-in-om-next/","tags":["clojure","clojurescript","om"],"date":"12 Jun 2016"}}},{"node":{"fields":{"title":"&apos;Clients in control&apos; — Om Next at Craft Conference 2016","slug":"/2016/05/clients-in-control-om-next-craft-conf-2016/","tags":["talks","clojure","clojurescript","om"],"date":"14 May 2016"}}},{"node":{"fields":{"title":"Routing in Om Next — a Catalog of Approaches","slug":"/2016/02/routing-in-om-next-a-catalog-of-approaches/","tags":["clojure","clojurescript","om"],"date":"22 Feb 2016"}}},{"node":{"fields":{"title":"Om Next meets Devcards — the full reloadable experience","slug":"/2016/02/om-next-meets-devcards-the-full-reloadable-experience/","tags":["clojure","clojurescript","om"],"date":"01 Feb 2016"}}},{"node":{"fields":{"title":"Writing Om Next Reloadable Code — A Checklist","slug":"/2016/01/writing-om-next-reloadable-code-a-checklist/","tags":["clojure","clojurescript","om"],"date":"21 Jan 2016"}}},{"node":{"fields":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 2","slug":"/2016/01/exploration-patterns-om-next-part-2/","tags":["clojure","clojurescript","om"],"date":"09 Jan 2016"}}},{"node":{"fields":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 1","slug":"/2016/01/exploration-patterns-om-next-part-1/","tags":["clojure","clojurescript","om"],"date":"07 Jan 2016"}}},{"node":{"fields":{"title":"Om Next Query Syntax Explained","slug":"/2016/01/om-next-query-syntax/","tags":["clojure","clojurescript","om"],"date":"04 Jan 2016"}}},{"node":{"fields":{"title":"Om Next Study Material","slug":"/2015/12/om-next-study-material/","tags":["clojure","clojurescript","om"],"date":"10 Dec 2015"}}},{"node":{"fields":{"title":"clj-isitup - a simple isitup.org API client","slug":"/2015/11/clj-isitup-a-simple-isitup-org-api-client/","tags":["clojure"],"date":"17 Nov 2015"}}},{"node":{"fields":{"title":"Hosting files on the cloud via GitHub Issues","slug":"/2015/09/hosting-files-on-the-cloud-via-github-issues/","tags":["git","GitHub"],"date":"26 Sep 2015"}}},{"node":{"fields":{"title":"Solving Closure Library's Html5history double event dispatch","slug":"/2015/09/solving-closure-librarys-html5history-double-event-dispatch/","tags":["clojure","clojurescript"],"date":"11 Sep 2015"}}},{"node":{"fields":{"title":"Setting up Heroku config variables with Clojure","slug":"/2015/09/setting-up-heroku-config-variables-with-clojure/","tags":["clojure","heroku"],"date":"03 Sep 2015"}}},{"node":{"fields":{"title":"Jekyll related posts revamped","slug":"/2015/08/jekyll-related-posts-revamped/","tags":["jekyll"],"date":"29 Aug 2015"}}},{"node":{"fields":{"title":"Custom subdomains in GitHub project pages","slug":"/2015/08/custom-subdomains-in-github-project-pages/","tags":["git","GitHub"],"date":"24 Aug 2015"}}},{"node":{"fields":{"title":"Grand opening","slug":"/2015/08/grand-opening/","tags":["lifestyle"],"date":"18 Aug 2015"}}},{"node":{"fields":{"title":"On OCaml and the JS platform","slug":"/2021/12/on-ocaml-and-the-js-platform/","tags":["reason","ocaml","rescript"],"date":"12 Dec 2021"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2017/08/shipping-a-very-simplistic-reasonreact-app/"}}