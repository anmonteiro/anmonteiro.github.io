{"data":{"markdownRemark":{"excerpt":"\nI have dreamed about being able to compile a ClojureScript project without installing\nJava ever since coming to know that [ClojureScript can compile itself](http://swannodette.github.io/2015/07/29/clojurescript-17).\nWhile projects like [Planck](https://github.com/mfikes/planck) and\n[Lumo](2016/11/the-fastest-clojure-repl-in-the-world) can either\nrun arbitrary ClojureScript forms at the REPL or run ClojureScript scripts, none have\nactually supported flat out compiling an entire ClojureScript project. Until now.\n\n","html":"<p>I have dreamed about being able to compile a ClojureScript project without installing\nJava ever since coming to know that <a href=\"http://swannodette.github.io/2015/07/29/clojurescript-17\">ClojureScript can compile itself</a>.\nWhile projects like <a href=\"https://github.com/mfikes/planck\">Planck</a> and\n<a href=\"2016/11/the-fastest-clojure-repl-in-the-world\">Lumo</a> can either\nrun arbitrary ClojureScript forms at the REPL or run ClojureScript scripts, none have\nactually supported flat out compiling an entire ClojureScript project. Until now.</p>\n<!--more-->\n<div style=\"margin:-20px auto\">\n  <img style=\"margin:0\" src=\"https://cloud.githubusercontent.com/assets/661909/23149340/1bb1c70e-f7a0-11e6-9a5c-f598cd73e722.png\">\n</div>\n<h2>Wait... what?!</h2>\n<p>That's right. Starting with version 1.2.0, <a href=\"https://github.com/anmonteiro/lumo\">Lumo</a>\ncan compile ClojureScript projects, just like the regular JVM-based ClojureScript\ncompiler. And you know what? Thanks to\n<code><a href=\"https://github.com/google/closure-compiler-js\">google-closure-compiler-js</a></code>,\nthe generated JavaScript can be <span style=\"text-decoration:underline\">optimized</span>\nand benefit from dead-code elimination too! This is a huge step forward in being\nable to compile ClojureScript source code ahead of time into optimized JavaScript\nbundles using nothing but Lumo and Node.js.</p>\n<p>Making this work meant porting the JVM-based code in the ClojureScript compiler to\nwork under Lumo and the Node.js platform. While most of it has been generally straightforward,\nchanging the synchronous JVM build API to the self-hosted ClojureScript asynchronous\nAPI has represented the most amount of work so far.</p>\n<p>Compiling ClojureScript projects with Lumo requires no external dependencies (such\nas the Google Closure Library) apart from those required by the projects themselves,\nas all the necessary compiler dependencies are bundled within the single Lumo executable.</p>\n<p>Go ahead and <a href=\"https://github.com/anmonteiro/lumo#installation\">install</a> the latest\nLumo release to try this feature out. Make sure you get the <a href=\"https://github.com/anmonteiro/lumo/releases/tag/1.2.0\"><code class=\"language-text\">1.2.0</code></a>\nrelease <sup id=\"fnref:1\"><sub><a href=\"#fn:1\">1</a></sub></sup>.</p>\n<h2>Example</h2>\n<p>Take for example this <a href=\"https://clojurescript.org/guides/quick-start#running-clojurescript-on-node.js\">small section</a>\nof the ClojureScript Quick Start guide. By simply changing <code class=\"language-text\">cljs.build.api</code> to\n<code class=\"language-text\">lumo.build.api</code>, we can start compiling the Quick Start guide sample project without\nthe JVM, today. Also, let's use advanced optimizations right away so we can see the\nJavaScript version of the Google Closure Compiler in action. This is what our <code class=\"language-text\">build.cljs</code>\nfile will look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span>require '<span class=\"token punctuation\">[</span>lumo.build.api <span class=\"token operator\">:as</span> <span class=\"token number\">b</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">b</span>/build <span class=\"token string\">\"src\"</span>\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">:main</span> <span class=\"token operator\">'hello-world</span>.core\n   <span class=\"token operator\">:output-to</span> <span class=\"token string\">\"main.js\"</span>\n   <span class=\"token operator\">:optimizations</span> <span class=\"token operator\">:advanced</span>\n   <span class=\"token operator\">:target</span> <span class=\"token operator\">:nodejs</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Let's now run the compilation script with Lumo. Don't forget to add the <code class=\"language-text\">src</code> folder\nto the classpath so that Lumo knows where to find the project. This can be done with\nthe <code class=\"language-text\">-c</code>/<code class=\"language-text\">--classpath</code> command line option (hint: run <code class=\"language-text\">lumo -h</code> for all the\navailable options).</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ lumo --classpath src build.cljs</code></pre></div>\n<p>After waiting a few moments, we should be able to run our newly compiled project\nwith <code class=\"language-text\">node main.js</code>. How cool is that?!</p>\n<h2>Caveats</h2>\n<p>This new feature isn't short of tradeoffs. The most obvious, and also the harder to\nsolve in the short term are described below.</p>\n<h4><strong>ClojureScript version lock-in</strong></h4>\n<p>Lumo ships with its own version of the ClojureScript compiler. This means that, for\nnow, it is not possible to compile ClojureScript projects against versions of\nClojureScript different than the one that is bundled within Lumo. While this caveat\nmay be possible to circumvent in the future, it is what allows us to not require any\nexternal dependencies when compiling ClojureScript projects with Lumo.</p>\n<h4><strong>Google Closure Compiler JS</strong></h4>\n<p>The Google Closure Compiler JS is a JavaScript port of the Java version, generated\nusing GWT. That makes it <a href=\"https://github.com/google/closure-compiler-js/issues/24\">take longer</a>\nto optimize code when compared to the Java version. Furthermore, it also ships with\nfewer features than its Java counterpart, both because not every feature included in\nthe Java version is portable to JavaScript, and also because it is a fairly new\nproject, only <a href=\"https://developers.googleblog.com/2016/08/closure-compiler-in-javascript.html\">announced</a>\nin late August 2016.</p>\n<h2>Conclusion</h2>\n<p>This Lumo release represents a lot. To my knowledge, there exists no other effort\nto compile and optimize ClojureScript projects with the Google Closure Compiler without\nrequiring a JVM installation. But we have only began to scratch the surface, and\nthere's an equally large amount of work that remains to be done in order to achieve\nfeature parity with the current ClojureScript compiler on the JVM.</p>\n<p>This feature of Lumo should be considered pre-alpha, and we will continue to improve\nit over the coming releases. I decided to release it nevertheless, with the objective\nof gathering initial feedback and hopefully attracting a few new contributors to\nLumo. Please report <a href=\"https://github.com/anmonteiro/lumo/issues\">issues</a>, and\nif you want to help, do get in touch (e.g. on <a href=\"https://twitter.com/_anmonteiro\">Twitter</a>)!</p>\n<p>As a final remark, no JVMs were spawned during the process of writing this blog post.</p>\n<hr>\n<div id=\"fn:1\">\n  <sup><sub>1</sub></sup> <sub>Lumo 1.2.0 is still not in Homebrew due to technical\nissues. You can install from master with <code>brew install --HEAD lumo</code>.\n  <a href=\"#fnref:1\"><img draggable=\"false\" class=\"emoji\" alt=\"&#x21A9;\" src=\"/public/img/top.svg\"></a></sub>\n</div>\n<br>\n*<small>Thanks to <a href=\"https://twitter.com/mfikes\">Mike Fikes</a> and\n<a href=\"https://twitter.com/swannodette\">David Nolen</a>\nfor reading a draft of this post.</small>*","fields":{"title":"Compiling ClojureScript Projects Without the JVM","date":"21 Feb 2017","tags":["clojure","clojurescript","lumo"],"slug":"/2017/02/compiling-clojurescript-projects-without-the-jvm/","url":"https://anmonteiro.com/2017/02/compiling-clojurescript-projects-without-the-jvm/"}},"allPosts":{"edges":[{"node":{"fields":{"title":"Reason and the Language Server Protocol: The Landscape","slug":"/2018/11/reason-and-the-language-server-protocol-the-landscape/","tags":["reason","ocaml","emacs","editors"],"date":"17 Nov 2018"}}},{"node":{"fields":{"title":"The State of ClojureScript Compilation in Lumo","slug":"/2017/09/the-state-of-clojurescript-compilation-in-lumo/","tags":["clojure","clojurescript","lumo"],"date":"19 Sep 2017"}}},{"node":{"fields":{"title":"Shipping a (very simplistic) ReasonReact app","slug":"/2017/08/shipping-a-very-simplistic-reasonreact-app/","tags":["reason","ocaml"],"date":"20 Aug 2017"}}},{"node":{"fields":{"title":"On Lumo's Growth and Sustainability","slug":"/2017/05/on-lumos-growth-and-sustainability/","tags":["clojure","clojurescript","lumo"],"date":"01 May 2017"}}},{"node":{"fields":{"title":"Requiring Node.js modules from ClojureScript namespaces","slug":"/2017/03/requiring-node-js-modules-from-clojurescript-namespaces/","tags":["clojure","clojurescript","node","nodejs"],"date":"17 Mar 2017"}}},{"node":{"fields":{"title":"Compiling ClojureScript Projects Without the JVM","slug":"/2017/02/compiling-clojurescript-projects-without-the-jvm/","tags":["clojure","clojurescript","lumo"],"date":"21 Feb 2017"}}},{"node":{"fields":{"title":"The fastest Clojure REPL in the world","slug":"/2016/11/the-fastest-clojure-repl-in-the-world/","tags":["clojure","clojurescript","lumo"],"date":"09 Nov 2016"}}},{"node":{"fields":{"title":"ClojureScript `require` outside `ns`","slug":"/2016/10/clojurescript-require-outside-ns/","tags":["clojure","clojurescript"],"date":"02 Oct 2016"}}},{"node":{"fields":{"title":"Om Next internals: Incremental Rendering","slug":"/2016/09/om-next-internals-incremental-rendering/","tags":["clojure","clojurescript","om"],"date":"29 Sep 2016"}}},{"node":{"fields":{"title":"Om Next Server-Side Rendering","slug":"/2016/09/om-next-server-side-rendering/","tags":["clojure","clojurescript","om"],"date":"15 Sep 2016"}}},{"node":{"fields":{"title":"Om Next at Full Stack Fest 2016","slug":"/2016/09/om-next-at-full-stack-fest-2016/","tags":["talks","clojure","clojurescript","om"],"date":"14 Sep 2016"}}},{"node":{"fields":{"title":"Om Next and Bootstrapped ClojureScript","slug":"/2016/08/om-next-and-bootstrapped-clojurescript/","tags":["clojure","clojurescript","om"],"date":"24 Aug 2016"}}},{"node":{"fields":{"title":"ClojureScript `require` now supports `:rename`","slug":"/2016/08/clojurescript-require-now-supports-rename/","tags":["clojure","clojurescript"],"date":"10 Aug 2016"}}},{"node":{"fields":{"title":"The quest for a unified routing solution in Om Next","slug":"/2016/06/the-quest-for-a-unified-routing-solution-in-om-next/","tags":["clojure","clojurescript","om"],"date":"12 Jun 2016"}}},{"node":{"fields":{"title":"&apos;Clients in control&apos; — Om Next at Craft Conference 2016","slug":"/2016/05/clients-in-control-om-next-craft-conf-2016/","tags":["talks","clojure","clojurescript","om"],"date":"14 May 2016"}}},{"node":{"fields":{"title":"Routing in Om Next — a Catalog of Approaches","slug":"/2016/02/routing-in-om-next-a-catalog-of-approaches/","tags":["clojure","clojurescript","om"],"date":"22 Feb 2016"}}},{"node":{"fields":{"title":"Om Next meets Devcards — the full reloadable experience","slug":"/2016/02/om-next-meets-devcards-the-full-reloadable-experience/","tags":["clojure","clojurescript","om"],"date":"01 Feb 2016"}}},{"node":{"fields":{"title":"Writing Om Next Reloadable Code — A Checklist","slug":"/2016/01/writing-om-next-reloadable-code-a-checklist/","tags":["clojure","clojurescript","om"],"date":"21 Jan 2016"}}},{"node":{"fields":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 2","slug":"/2016/01/exploration-patterns-om-next-part-2/","tags":["clojure","clojurescript","om"],"date":"09 Jan 2016"}}},{"node":{"fields":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 1","slug":"/2016/01/exploration-patterns-om-next-part-1/","tags":["clojure","clojurescript","om"],"date":"07 Jan 2016"}}},{"node":{"fields":{"title":"Om Next Query Syntax Explained","slug":"/2016/01/om-next-query-syntax/","tags":["clojure","clojurescript","om"],"date":"04 Jan 2016"}}},{"node":{"fields":{"title":"Om Next Study Material","slug":"/2015/12/om-next-study-material/","tags":["clojure","clojurescript","om"],"date":"10 Dec 2015"}}},{"node":{"fields":{"title":"clj-isitup - a simple isitup.org API client","slug":"/2015/11/clj-isitup-a-simple-isitup-org-api-client/","tags":["clojure"],"date":"17 Nov 2015"}}},{"node":{"fields":{"title":"Hosting files on the cloud via GitHub Issues","slug":"/2015/09/hosting-files-on-the-cloud-via-github-issues/","tags":["git","GitHub"],"date":"26 Sep 2015"}}},{"node":{"fields":{"title":"Solving Closure Library's Html5history double event dispatch","slug":"/2015/09/solving-closure-librarys-html5history-double-event-dispatch/","tags":["clojure","clojurescript"],"date":"11 Sep 2015"}}},{"node":{"fields":{"title":"Setting up Heroku config variables with Clojure","slug":"/2015/09/setting-up-heroku-config-variables-with-clojure/","tags":["clojure","heroku"],"date":"03 Sep 2015"}}},{"node":{"fields":{"title":"Jekyll related posts revamped","slug":"/2015/08/jekyll-related-posts-revamped/","tags":["jekyll"],"date":"29 Aug 2015"}}},{"node":{"fields":{"title":"Custom subdomains in GitHub project pages","slug":"/2015/08/custom-subdomains-in-github-project-pages/","tags":["git","GitHub"],"date":"24 Aug 2015"}}},{"node":{"fields":{"title":"Grand opening","slug":"/2015/08/grand-opening/","tags":["lifestyle"],"date":"18 Aug 2015"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2017/02/compiling-clojurescript-projects-without-the-jvm/"}}