{"data":{"allMarkdownRemark":{"totalCount":31,"edges":[{"node":{"frontmatter":{"title":"&apos;Clients in control&apos; — Om Next at Craft Conference 2016"},"fields":{"title":"&apos;Clients in control&apos; — Om Next at Craft Conference 2016","date":"14 May 2016","slug":"/2016/05/clients-in-control-om-next-craft-conf-2016/"},"excerpt":"<p>At the end of April, I gave a talk about Om Next at <a href=\"http://craft-conf.com/\">Craft Conf</a> in Budapest. The talk was recorded and the link is below.</p>\n"}},{"node":{"frontmatter":{"title":"Routing in Om Next — a Catalog of Approaches"},"fields":{"title":"Routing in Om Next — a Catalog of Approaches","date":"22 Feb 2016","slug":"/2016/02/routing-in-om-next-a-catalog-of-approaches/"},"excerpt":"<p>Although a standard routing solution is an orthogonal concern to Om Next's design and, at the time of this writing, there is still <a href=\"https://github.com/omcljs/om/wiki/Routing-Support\">ongoing development</a> with the objective of introducing simpler routing hooks, there are already several ways in which one can add proper route navigation to an Om Next app. This post aims to decrease the general community confusion around this topic by introducing a variety of different approaches that can be used to integrate routing in an Om Next app.</p>\n"}},{"node":{"frontmatter":{"title":"Om Next meets Devcards — the full reloadable experience"},"fields":{"title":"Om Next meets Devcards — the full reloadable experience","date":"01 Feb 2016","slug":"/2016/02/om-next-meets-devcards-the-full-reloadable-experience/"},"excerpt":"<p>In a recent post, I've put together a checklist covering the steps involved in <a href=\"2016/01/writing-om-next-reloadable-code-a-checklist\">writing reloadable Om Next code</a>. If you are trying to use them in your devcards, however, you might find that current <a href=\"https://github.com/bhauman/devcards/pull/85\">Devcards helpers for Om Next</a> are still lacking full support for a pleasant, out-of-the-box reloadable experience, even when sticking to every recommendation in that list. Enter <a href=\"https://github.com/anmonteiro/devcards-om-next\">`devcards-om-next`</a>.</p>\n"}},{"node":{"frontmatter":{"title":"Writing Om Next Reloadable Code — A Checklist"},"fields":{"title":"Writing Om Next Reloadable Code — A Checklist","date":"21 Jan 2016","slug":"/2016/01/writing-om-next-reloadable-code-a-checklist/"},"excerpt":"<p>It didn't take long since <a href=\"https://github.com/bhauman/lein-figwheel\">Figwheel</a> came into our ClojureScript environments for it to become a crucial part of our development workflow. Its code hot loading magic provides the basis for an easy, enjoyable <a href=\"https://en.wikipedia.org/wiki/Interactive_programming\">interactive programming</a> experience. The rest — writing code that can be repeatedly evaluated without disturbing our running program's state — is up to us. In this post I will go through what you need to know to start writing reloadable code in Om Next.</p>\n"}},{"node":{"frontmatter":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 2"},"fields":{"title":"An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 2","date":"09 Jan 2016","slug":"/2016/01/exploration-patterns-om-next-part-2/"},"excerpt":"<p>This is part two of a series of posts that aim to demonstrate how to build classical Software Engineering object recursion patterns in Om Next. In the <a href=\"2016/01/exploration-patterns-om-next-part-1\">previous post</a>, we explored the Om Next constructs of the Composite. This time around we will use the <a href=\"https://en.wikipedia.org/wiki/Decorator_pattern\">Decorator</a> design pattern to build a simple component hierarchy that provides runtime extensibility.</p>\n"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"limit":5,"skip":15,"index":4,"first":false,"last":false}}