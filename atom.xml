<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[anmonteiro]]></title><description><![CDATA[
    I'm a Software Engineer with a passion for entrepreneurship and open-source
    software. This is where I write about software engineering, programming and
    lifestyle.]]></description><link>http://github.com/dylang/node-rss</link><generator>RSS for Node</generator><lastBuildDate>Thu, 18 Apr 2019 10:02:40 GMT</lastBuildDate><item><title><![CDATA[Reason and the Language Server Protocol: The Landscape]]></title><description><![CDATA[
The state of editor tooling for programming languages has seen great change in
recent memory thanks to Microsoft's specification of a [Language Server
Protocol]( https://microsoft.github.io/language-server-protocol/overview) (LSP).

While some editors bundle LSP out of the box, making it a breeze to get up and
running, others take a little more tweaking. In a series of posts, I will detail
the state of LSP editor tooling in Reason / OCaml, as well as how to get set up
quickly in a variety of editors.

]]></description><link>https://anmonteiro.com/2018/11/reason-and-the-language-server-protocol-the-landscape/</link><guid isPermaLink="false">https://anmonteiro.com/2018/11/reason-and-the-language-server-protocol-the-landscape/</guid><pubDate>Sat, 17 Nov 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The state of editor tooling for programming languages has seen great change in
recent memory thanks to Microsoft&apos;s specification of a &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/overview&quot;&gt;Language Server
Protocol&lt;/a&gt; (LSP).&lt;/p&gt;
&lt;p&gt;While some editors bundle LSP out of the box, making it a breeze to get up and
running, others take a little more tweaking. In a series of posts, I will detail
the state of LSP editor tooling in Reason / OCaml, as well as how to get set up
quickly in a variety of editors.&lt;/p&gt;
&lt;!--more--&gt;
&lt;div style=&quot;margin:30px&quot;&gt;
  &lt;img style=&quot;max-width:30%;margin:0 auto&quot; src=&quot;https://user-images.githubusercontent.com/661909/48664817-99be8d80-ea9c-11e8-84ad-f24eed85336f.png&quot;&gt;
&lt;/div&gt;
&lt;h2&gt;Language Server Protocol Implementations&lt;/h2&gt;
&lt;p&gt;There are currently two alternative LSP server implementations for the OCaml
ecosystem. Despite what their names might suggest, all of them support both
OCaml and Reason. Their goals and tradeoffs are described below.&lt;/p&gt;
&lt;h3&gt;1. &lt;a href=&quot;https://github.com/freebroccolo/ocaml-language-server&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ocaml-language-server&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/freebroccolo/ocaml-language-server&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ocaml-language-server&lt;/code&gt;&lt;/a&gt;
is the first implementation of an LSP server to have appeared for OCaml / Reason
and made a few compromises in the name of shipping quickly and iterating fast:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is implemented in TypeScript, and makes use of the upstream &lt;a href=&quot;https://github.com/Microsoft/vscode-languageserver-node&quot;&gt;LSP
implementation
library&lt;/a&gt; by Microsoft
for Node.js&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It makes extensive use of existing tools for functionality such as code
formatting, autocompletion and type information reporting.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;These include, but are not limited to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ocaml/merlin&quot;&gt;Merlin&lt;/a&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;sub&gt;&lt;a
href=&quot;#fn:1&quot;&gt;1&lt;/a&gt;&lt;/sub&gt;&lt;/sup&gt; for code diagnostics, completion and
type information reporting;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/OCamlPro/ocp-indent&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ocp-indent&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&quot;https://github.com/facebook/reason&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;refmt&lt;/code&gt;&lt;/a&gt; for OCaml and Reason code
formatting, respectively;&lt;/li&gt;
&lt;li&gt;Calls to the underlying build systems and package managers, including
&lt;a href=&quot;https://github.com/bucklescript/bucklescript&quot;&gt;BuckleScript&lt;/a&gt;, the OCaml
/ Reason to JavaScript compiler.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. &lt;a href=&quot;https://github.com/jaredly/reason-language-server&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;reason-language-server&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jaredly/reason-language-server&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;reason-language-server&lt;/code&gt;&lt;/a&gt; is
a new implementation of the Language Server Protocol that is implemented in
Reason and compiled to native code. It makes another set of trade-offs, which
are detailed below, and is the implementation that will be covered in this
series of posts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It reduces the reliance on external tools such as Merlin â€“
&lt;code class=&quot;language-text&quot;&gt;reason-language-server&lt;/code&gt; implements its own type information reporting and
source code diagnostics.&lt;/li&gt;
&lt;li&gt;Given it is written in Reason and compiled to native code,
&lt;code class=&quot;language-text&quot;&gt;reason-language-server&lt;/code&gt; has implemented its own LSP protocol communication
infrastructure because there wasn&apos;t one yet in the OCaml ecosystem.&lt;/li&gt;
&lt;li&gt;It also includes support for
&lt;a href=&quot;https://github.com/bsansouci/bsb-native&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;bsb-native&lt;/code&gt;&lt;/a&gt;, a fork of
BuckleScript that can build OCaml and Reason projects to OCaml bytecode and
native assembly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Setting up Reason in &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first editor that we are going to cover in this series is also the simplest
one to set up. The following instructions assume that you have a working &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual
Studio Code&lt;/a&gt; installation.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Open VS Code and select the extensions panel.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Look for the &lt;code class=&quot;language-text&quot;&gt;reason-vscode&lt;/code&gt; package by &lt;a href=&quot;https://twitter.com/jaredforsyth&quot;&gt;Jared
Forsyth&lt;/a&gt; as seen in the following image&lt;sup
id=&quot;fnref:2&quot;&gt;&lt;sub&gt;&lt;a href=&quot;#fn:2&quot;&gt;2&lt;/a&gt;&lt;/sub&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div style=&quot;margin:30px&quot;&gt;
  &lt;img style=&quot;max-width:50%;margin:0 auto&quot; src=&quot;https://user-images.githubusercontent.com/661909/48666415-3e4ec880-eab9-11e8-84b9-1e0beb28f95e.png&quot;&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &quot;Install&quot;, wait until it finishes and click the &quot;Reload&quot; button to
reload the workspace and apply your changes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The above should be all you need! From now on, whenever you open a Reason or
OCaml file you&apos;ll see the Reason Language Server in action: beyond the syntax
highlighting provided by the extension, you&apos;ll see type hinting and error
information if that is the case. Please open an
&lt;a href=&quot;https://github.com/jaredly/reason-language-server/issues/new/choose&quot;&gt;issue&lt;/a&gt; in
Reason Language Server in case anything has gone wrong.&lt;/p&gt;
&lt;h2&gt;Parting Thoughts and Next Posts&lt;/h2&gt;
&lt;p&gt;This post briefly covered the landscape of Language Server Protocol
implementations in OCaml and Reason, as well as the tradeoffs each one embraces
and the differences between them.&lt;/p&gt;
&lt;p&gt;Next time we&apos;ll be covering how to set up the Reason LSP integration for Emacs.
Please tweet &lt;a href=&quot;https://twitter.com/_anmonteiro&quot;&gt;@_anmonteiro&lt;/a&gt; with any
questions or feedback about this post.&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&quot;fn:1&quot;&gt;
  &lt;sup&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/sup&gt; &lt;sub&gt;Merlin is an editor service that implements
  modern IDE features for OCaml and Reason. It solves the same problem as LSP,
  however there needs to be a specific implementation for every editor that
  intends to integrate with the Merlin protocol. LSP, however, only needs one
  implementation per editor in order to support every language that provides an
  LSP server.
  &lt;a href=&quot;#fnref:1&quot;&gt;
    &lt;img draggable=&quot;false&quot; class=&quot;emoji&quot; alt=&quot;&amp;#x21A9;&quot; src=&quot;/img/top.svg&quot;&gt;
  &lt;/a&gt;&lt;/sub&gt;
&lt;/div&gt;
&lt;div id=&quot;fn:2&quot;&gt;
  &lt;sup&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/sup&gt; &lt;sub&gt;  Alternatively, you can install the second
  package shown in the picture, which will install `ocaml-language-server`. That
  won&amp;apos;t, however, be covered in this post.
  &lt;a href=&quot;#fnref:2&quot;&gt;
    &lt;img draggable=&quot;false&quot; class=&quot;emoji&quot; alt=&quot;&amp;#x21A9;&quot; src=&quot;/img/top.svg&quot;&gt;
  &lt;/a&gt;&lt;/sub&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[The State of ClojureScript Compilation in Lumo]]></title><description><![CDATA[
Lumo has shipped with experimental support for
[compiling ClojureScript projects](2017/02/compiling-clojurescript-projects-without-the-jvm)
entirely without the JVM since the beginning of 2017. Starting with the newly released
version, the Lumo build API has been greatly enhanced and much more stable! Read
on for a rundown of the state of ClojureScript compilation in Lumo.

]]></description><link>https://anmonteiro.com/2017/09/the-state-of-clojurescript-compilation-in-lumo/</link><guid isPermaLink="false">https://anmonteiro.com/2017/09/the-state-of-clojurescript-compilation-in-lumo/</guid><pubDate>Mon, 18 Sep 2017 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Lumo has shipped with experimental support for
&lt;a href=&quot;2017/02/compiling-clojurescript-projects-without-the-jvm&quot;&gt;compiling ClojureScript projects&lt;/a&gt;
entirely without the JVM since the beginning of 2017. Starting with the newly released
version, the Lumo build API has been greatly enhanced and much more stable! Read
on for a rundown of the state of ClojureScript compilation in Lumo.&lt;/p&gt;
&lt;!--more--&gt;
&lt;div style=&quot;margin:30px&quot;&gt;
  &lt;img style=&quot;max-width:80%;margin:0 auto&quot; src=&quot;https://user-images.githubusercontent.com/661909/30517192-6cdaee3e-9b0c-11e7-90de-453670244e1e.jpg&quot;&gt;
&lt;/div&gt;
&lt;p&gt;I recently gave the first public talk about Lumo at &lt;a href=&quot;http://clojutre.org/2017/#anmonteiro&quot;&gt;ClojuTRE&lt;/a&gt;
in Finland (&lt;a href=&quot;https://www.youtube.com/watch?v=jH1oJiLV7_0&quot;&gt;video&lt;/a&gt;). Meeting people
who are using Lumo daily, either in their day jobs or simply to play with Clojure(Script)
always does a really good job at keeping me motivated me to continue working on Lumo.&lt;/p&gt;
&lt;h2&gt;Current state of affairs&lt;/h2&gt;
&lt;p&gt;The current Lumo build API is mostly a prototype that I put together demonstrating
that we could have a JVM-less ClojureScript compiler. A great number of features is
lacking, and it can only compile very simple projects.&lt;/p&gt;
&lt;h2&gt;Today!&lt;/h2&gt;
&lt;p&gt;Since ClojuTRE, I&apos;ve been hard at work, and today I&apos;m proud to announce that Lumo&apos;s
build API is, with one exception&lt;sup id=&quot;fnref:1&quot;&gt;&lt;sub&gt;&lt;a href=&quot;#fn:1&quot;&gt;1&lt;/a&gt;&lt;/sub&gt;&lt;/sup&gt;,
at feature parity with the ClojureScript JVM compiler.&lt;/p&gt;
&lt;p&gt;Most notably, it also features the ability to process
&lt;a href=&quot;https://clojurescript.org/news/2017-07-12-clojurescript-is-not-an-island-integrating-node-modules&quot;&gt;JavaScript modules&lt;/a&gt;,
including those from NPM (in a &lt;code class=&quot;language-text&quot;&gt;node_modules&lt;/code&gt; installation).&lt;/p&gt;
&lt;p&gt;I encourage you to update Lumo to the newly released 1.8.0-beta&lt;sup id=&quot;fnref:2&quot;&gt;&lt;sub&gt;&lt;a href=&quot;#fn:2&quot;&gt;2&lt;/a&gt;&lt;/sub&gt;&lt;/sup&gt;
version and try out the revamped build API. Feedback is most welcome!&lt;/p&gt;
&lt;h2&gt;The road ahead&lt;/h2&gt;
&lt;p&gt;The key to unlocking feature parity with the JVM ClojureScript compiler has been
the &lt;a href=&quot;https://github.com/google/closure-compiler-js&quot;&gt;JavaScript port&lt;/a&gt;
of the &lt;a href=&quot;https://github.com/google/closure-compiler&quot;&gt;Google Closure Compiler&lt;/a&gt;. Without
it, neither JS module processing nor sophisticated optimizations would be possible
in Lumo. However, it is also there that lies the last hurdle to truly achieving
feature parity with ClojureScript on the JVM: the ability to perform code splitting
and dynamic chunk loading through &lt;a href=&quot;https://clojurescript.org/news/2017-07-10-code-splitting&quot;&gt;Google Closure modules&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the next few months, we&apos;ll be working hard to iron out some internal details,
as well as research the possibility of adding code splitting support to the Google
Closure Compiler JavaScript port.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;: Lumo is built on my personal time, without the backing of a big corporation.
Its development and &lt;a href=&quot;2017/05/on-lumos-growth-and-sustainability&quot;&gt;long term sustainability&lt;/a&gt;
rely on financial support from the community. If you or your company are using Lumo,
please consider supporting the project in its &lt;a href=&quot;https://opencollective.com/lumo&quot;&gt;OpenCollective page&lt;/a&gt;.
We would like to thank &lt;a href=&quot;https://juxt.pro/index.html&quot;&gt;JUXT&lt;/a&gt; for their recent
&lt;a href=&quot;https://twitter.com/juxtpro/status/905471197323735040&quot;&gt;sponsorship&lt;/a&gt; of Lumo.&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&quot;fn:1&quot;&gt;
  &lt;sup&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/sup&gt; &lt;sub&gt;At the time of this writing, the JavaScript port
of the Google Closure Compiler can&amp;apos;t yet handle Google Closure Modules (Code Splitting).
  &lt;a href=&quot;#fnref:1&quot;&gt;&lt;img draggable=&quot;false&quot; class=&quot;emoji&quot; alt=&quot;&amp;#x21A9;&quot; src=&quot;/public/img/top.svg&quot;&gt;&lt;/a&gt;&lt;/sub&gt;
&lt;/div&gt;
&lt;div id=&quot;fn:2&quot;&gt;
  &lt;sup&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/sup&gt; &lt;sub&gt;The beta version can be installed normally from NPM.
If you&amp;apos;re using Homebrew, this beta version can be installed with
&lt;code&gt;brew install --devel lumo&lt;/code&gt;.
  &lt;a href=&quot;#fnref:2&quot;&gt;&lt;img draggable=&quot;false&quot; class=&quot;emoji&quot; alt=&quot;&amp;#x21A9;&quot; src=&quot;/public/img/top.svg&quot;&gt;&lt;/a&gt;&lt;/sub&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Shipping a (very simplistic) ReasonReact app]]></title><description><![CDATA[
_I used [Reason](https://reasonml.github.io/) and [React](https://reasonml.github.io/reason-react/)
to build a simple example app: [ReKeys](https://anmonteiro.com/rekeys/). Here's
what I learned._

]]></description><link>https://anmonteiro.com/2017/08/shipping-a-very-simplistic-reasonreact-app/</link><guid isPermaLink="false">https://anmonteiro.com/2017/08/shipping-a-very-simplistic-reasonreact-app/</guid><pubDate>Sat, 19 Aug 2017 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;I used &lt;a href=&quot;https://reasonml.github.io/&quot;&gt;Reason&lt;/a&gt; and &lt;a href=&quot;https://reasonml.github.io/reason-react/&quot;&gt;React&lt;/a&gt;
to build a simple example app: &lt;a href=&quot;https://anmonteiro.com/rekeys/&quot;&gt;ReKeys&lt;/a&gt;. Here&apos;s
what I learned.&lt;/em&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;div style=&quot;margin:20px 0 25px&quot;&gt;
  &lt;img style=&quot;margin:0 auto;width: 60%&quot; src=&quot;https://user-images.githubusercontent.com/661909/29498875-552e41b8-85b9-11e7-857a-6740824fc13c.png&quot;&gt;
&lt;/div&gt;
&lt;p&gt;I&apos;ve been enamored with &lt;a href=&quot;https://en.wikipedia.org/wiki/ML_(programming_language)&quot;&gt;ML family&lt;/a&gt;
of programming languages for a while. However, and aside from the occasional Kata,
I had never really &lt;em&gt;shipped&lt;/em&gt; anything using an ML language.&lt;/p&gt;
&lt;p&gt;Given the recent activity in the Ocaml community, however â€“ mostly due to the
communication efforts behind &lt;a href=&quot;https://github.com/facebook/reason&quot;&gt;Facebook&apos;s Reason&lt;/a&gt; â€“
I felt compelled to give it another try (after a very short incursion during my undergrad),
and I was in for a treat!&lt;/p&gt;
&lt;h1&gt;Getting Started &amp;#x26; Reading Material&lt;/h1&gt;
&lt;p&gt;I went through Reason&apos;s &lt;a href=&quot;https://reasonml.github.io/guide/javascript/quickstart&quot;&gt;initial setup&lt;/a&gt;
right around the time &lt;a href=&quot;https://twitter.com/jaredforsyth&quot;&gt;Jared Forsyth&lt;/a&gt; published
a very detailed &lt;a href=&quot;https://jaredforsyth.com/2017/07/05/a-reason-react-tutorial/&quot;&gt;tutorial&lt;/a&gt;
about getting started with &lt;a href=&quot;https://reasonml.github.io/reason-react/&quot;&gt;ReasonReact&lt;/a&gt;
and compiling Reason for the browser using &lt;a href=&quot;https://bucklescript.github.io/bucklescript&quot;&gt;BuckleScript&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Despite its young age, BuckleScript is an incredible piece of technology that
will (&lt;em&gt;instantly&lt;/em&gt;, if I may add) compile Ocaml code (with built-in) support for
Reason, to JavaScript. The &lt;a href=&quot;https://bucklescript.github.io/bucklescript/Manual.html&quot;&gt;BuckleScript manual&lt;/a&gt;,
though somewhat terse in the beginning, is an amazing reference to working with
the compiler and has become a pinned tab on my browser right after I started this
journey.&lt;/p&gt;
&lt;h1&gt;Next steps &amp;#x26; Troubleshooting&lt;/h1&gt;
&lt;p&gt;But after the initial setup I was on my own, and I had to start somewhere.
&lt;a href=&quot;https://github.com/reasonml-community/reason-scripts&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;reason-scripts&lt;/code&gt;&lt;/a&gt;,
a custom template for &lt;a href=&quot;https://github.com/facebookincubator/create-react-app/&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;create-react-app&lt;/code&gt;&lt;/a&gt;,
turned out to be a great way to bootstrap my project without the hassle of
writing boilerplate code, setting up tooling and spending hours figuring out
the tiniest of mistakes.&lt;/p&gt;
&lt;p&gt;As any beginner going through the hurdles of unfamiliar paradigms, it wasn&apos;t
long until I hit some difficulties. What follows is an attempt to document the
pitfalls that trapped me at first, which I hope will be useful for others trying
to figure out rookie mistakes as they get started with Reason(React).&lt;/p&gt;
&lt;h2&gt;The dreadful &lt;code class=&quot;language-text&quot;&gt;type variable cannot be generalized&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;In his tutorial, Jared describes making a
&lt;a href=&quot;https://jaredforsyth.com/2017/07/05/a-reason-react-tutorial/#13-making-a-stateful-component&quot;&gt;stateful component&lt;/a&gt;,
but when I attempted to migrate my stateless component to a stateful one, I was
immediately greeted by the following, somewhat cryptic, error message:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ocaml&quot;&gt;&lt;pre class=&quot;language-ocaml&quot;&gt;&lt;code class=&quot;language-ocaml&quot;&gt;Module build failed&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Error&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; File &lt;span class=&quot;token string&quot;&gt;&quot;/path/to/src/app.re&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; line &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; characters &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;51&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
Error&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; The &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; this expression&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token type variable&quot;&gt;&apos;_a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ReasonReact&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stateless&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ReasonReact&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;noRetainedProps&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        ReasonReact&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;noRetainedProps&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
       ReasonReact&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;componentSpec&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
       contains &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; variables that cannot be generalized&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The solution was simply to use state somewhere in any function of my component. Even
just destructuring state from the &lt;em&gt;e.g.&lt;/em&gt; the single argument to &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt; solves
the problem.&lt;/p&gt;
&lt;p&gt;Now the reason why this happens is quite interesting: if you look at the
&lt;a href=&quot;https://github.com/reasonml/reason-react/blob/8aa30ae63cc3bf7bef7bfc373c3a09a671dca267/src/reasonReact.re#L592&quot;&gt;type of &lt;code class=&quot;language-text&quot;&gt;ReasonReact.statefulComponent&lt;/code&gt;&lt;/a&gt;,
there&apos;s one type variable &lt;code class=&quot;language-text&quot;&gt;&amp;#39;state&lt;/code&gt;. That&apos;s the variable that the error is referring to:
when &lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt; is not used &lt;em&gt;within&lt;/em&gt; the component definition, the compiler can&apos;t
infer what we want its type to be. If used explicitly, then we&apos;re literally telling
what that type variable should be.&lt;/p&gt;
&lt;p&gt;An interesting note here is that &lt;code class=&quot;language-text&quot;&gt;ReasonReact.statelessComponent&lt;/code&gt; doesn&apos;t have
this problem. If we look at its &lt;a href=&quot;https://github.com/reasonml/reason-react/blob/8aa30ae63cc3bf7bef7bfc373c3a09a671dca267/src/reasonReact.re#L590&quot;&gt;type definition&lt;/a&gt;,
it&apos;s almost immediately obvious why: there are no type variables in sight. The
compiler &lt;em&gt;always&lt;/em&gt; knows that it will take a &lt;code class=&quot;language-text&quot;&gt;stateless&lt;/code&gt; argument (which is
defined above in the file as being the &lt;code class=&quot;language-text&quot;&gt;unit&lt;/code&gt; type).&lt;/p&gt;
&lt;p&gt;The team behind ReasonReact is well aware of this error and some other edge
cases in the library, and actively working to fix them in the near future. For
more information, there&apos;s a section about this pitfall in the
&lt;a href=&quot;http://caml.inria.fr/resources/doc/faq/core.en.html#weak-type-variables&quot;&gt;Ocaml FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Modules &amp;#x26; Capitalization&lt;/h2&gt;
&lt;p&gt;Ocaml has a very interesting &lt;a href=&quot;https://caml.inria.fr/pub/docs/manual-ocaml/moduleexamples.html&quot;&gt;module system&lt;/a&gt;.
In short, modules are used to group together related definitions, and can be
arbitrarily nested. Interestingly enough, files too become modules, and one of
my earliest mistakes was related to their capitalization when &lt;code class=&quot;language-text&quot;&gt;open&lt;/code&gt;ing a module
from a different file.&lt;/p&gt;
&lt;p&gt;As part of ReKeys, I define a file called &lt;a href=&quot;https://github.com/anmonteiro/rekeys/blob/master/src/dom_utils.re&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;dom_utils.re&lt;/code&gt;&lt;/a&gt;
for grouping certain definitions related to interaction with the DOM and events.
When trying to open this file for consumption in &lt;a href=&quot;https://github.com/anmonteiro/rekeys/blob/9430b66f362989bbdfa6adc037485790b5ae1543/src/app.re#L1&quot;&gt;another file&lt;/a&gt;,
I couldn&apos;t get it to work.&lt;/p&gt;
&lt;p&gt;The reason is that the module provided by a file is recognized by the compiler
with the first letter (and only the first letter) capitalized. So &lt;code class=&quot;language-text&quot;&gt;domUtils.re&lt;/code&gt;
becomes &lt;code class=&quot;language-text&quot;&gt;DomUtils&lt;/code&gt;, but &lt;code class=&quot;language-text&quot;&gt;dom_utils.re&lt;/code&gt; becomes &lt;code class=&quot;language-text&quot;&gt;Dom_utils&lt;/code&gt; and I was trying to
open &lt;code class=&quot;language-text&quot;&gt;Dom_Utils&lt;/code&gt;. This is one of those mistakes that I&apos;ll never make again, but
it was a head scratcher for a while there!&lt;/p&gt;
&lt;h2&gt;Inline type signatures&lt;/h2&gt;
&lt;p&gt;Having tried other languages in the ML family such as Haskell, Elm or PureScript,
I struggled initially with how to annotate the types of my definitions. In
Haskell, for example, types can be annotated above a function&apos;s implementation,
like below:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Ocaml/Reason, however, annotating the &lt;code class=&quot;language-text&quot;&gt;foo&lt;/code&gt; function would either be done
inline, or in a &lt;code class=&quot;language-text&quot;&gt;.rei&lt;/code&gt; &lt;a href=&quot;https://reasonml.github.io/guide/language/module#signatures&quot;&gt;interface file&lt;/a&gt;.
Example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* my_file.rei */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; foo&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; int &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; int&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* inline, in a my_file.re file */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; foo&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; int &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; int &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fun x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Parting thoughts&lt;/h1&gt;
&lt;p&gt;Overall, my experience with Reason has been incredibly smooth. For a change, I
love how the compiler acts as someone constantly looking over my shoulder telling
me the amazing ways in which I can mess up what I&apos;m doing.&lt;/p&gt;
&lt;p&gt;The Reason community on &lt;a href=&quot;https://discord.gg/reasonml&quot;&gt;Discord&lt;/a&gt; is ultra helpful
and has been very patient with my constant newbie questions about anything Ocaml / Reason.&lt;/p&gt;
&lt;p&gt;I&apos;m excited to keep tinkering with Reason and eventually build something more serious.
In the meantime, I highly suggest you give it a try.&lt;/p&gt;
&lt;p&gt;The code for ReKeys is free and open-source on &lt;a href=&quot;https://github.com/anmonteiro/rekeys&quot;&gt;GitHub&lt;/a&gt;.
Please tweet &lt;a href=&quot;https://twitter.com/_anmonteiro&quot;&gt;@_anmonteiro&lt;/a&gt; with any questions/feedback
about the ReKeys code and/or this blog post!&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[On Lumo's Growth and Sustainability]]></title><description><![CDATA[
This post reflects on Lumo's growth almost 6 months after its announcement,
shares the project's goals and communicates what you can do to help Lumo grow
into and even more full-featured ClojureScript environment. Read on!

]]></description><link>https://anmonteiro.com/2017/05/on-lumos-growth-and-sustainability/</link><guid isPermaLink="false">https://anmonteiro.com/2017/05/on-lumos-growth-and-sustainability/</guid><pubDate>Sun, 30 Apr 2017 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This post reflects on Lumo&apos;s growth almost 6 months after its announcement,
shares the project&apos;s goals and communicates what you can do to help Lumo grow
into and even more full-featured ClojureScript environment. Read on!&lt;/p&gt;
&lt;!--more--&gt;
&lt;a href=&quot;https://opencollective.com/lumo&quot; target=&quot;_blank_&quot;&gt;
  &lt;img style=&quot;max-width: 70%;margin:0 auto&quot; src=&quot;https://cloud.githubusercontent.com/assets/661909/25586993/d8239560-2e56-11e7-8f87-f6b9cbc2509f.png&quot;&gt;
&lt;/a&gt;
&lt;p&gt;In less than 6 months, Lumo has by far outgrown every expectation I had created.
What started as a simple toy project has now become a tool that many of us use
daily, either as a Clojure playground or in some more intricate use cases such as
&lt;a href=&quot;https://github.com/juxt/mach&quot;&gt;Mach&lt;/a&gt;, &lt;a href=&quot;https://github.com/eginez/calvin&quot;&gt;Calvin&lt;/a&gt;,
&lt;a href=&quot;https://github.com/pesterhazy/unravel&quot;&gt;Unravel&lt;/a&gt; and some more.&lt;/p&gt;
&lt;div class=&quot;message&quot; style=&quot;font-size:1.5rem;font-style:italic;color:#8f5536&quot;&gt;
  Today I&apos;m launching an initiative to ensure the steady growth and long term
  viability of Lumo.
&lt;/div&gt;
&lt;p&gt;Lumo&apos;s demands are also already outgrowing what I had envisioned at first. And
while it may not sound like such, this is a very good thing. Going forward, I
predict the following are immediate needs that Lumo has.&lt;/p&gt;
&lt;h2&gt;Project&apos;s goals&lt;/h2&gt;
&lt;h3&gt;Creating thorough documentation and develop a website&lt;/h3&gt;
&lt;p&gt;Lumo needs a website. And some documentation. This has been on my todo list for
a long time and I feel like we need to tackle it sooner rather than later. There
are costs associated with registering a domain name and hosting a website, along
with all the effort of developing the webpage and writing all the documentation.&lt;/p&gt;
&lt;h3&gt;Have a logo designed&lt;/h3&gt;
&lt;p&gt;Given Lumo&apos;s current popularity, I believe having a logo designed aligns with the
project&apos;s direction and would love to have this done when launching a website.&lt;/p&gt;
&lt;h3&gt;Sort out CI issues&lt;/h3&gt;
&lt;p&gt;Lumo has been having some &lt;a href=&quot;https://twitter.com/_anmonteiro/status/852623330708410369&quot;&gt;CI issues&lt;/a&gt;.
While this has been solved short term, I&apos;m fairly confident they will start showing
up again as more features are added, and that we will need to host our own continuous
integration service at some point in the future.&lt;/p&gt;
&lt;h3&gt;Lumo build API&lt;/h3&gt;
&lt;p&gt;Lumo can currently build very simple
&lt;a href=&quot;2017/02/compiling-clojurescript-projects-without-the-jvm&quot;&gt;ClojureScript projects with optimizations&lt;/a&gt;.
Bringing the Lumo build API and compiler toolchain to feature parity with the
regular JVM ClojureScript compiler is a goal that I believe warrants great benefits
to ClojureScript&apos;s reach.&lt;/p&gt;
&lt;h3&gt;Even more&lt;/h3&gt;
&lt;p&gt;There is even more stuff in the pipes. Getting Lumo to work on the Raspberry Pi,
for one, is a big short term goal. Supporting more platforms and 32-bit architectures
is another that is potentially related to CI issues. Even more features are the
development of idiomatic ClojureScript I/O, shell and HTTP wrappers for Node.js&apos;s
APIs, getting Lumo on more package managers, and eventually tackling dependency
management and resolution.&lt;/p&gt;
&lt;h2&gt;Today&lt;/h2&gt;
&lt;p&gt;Today I&apos;m launching an initiative to ensure the steady growth and long term
viability of Lumo. I&apos;ve opened an &lt;a href=&quot;https://opencollective.com/lumo&quot;&gt;OpenCollective&lt;/a&gt;
page for Lumo where you can pledge your support for the project. You can choose
to become a backer or a sponsor. Contributions can be one time, monthly or yearly,
and in the amount you choose (as little as $1!). Companies can become sponsors too.&lt;/p&gt;
&lt;p&gt;Note that contributions are not meant to be for myself only. Any contributor that
devotes a substantial amount of time to working on a Lumo feature can choose to
submit an expense to the project&apos;s funding.&lt;/p&gt;
&lt;h3&gt;Why Open Collective?&lt;/h3&gt;
&lt;p&gt;Open Collective&apos; core value is transparency in contributions. This means that you
will always be able to see what the contributions your pledge are being used for.
Open Collective also lets project maintainers automatically issue invoices, so if
you need one (typically as a sponsor company) the process is very straightforward
for both parts. You can also cancel your sponsorship any time you&apos;d like.&lt;/p&gt;
&lt;h3&gt;What do sponsors get?&lt;/h3&gt;
&lt;p&gt;Now, as a potential sponsor to Lumo, you must be asking what is it that you get
for contributing to Lumo&apos;s Open Collective initiative. As a sponsor, you get
several benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;as a sponsor, your company&apos;s logo displayed in the project&apos;s README for every visitor to see&lt;/li&gt;
&lt;li&gt;I will also take your input into consideration and you&apos;ll have a say in helping
steer Lumo&apos;s goals&lt;/li&gt;
&lt;li&gt;you will impact the speed at which new features are developed into Lumo&apos;s codebase.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Parting thoughts&lt;/h2&gt;
&lt;p&gt;This initiative represents a lot to Lumo&apos;s viability going forward. I urge you to
consider backing or sponsoring Lumo to ensure its growth. Even if you don&apos;t back
the project, I would be extremely grateful if you could share this post and / or
the &lt;a href=&quot;https://opencollective.com/lumo&quot;&gt;Lumo Open Collective page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Requiring Node.js modules from ClojureScript namespaces]]></title><description><![CDATA[
Node.js module support has been greatly enhanced in the upcoming release of the
ClojureScript compiler. This post explains how to seamlessly require Node.js packages
from any ClojureScript namespace. Read on!

]]></description><link>https://anmonteiro.com/2017/03/requiring-node-js-modules-from-clojurescript-namespaces/</link><guid isPermaLink="false">https://anmonteiro.com/2017/03/requiring-node-js-modules-from-clojurescript-namespaces/</guid><pubDate>Fri, 17 Mar 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Node.js module support has been greatly enhanced in the upcoming release of the
ClojureScript compiler. This post explains how to seamlessly require Node.js packages
from any ClojureScript namespace. Read on!&lt;/p&gt;
&lt;!--more--&gt;
&lt;div class=&quot;message&quot;&gt;
  &lt;strong style=&quot;text-decoration:underline&quot;&gt;Update:&lt;/strong&gt; This has been released
  as part of ClojureScript version 1.9.518. ClojureScript 1.9.854 ships with even
  &lt;a href=&quot;https://clojurescript.org/news/2017-07-12-clojurescript-is-not-an-island-integrating-node-modules&quot;&gt;better support&lt;/a&gt; for this feature.
&lt;/div&gt;
&lt;div style=&quot;margin:30px&quot;&gt;
  &lt;img style=&quot;max-width: 70%;margin:0 auto&quot; src=&quot;https://cloud.githubusercontent.com/assets/661909/23828334/9eedc8b0-0683-11e7-89bb-45afc0da79fd.jpg&quot;&gt;
&lt;/div&gt;
&lt;h2&gt;What&apos;s new&lt;/h2&gt;
&lt;p&gt;The ClojureScript compiler added basic support for
&lt;a href=&quot;https://clojurescript.org/guides/javascript-modules#node-modules&quot;&gt;Node.js module resolution&lt;/a&gt;
in version 1.9.456. However, it didn&apos;t allow requiring those modules from ClojureScript
namespaces, relying instead on shim JavaScript sources that would import them. The next
version of the compiler fixes that problem by including
&lt;a href=&quot;https://github.com/clojure/clojurescript/wiki/Enhanced-Node.js-Modules-Support&quot;&gt;significant enhancements&lt;/a&gt;
around this behavior, effectively making it possible to seamlessly
&lt;a href=&quot;https://github.com/clojure/clojurescript/commit/777d41b9b6fe83c3d29fc51ee3ddbdfeff4f803b&quot;&gt;require Node.js modules&lt;/a&gt;
as if they were regular ClojureScript namespaces.&lt;/p&gt;
&lt;h2&gt;How we made it work&lt;/h2&gt;
&lt;p&gt;To make all this possible, a new compiler option has been introduced. When compiling
your projects, the ClojureScript compiler will now read the &lt;code class=&quot;language-text&quot;&gt;:npm-deps&lt;/code&gt; option and
take care of installing the specified dependencies for you. This option takes a map
of package name to version. It goes without saying that you&apos;ll need to have both
Node.js and NPM installed for dependencies to be installed.&lt;/p&gt;
&lt;p&gt;What&apos;s better, there are no changes necessary to downstream tooling. The NPM package
source files are computed and effectively become
&lt;a href=&quot;https://clojurescript.org/reference/compiler-options#foreign-libs&quot;&gt;foreign libraries&lt;/a&gt;,
which have long been supported.&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Let&apos;s look at a specific example: say we want to use the
&lt;a href=&quot;https://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/&quot;&gt;immensely popular&lt;/a&gt;
&lt;code class=&quot;language-text&quot;&gt;left-pad&lt;/code&gt; library in a ClojureScript project. Given the following directory structure:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;project
â”œâ”€ src
â”‚  â”œâ”€ example
â”‚  â”‚   â””â”€ core.cljs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and our &lt;code class=&quot;language-text&quot;&gt;src/example/core.cljs&lt;/code&gt; file,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; src/example/core.cljs&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; example.core
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:require&lt;/span&gt; left-pad&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;enable-console-print!&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; pad the number 42 with five zeros&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;left-pad &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the following script would successfully compile this project:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; build.clj&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;require &apos;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cljs.build.api &lt;span class=&quot;token operator&quot;&gt;:as&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;b&lt;/span&gt;/build &lt;span class=&quot;token string&quot;&gt;&quot;src&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:optimizations&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:none&lt;/span&gt;
   &lt;span class=&quot;token operator&quot;&gt;:main&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&apos;example&lt;/span&gt;.core
   &lt;span class=&quot;token operator&quot;&gt;:npm-deps&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:left-pad&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1.1.3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;;; NEW&lt;/span&gt;
   &lt;span class=&quot;token operator&quot;&gt;:install-deps&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;;; NEW&lt;/span&gt;
   &lt;span class=&quot;token operator&quot;&gt;:output-to&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;main.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&apos;s interesting to note how &lt;code class=&quot;language-text&quot;&gt;left-pad&lt;/code&gt; is both a namespace and a function. This
is due to it being the only export of the &lt;code class=&quot;language-text&quot;&gt;left-pad&lt;/code&gt; CommonJS module. Support for
this resolution is also part of a
&lt;a href=&quot;https://github.com/clojure/clojurescript/commit/1d38f73a86081ad54cb230c507fbae183d768d6b&quot;&gt;recent development&lt;/a&gt;
in the ClojureScript compiler.&lt;/p&gt;
&lt;p&gt;If a module, e.g. the widely used &lt;code class=&quot;language-text&quot;&gt;react&lt;/code&gt; package, exports an object, we would
be able to refer to functions in that object as if they were Vars in a Clojure(Script) namespace.
Here&apos;s an example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; example.core
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:require&lt;/span&gt; react&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; react/DOM.div is equivalent to (react/createElement &quot;div&quot;), and that is&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;;; made clear in the h1 element.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; title
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;react/DOM.div &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;react/createElement &lt;span class=&quot;token string&quot;&gt;&quot;h1&quot;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Page title&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;But there&apos;s more&lt;/h2&gt;
&lt;h3&gt;Packaged ClojureScript libraries benefit too&lt;/h3&gt;
&lt;p&gt;ClojureScript libraries that
&lt;a href=&quot;https://clojurescript.org/reference/packaging-foreign-deps&quot;&gt;package foreign dependencies&lt;/a&gt;
can also benefit from these enhancements. Ticket &lt;a href=&quot;http://dev.clojure.org/jira/browse/CLJS-1973&quot;&gt;CLJS-1973&lt;/a&gt;
adds support for the &lt;code class=&quot;language-text&quot;&gt;:npm-deps&lt;/code&gt; option in &lt;code class=&quot;language-text&quot;&gt;deps.cljs&lt;/code&gt; files, allowing library
authors to develop and distribute libraries that directly depend on Node.js modules.&lt;/p&gt;
&lt;h3&gt;This does &lt;strong&gt;not&lt;/strong&gt; obviate the need for externs&lt;/h3&gt;
&lt;p&gt;Even though the Google Closure Compiler can now consume Node.js modules, externs
are still very much necessary. This is a consequence of the fact that the Google
Closure Compiler doesn&apos;t support much of the dynamic programming employed in writing
some, if not most Node.js packages.&lt;/p&gt;
&lt;p&gt;Fortunately, the ClojureScript compiler has
recently introduced &lt;a href=&quot;https://clojurescript.org/guides/externs&quot;&gt;externs inference&lt;/a&gt;
functionality, which makes it much easier to generate externs from JavaScript interop.
Additionally, ClojureScript will agressively index every externs file in the classpath,
so you can still add &lt;a href=&quot;http://cljsjs.github.io/&quot;&gt;CLJSJS packages&lt;/a&gt; to your project
and benefit from their externs, even though you don&apos;t require the namespaces they
export.&lt;/p&gt;
&lt;h3&gt;Node.js module consumption is not only for Node.js apps&lt;/h3&gt;
&lt;p&gt;Consuming Node.js modules from NPM doesn&apos;t solely benefit ClojureScript projects
that target Node.js. NPM is currently also the &lt;em&gt;de facto&lt;/em&gt; way to consume JavaScript
packages that target the browser. This means that ClojureScript browser-based apps
can also take advantage of this functionality.&lt;/p&gt;
&lt;h3&gt;Dead-code elimination on Node.js modules&lt;/h3&gt;
&lt;p&gt;To me, the greatest benefit of the new module support is dead-code elimination on
these (not so) foreign libraries. Previously, foreign libraries included in a ClojureScript
project would just get appended after Google Closure compilation. Because the Closure
Compiler can now consume Node.js modules, we get elimination of unused code for
free in our optimized builds!&lt;/p&gt;
&lt;h2&gt;Final remarks&lt;/h2&gt;
&lt;p&gt;It has been really satisfying to work on enhancing the Node.js module support in
the ClojureScript compiler. My hope is that these developments go a long way closing
the gap between ClojureScript and JavaScript libraries published to NPM. More
importantly, I believe enhanced Node.js module support will make it much easier
to maintain codebases that share both ClojureScript and JavaScript code, as well
as make ClojureScript more appealing to JavaScript developers that rely on NPM
published packages every day.&lt;/p&gt;
&lt;p&gt;Please note that Node.js module consumption is currently in alpha status. All
feedback is appreciated, and if you find an issue please report in the
&lt;a href=&quot;http://dev.clojure.org/jira/browse/CLJS&quot;&gt;ClojureScript JIRA&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Tweet &lt;a href=&quot;https://twitter.com/_anmonteiro&quot;&gt;@_anmonteiro&lt;/a&gt; with any questions or
suggestions. Thanks for reading!&lt;/p&gt;
&lt;hr&gt;
&lt;br&gt;
*&lt;small&gt;Thanks to &lt;a href=&quot;https://twitter.com/ShaunMahood&quot;&gt;Shaun Mahood&lt;/a&gt;
for reading a draft of this post.&lt;/small&gt;*</content:encoded></item><item><title><![CDATA[Compiling ClojureScript Projects Without the JVM]]></title><description><![CDATA[
I have dreamed about being able to compile a ClojureScript project without installing
Java ever since coming to know that [ClojureScript can compile itself](http://swannodette.github.io/2015/07/29/clojurescript-17).
While projects like [Planck](https://github.com/mfikes/planck) and
[Lumo](2016/11/the-fastest-clojure-repl-in-the-world) can either
run arbitrary ClojureScript forms at the REPL or run ClojureScript scripts, none have
actually supported flat out compiling an entire ClojureScript project. Until now.

]]></description><link>https://anmonteiro.com/2017/02/compiling-clojurescript-projects-without-the-jvm/</link><guid isPermaLink="false">https://anmonteiro.com/2017/02/compiling-clojurescript-projects-without-the-jvm/</guid><pubDate>Tue, 21 Feb 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I have dreamed about being able to compile a ClojureScript project without installing
Java ever since coming to know that &lt;a href=&quot;http://swannodette.github.io/2015/07/29/clojurescript-17&quot;&gt;ClojureScript can compile itself&lt;/a&gt;.
While projects like &lt;a href=&quot;https://github.com/mfikes/planck&quot;&gt;Planck&lt;/a&gt; and
&lt;a href=&quot;2016/11/the-fastest-clojure-repl-in-the-world&quot;&gt;Lumo&lt;/a&gt; can either
run arbitrary ClojureScript forms at the REPL or run ClojureScript scripts, none have
actually supported flat out compiling an entire ClojureScript project. Until now.&lt;/p&gt;
&lt;!--more--&gt;
&lt;div style=&quot;margin:-20px auto&quot;&gt;
  &lt;img style=&quot;margin:0&quot; src=&quot;https://cloud.githubusercontent.com/assets/661909/23149340/1bb1c70e-f7a0-11e6-9a5c-f598cd73e722.png&quot;&gt;
&lt;/div&gt;
&lt;h2&gt;Wait... what?!&lt;/h2&gt;
&lt;p&gt;That&apos;s right. Starting with version 1.2.0, &lt;a href=&quot;https://github.com/anmonteiro/lumo&quot;&gt;Lumo&lt;/a&gt;
can compile ClojureScript projects, just like the regular JVM-based ClojureScript
compiler. And you know what? Thanks to
&lt;code&gt;&lt;a href=&quot;https://github.com/google/closure-compiler-js&quot;&gt;google-closure-compiler-js&lt;/a&gt;&lt;/code&gt;,
the generated JavaScript can be &lt;span style=&quot;text-decoration:underline&quot;&gt;optimized&lt;/span&gt;
and benefit from dead-code elimination too! This is a huge step forward in being
able to compile ClojureScript source code ahead of time into optimized JavaScript
bundles using nothing but Lumo and Node.js.&lt;/p&gt;
&lt;p&gt;Making this work meant porting the JVM-based code in the ClojureScript compiler to
work under Lumo and the Node.js platform. While most of it has been generally straightforward,
changing the synchronous JVM build API to the self-hosted ClojureScript asynchronous
API has represented the most amount of work so far.&lt;/p&gt;
&lt;p&gt;Compiling ClojureScript projects with Lumo requires no external dependencies (such
as the Google Closure Library) apart from those required by the projects themselves,
as all the necessary compiler dependencies are bundled within the single Lumo executable.&lt;/p&gt;
&lt;p&gt;Go ahead and &lt;a href=&quot;https://github.com/anmonteiro/lumo#installation&quot;&gt;install&lt;/a&gt; the latest
Lumo release to try this feature out. Make sure you get the &lt;a href=&quot;https://github.com/anmonteiro/lumo/releases/tag/1.2.0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;1.2.0&lt;/code&gt;&lt;/a&gt;
release &lt;sup id=&quot;fnref:1&quot;&gt;&lt;sub&gt;&lt;a href=&quot;#fn:1&quot;&gt;1&lt;/a&gt;&lt;/sub&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Take for example this &lt;a href=&quot;https://clojurescript.org/guides/quick-start#running-clojurescript-on-node.js&quot;&gt;small section&lt;/a&gt;
of the ClojureScript Quick Start guide. By simply changing &lt;code class=&quot;language-text&quot;&gt;cljs.build.api&lt;/code&gt; to
&lt;code class=&quot;language-text&quot;&gt;lumo.build.api&lt;/code&gt;, we can start compiling the Quick Start guide sample project without
the JVM, today. Also, let&apos;s use advanced optimizations right away so we can see the
JavaScript version of the Google Closure Compiler in action. This is what our &lt;code class=&quot;language-text&quot;&gt;build.cljs&lt;/code&gt;
file will look like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;require &apos;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;lumo.build.api &lt;span class=&quot;token operator&quot;&gt;:as&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;b&lt;/span&gt;/build &lt;span class=&quot;token string&quot;&gt;&quot;src&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:main&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&apos;hello-world&lt;/span&gt;.core
   &lt;span class=&quot;token operator&quot;&gt;:output-to&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;main.js&quot;&lt;/span&gt;
   &lt;span class=&quot;token operator&quot;&gt;:optimizations&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:advanced&lt;/span&gt;
   &lt;span class=&quot;token operator&quot;&gt;:target&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:nodejs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&apos;s now run the compilation script with Lumo. Don&apos;t forget to add the &lt;code class=&quot;language-text&quot;&gt;src&lt;/code&gt; folder
to the classpath so that Lumo knows where to find the project. This can be done with
the &lt;code class=&quot;language-text&quot;&gt;-c&lt;/code&gt;/&lt;code class=&quot;language-text&quot;&gt;--classpath&lt;/code&gt; command line option (hint: run &lt;code class=&quot;language-text&quot;&gt;lumo -h&lt;/code&gt; for all the
available options).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ lumo --classpath src build.cljs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After waiting a few moments, we should be able to run our newly compiled project
with &lt;code class=&quot;language-text&quot;&gt;node main.js&lt;/code&gt;. How cool is that?!&lt;/p&gt;
&lt;h2&gt;Caveats&lt;/h2&gt;
&lt;p&gt;This new feature isn&apos;t short of tradeoffs. The most obvious, and also the harder to
solve in the short term are described below.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;ClojureScript version lock-in&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Lumo ships with its own version of the ClojureScript compiler. This means that, for
now, it is not possible to compile ClojureScript projects against versions of
ClojureScript different than the one that is bundled within Lumo. While this caveat
may be possible to circumvent in the future, it is what allows us to not require any
external dependencies when compiling ClojureScript projects with Lumo.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Google Closure Compiler JS&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;The Google Closure Compiler JS is a JavaScript port of the Java version, generated
using GWT. That makes it &lt;a href=&quot;https://github.com/google/closure-compiler-js/issues/24&quot;&gt;take longer&lt;/a&gt;
to optimize code when compared to the Java version. Furthermore, it also ships with
fewer features than its Java counterpart, both because not every feature included in
the Java version is portable to JavaScript, and also because it is a fairly new
project, only &lt;a href=&quot;https://developers.googleblog.com/2016/08/closure-compiler-in-javascript.html&quot;&gt;announced&lt;/a&gt;
in late August 2016.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This Lumo release represents a lot. To my knowledge, there exists no other effort
to compile and optimize ClojureScript projects with the Google Closure Compiler without
requiring a JVM installation. But we have only began to scratch the surface, and
there&apos;s an equally large amount of work that remains to be done in order to achieve
feature parity with the current ClojureScript compiler on the JVM.&lt;/p&gt;
&lt;p&gt;This feature of Lumo should be considered pre-alpha, and we will continue to improve
it over the coming releases. I decided to release it nevertheless, with the objective
of gathering initial feedback and hopefully attracting a few new contributors to
Lumo. Please report &lt;a href=&quot;https://github.com/anmonteiro/lumo/issues&quot;&gt;issues&lt;/a&gt;, and
if you want to help, do get in touch (e.g. on &lt;a href=&quot;https://twitter.com/_anmonteiro&quot;&gt;Twitter&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;As a final remark, no JVMs were spawned during the process of writing this blog post.&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&quot;fn:1&quot;&gt;
  &lt;sup&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/sup&gt; &lt;sub&gt;Lumo 1.2.0 is still not in Homebrew due to technical
issues. You can install from master with &lt;code&gt;brew install --HEAD lumo&lt;/code&gt;.
  &lt;a href=&quot;#fnref:1&quot;&gt;&lt;img draggable=&quot;false&quot; class=&quot;emoji&quot; alt=&quot;&amp;#x21A9;&quot; src=&quot;/public/img/top.svg&quot;&gt;&lt;/a&gt;&lt;/sub&gt;
&lt;/div&gt;
&lt;br&gt;
*&lt;small&gt;Thanks to &lt;a href=&quot;https://twitter.com/mfikes&quot;&gt;Mike Fikes&lt;/a&gt; and
&lt;a href=&quot;https://twitter.com/swannodette&quot;&gt;David Nolen&lt;/a&gt;
for reading a draft of this post.&lt;/small&gt;*</content:encoded></item><item><title><![CDATA[The fastest Clojure REPL in the world]]></title><description><![CDATA[
One common complaint of Clojure REPLs is their [startup time](http://puredanger.github.io/tech.puredanger.com/2013/12/01/clj-problems/).
Although that complaint is often somewhat unfounded (and related to tooling), it
still takes the bare Clojure JAR about 1 second to start on new hardware. [Planck](http://planck-repl.org)
â€” through bootstrapped ClojureScript, and owing to the small latency exhibited by
JavaScript VMs â€” managed to improve the time that it takes to bootstrap a Clojure(Script)
REPL. A new kid on the block promises to perform even faster. Read on!

]]></description><link>https://anmonteiro.com/2016/11/the-fastest-clojure-repl-in-the-world/</link><guid isPermaLink="false">https://anmonteiro.com/2016/11/the-fastest-clojure-repl-in-the-world/</guid><pubDate>Wed, 09 Nov 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;One common complaint of Clojure REPLs is their &lt;a href=&quot;http://puredanger.github.io/tech.puredanger.com/2013/12/01/clj-problems/&quot;&gt;startup time&lt;/a&gt;.
Although that complaint is often somewhat unfounded (and related to tooling), it
still takes the bare Clojure JAR about 1 second to start on new hardware. &lt;a href=&quot;http://planck-repl.org&quot;&gt;Planck&lt;/a&gt;
â€” through bootstrapped ClojureScript, and owing to the small latency exhibited by
JavaScript VMs â€” managed to improve the time that it takes to bootstrap a Clojure(Script)
REPL. A new kid on the block promises to perform even faster. Read on!&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Not long ago, &lt;a href=&quot;https://twitter.com/craigandera&quot;&gt;Craig Andera&lt;/a&gt; mentioned on Twitter
that he had succeeded in compiling a ClojureScript application to a standalone native
executable, using a tool called &lt;a href=&quot;https://github.com/jaredallard/nexe&quot;&gt;Nexe&lt;/a&gt;:&lt;/p&gt;
&lt;div style=&quot;display:table;margin:0 auto 20px;&quot;&gt;
  &lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;
    &lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Just got ClojureScript -&amp;gt; Native EXE working via Node&amp;#39;s nexe. Nice.&lt;/p&gt;
    &amp;mdash; Craig Andera (@craigandera)
    &lt;a href=&quot;https://twitter.com/craigandera/status/778977347206864896&quot;&gt;September 22, 2016&lt;/a&gt;
  &lt;/blockquote&gt;
  &lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;Being a big fan of &lt;a href=&quot;https://twitter.com/mfikes&quot;&gt;Mike Fikes&lt;/a&gt;&apos;s Planck, its instant
startup and scripting capabilities, I was intrigued to validate the idea that we
could have something similar for the &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; platform. Whether
we like it or not, Node.js&apos;s &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;NPM&lt;/a&gt; is the &lt;a href=&quot;http://www.modulecounts.com/&quot;&gt;largest and fastest growing&lt;/a&gt;
package ecosystem today. Seamless interoperability with NPM plays a huge part in
extending ClojureScript&apos;s reach even further. And as it turns out, this is possible
today.&lt;/p&gt;
&lt;h2&gt;Introducing Lumo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/anmonteiro/lumo&quot;&gt;Lumo&lt;/a&gt; is a fast, standalone ClojureScript REPL
that runs on Node.js and &lt;a href=&quot;https://developers.google.com/v8/&quot;&gt;V8&lt;/a&gt;. Thanks to V8&apos;s
&lt;a href=&quot;http://v8project.blogspot.com/2015/09/custom-startup-snapshots.html&quot;&gt;custom startup snapshots&lt;/a&gt;,
Lumo starts up instantaneously, making it the fastest Clojure REPL in existence
&lt;sup id=&quot;fnref:1&quot;&gt;&lt;sub&gt;&lt;a href=&quot;#fn:1&quot;&gt;1&lt;/a&gt;&lt;/sub&gt;&lt;/sup&gt;. Here&apos;s a rundown comparison
of Clojure, Planck and Lumo&apos;s startup times.&lt;/p&gt;
&lt;div style=&quot;margin:-20px auto&quot;&gt;
  &lt;img style=&quot;margin:0&quot; src=&quot;https://cloud.githubusercontent.com/assets/661909/20039553/440a3554-a446-11e6-9478-91229ccc21ab.png&quot;&gt;
&lt;/div&gt;
&lt;p&gt;Lumo employs some tricks to be extremely fast. Some of these (&lt;a href=&quot;http://blog.fikesfarm.com/posts/2015-11-26-planck-caching.html&quot;&gt;caching&lt;/a&gt;,
&lt;a href=&quot;http://blog.fikesfarm.com/posts/2016-01-04-planck-lazy-analysis-cache-loading.html&quot;&gt;lazy analysis cache loading&lt;/a&gt;
and &lt;a href=&quot;http://blog.fikesfarm.com/posts/2016-02-03-planck-macros-aot.html&quot;&gt;AOT-compiled macros&lt;/a&gt;)
were directly inspired by Planck. Others, such as the V8 startup snapshot feature
that is not present in JavaScriptCore, will be the focus of subsequent posts in
this blog.&lt;/p&gt;
&lt;p&gt;Oh, and did I mention Lumo is cross-platform? Here&apos;s a screenshot of it happily
running on Windows:&lt;/p&gt;
&lt;div style=&quot;margin:30px auto&quot;&gt;
  &lt;img style=&quot;max-width:80%;margin:20px auto&quot; src=&quot;https://cloud.githubusercontent.com/assets/661909/20039745/71c051ce-a449-11e6-9ebb-c01d813c1980.png&quot;&gt;
&lt;/div&gt;
&lt;h2&gt;Peeking into the future&lt;/h2&gt;
&lt;p&gt;Lumo is not complete by any means. The initial release has a substantial set of features
(while we work on setting up a documentation website, you can get a notion of these
by running &lt;code class=&quot;language-text&quot;&gt;lumo -h&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;lumo --help&lt;/code&gt;), but many more are expected to arrive in
the near future. Among these are ergonomic additions such as cursor hopping, pretty
printing and colored output, as well as idiomatic ClojureScript wrappers for Node&apos;s
APIs, such as performing I/O calls, spawning child processes and more.&lt;/p&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Lumo is free and &lt;a href=&quot;https://github.com/anmonteiro/lumo&quot;&gt;open source&lt;/a&gt;. I think it can
serve numerous purposes, many of which I&apos;m unable to predict. I also think that&apos;s
a good thing. If you want to try it out, there are standalone binaries for Mac, Windows
and Linux &lt;a href=&quot;https://github.com/anmonteiro/lumo/releases/latest&quot;&gt;here&lt;/a&gt;. Be sure to
let me know what you think! I&apos;m &lt;a href=&quot;https://twitter.com/_anmonteiro&quot;&gt;@_anmonteiro&lt;/a&gt;
on Twitter.&lt;/p&gt;
&lt;p&gt;I&apos;m curious to learn how you will use Lumo. Thanks for reading!&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&quot;fn:1&quot;&gt;
  &lt;sup&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/sup&gt; &lt;sub&gt;or rather, the one with fastest startup. Lumo runs
bootstrapped ClojureScript, and compiling ClojureScript in JavaScript is generally
slower than compiling ClojureScript on the JVM.
  &lt;a href=&quot;#fnref:1&quot;&gt;&lt;img draggable=&quot;false&quot; class=&quot;emoji&quot; alt=&quot;&amp;#x21A9;&quot; src=&quot;/public/img/top.svg&quot;&gt;&lt;/a&gt;&lt;/sub&gt;
&lt;/div&gt;
&lt;br&gt;
*&lt;small&gt;Thanks to &lt;a href=&quot;https://twitter.com/mfikes&quot;&gt;Mike Fikes&lt;/a&gt; for reading a draft of this post.&lt;/small&gt;*</content:encoded></item><item><title><![CDATA[ClojureScript `require` outside `ns`]]></title><description><![CDATA[
The next version of the ClojureScript compiler adds support for using `require`
outside of the `ns` form. Owing to ClojureScript's compilation model, however, there
exist subtle differences with respect to the behavior that Clojure provides. Read
on to learn more.

]]></description><link>https://anmonteiro.com/2016/10/clojurescript-require-outside-ns/</link><guid isPermaLink="false">https://anmonteiro.com/2016/10/clojurescript-require-outside-ns/</guid><pubDate>Sat, 01 Oct 2016 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The next version of the ClojureScript compiler adds support for using &lt;code class=&quot;language-text&quot;&gt;require&lt;/code&gt;
outside of the &lt;code class=&quot;language-text&quot;&gt;ns&lt;/code&gt; form. Owing to ClojureScript&apos;s compilation model, however, there
exist subtle differences with respect to the behavior that Clojure provides. Read
on to learn more.&lt;/p&gt;
&lt;!--more--&gt;
&lt;div class=&quot;message&quot;&gt;
  &lt;strong style=&quot;text-decoration:underline&quot;&gt;Update:&lt;/strong&gt; This has been released
  as part of ClojureScript version 1.9.293.
&lt;/div&gt;
&lt;div style=&quot;margin:20px&quot;&gt;
  &lt;img style=&quot;max-width: 70%;margin:0 auto&quot; src=&quot;https://cloud.githubusercontent.com/assets/661909/19021756/7a918376-88c0-11e6-9449-dc8a595e3b20.jpg&quot;&gt;
&lt;/div&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Ever since its inception, ClojureScript has always required files to provide a namespace
declaration at the top. A hard requirement like that is sometimes counterproductive
when we just want to try something out quickly. Besides, it doesn&apos;t mimic Clojure&apos;s
behavior very well, where it assumes you&apos;re in the default &lt;code class=&quot;language-text&quot;&gt;user&lt;/code&gt; namespace when
a namespace declaration is not provided. In addition, forms like &lt;code class=&quot;language-text&quot;&gt;require&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;use&lt;/code&gt;
and &lt;code class=&quot;language-text&quot;&gt;import&lt;/code&gt; were never supported outside of the ClojureScript REPL, and even those
were implemented as a hack on top of &lt;code class=&quot;language-text&quot;&gt;ns&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A number of tickets (&lt;a href=&quot;http://dev.clojure.org/jira/browse/CLJS-1277&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;http://dev.clojure.org/jira/browse/CLJS-1346&quot;&gt;2&lt;/a&gt;)
had been lying around in ClojureScript&apos;s issue tracker to address these shortcomings.
Now, a &lt;a href=&quot;https://github.com/clojure/clojurescript/commit/b5147bfeb1e8034e93014e35bb27c9fb4d9c10de&quot;&gt;recent addition&lt;/a&gt;
to the compiler (coming in the next release) fixes these issues, paving the way for
a number of enhancements coming to ClojureScript in the near future.&lt;/p&gt;
&lt;h2&gt;Differences from Clojure&lt;/h2&gt;
&lt;p&gt;In Clojure, you can &lt;code class=&quot;language-text&quot;&gt;require&lt;/code&gt; namespaces dynamically into your namespace, load code
conditionally and at arbitrary nesting levels. In ClojureScript, this is not the
case, mostly due to the static nature of namespaces in the Google Closure Library.
Consequently, there are couple of rules to abide by when calling &lt;code class=&quot;language-text&quot;&gt;require&lt;/code&gt; and similar
forms (&lt;code class=&quot;language-text&quot;&gt;use&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;use-macros&lt;/code&gt;, etc.) in ClojureScript:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A file can have one of:&lt;/li&gt;
&lt;li&gt;a namespace declaration, &lt;strong&gt;or&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;(possibly several) &lt;code class=&quot;language-text&quot;&gt;require&lt;/code&gt; forms, &lt;strong&gt;or&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;none of the above, in the case it doesn&apos;t depend on any other namespace.&lt;/li&gt;
&lt;li&gt;when present, &lt;code class=&quot;language-text&quot;&gt;require&lt;/code&gt; forms must appear at the top of a file.&lt;/li&gt;
&lt;li&gt;All the definitions in a file without a namespace declaration are interned in
the &lt;code class=&quot;language-text&quot;&gt;cljs.user&lt;/code&gt; namespace &lt;sup id=&quot;fnref:1&quot;&gt;&lt;sub&gt;&lt;a href=&quot;#fn:1&quot;&gt;1&lt;/a&gt;&lt;/sub&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Because this new feature is currently unreleased, the only way you can try it out
today is by &lt;a href=&quot;https://github.com/clojure/clojurescript/wiki/Building-the-compiler&quot;&gt;building the compiler&lt;/a&gt;
uberjar (with &lt;code class=&quot;language-text&quot;&gt;script/uberjar&lt;/code&gt;). Below is an example you can use to guide you through
this new addition.&lt;/p&gt;
&lt;p&gt;Create a project with the following structure:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;project
â”œâ”€ src
â”‚  â””â”€ foo.cljs
â””â”€ cljs.jar&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;code class=&quot;language-text&quot;&gt;foo.cljs&lt;/code&gt;, place the contents below. As an aside, note that we&apos;re taking advantage
of &lt;a href=&quot;http://blog.fikesfarm.com/posts/2016-07-03-clojurescript-clojure-namespace-aliasing.html&quot;&gt;Clojure namespace aliasing&lt;/a&gt;
(&lt;a href=&quot;http://dev.clojure.org/jira/browse/CLJS-1692&quot;&gt;JIRA ticket&lt;/a&gt;) and
&lt;a href=&quot;http://dev.clojure.org/jira/browse/CLJS-1507&quot;&gt;implicit macro loading&lt;/a&gt;. This too â€”
as one might expect â€” works outside the namespace declaration.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; src/foo.cljs&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;require &apos;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;clojure.&lt;span class=&quot;token keyword&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;deftest is run-tests&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;deftest failing-test
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;is &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;run-tests&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the &lt;code class=&quot;language-text&quot;&gt;cljs.jar&lt;/code&gt; uberjar in place, running the following command will land you
directly in a ClojureScript Node.js REPL (&lt;em&gt;note&lt;/em&gt;: requires a Node.js installation).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ java -cp src:cljs.jar clojure.main -e &lt;span class=&quot;token string&quot;&gt;&quot;(require &apos;cljs.repl) (require &apos;cljs.repl.node) (cljs.repl/repl (cljs.repl.node/repl-env))&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you can load the file into the REPL and see it execute!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;ClojureScript Node.js REPL server listening on &lt;span class=&quot;token number&quot;&gt;53518&lt;/span&gt;
To quit&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type: &lt;span class=&quot;token operator&quot;&gt;:cljs&lt;/span&gt;/quit

cljs.user=&lt;span class=&quot;token keyword&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;load-file&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;src/foo.cljs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

Testing cljs.user

FAIL in &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;failing-test&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;at .cljs_node_repl/cljs/&lt;span class=&quot;token keyword&quot;&gt;test&lt;/span&gt;.js:&lt;span class=&quot;token number&quot;&gt;432&lt;/span&gt;:&lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
expected: &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
  actual: &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;

Ran &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; tests containing &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; assertions.
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; failures&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; errors.
&lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;
cljs.user=&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&apos;ve also captured all the above in a &lt;a href=&quot;https://gist.github.com/anmonteiro/478fc609c297cfd1217ebb9890ceba08&quot;&gt;gist&lt;/a&gt;
that you can refer back to later.&lt;/p&gt;
&lt;h2&gt;Parting thoughts&lt;/h2&gt;
&lt;p&gt;This addition unlocked a number of new possibilities for ClojureScript, which are
already bearing fruits. First of all, it already allowed us to
&lt;a href=&quot;https://github.com/clojure/clojurescript/commit/c9c122&quot;&gt;delete a ton of hacky code&lt;/a&gt;
that made &lt;code class=&quot;language-text&quot;&gt;require&lt;/code&gt; work in REPLs. In a very near future, it will allow ClojureScript
to add a number of new exciting features, one of which is support for
&lt;a href=&quot;http://dev.clojure.org/jira/browse/CLJS-1194&quot;&gt;extensible tagged literals&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&quot;fn:1&quot;&gt;
  &lt;sup&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/sup&gt; &lt;sub&gt;If a &lt;code&gt;ns&lt;/code&gt; form
  is not present, a generated namespace will be provided in the form of
  &lt;code class=&quot;highlighter-rouge&quot;&gt;cljs.user.file_nameXXXX&lt;/code&gt;, where
  &lt;code class=&quot;highlighter-rouge&quot;&gt;XXXX&lt;/code&gt; are the first characters of the filenames&amp;apos;s
  SHA1 hash. This implementation detail effectively works around the fact that the
  Google Closure Library requires files to provide different namespaces.
  &lt;a href=&quot;#fnref:1&quot;&gt;&lt;img draggable=&quot;false&quot; class=&quot;emoji&quot; alt=&quot;&amp;#x21A9;&quot; src=&quot;/public/img/top.svg&quot;&gt;&lt;/a&gt;&lt;/sub&gt;
&lt;/div&gt;
&lt;br&gt;
*&lt;small&gt;Thanks to &lt;a href=&quot;https://twitter.com/mfikes&quot;&gt;Mike Fikes&lt;/a&gt; for reading a draft of this post.&lt;/small&gt;*</content:encoded></item><item><title><![CDATA[Om Next internals: Incremental Rendering]]></title><description><![CDATA[
The phrase "incremental rendering" is frequently thrown around in the context of
Om Next's design. This post is an attempt to clarify what the concept of incremental rendering is
all about, what it does for your Om Next applications and how you can take advantage
of its properties.


]]></description><link>https://anmonteiro.com/2016/09/om-next-internals-incremental-rendering/</link><guid isPermaLink="false">https://anmonteiro.com/2016/09/om-next-internals-incremental-rendering/</guid><pubDate>Wed, 28 Sep 2016 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The phrase &quot;incremental rendering&quot; is frequently thrown around in the context of
Om Next&apos;s design. This post is an attempt to clarify what the concept of incremental rendering is
all about, what it does for your Om Next applications and how you can take advantage
of its properties.&lt;/p&gt;
&lt;!--more--&gt;
&lt;div style=&quot;margin-bottom:30px&quot;&gt;
  &lt;img style=&quot;max-width:45%;margin:0 auto&quot; src=&quot;https://cloud.githubusercontent.com/assets/661909/18785824/d4a58916-819a-11e6-8ed4-13165501e9b9.png&quot;&gt;
&lt;/div&gt;
&lt;h2&gt;First things first&lt;/h2&gt;
&lt;p&gt;Some of the properties behind Om Next&apos;s design make it possible to perform a number
of optimizations under the hood. These optimizations are mostly driven by the fact
that components are annotated with query expressions and identity. One example of
such optimizations is behind the &lt;a href=&quot;https://github.com/omcljs/om/pull/650&quot;&gt;solution&lt;/a&gt;
for &lt;a href=&quot;https://github.com/omcljs/om/issues/556&quot;&gt;issue #556&lt;/a&gt;: transacting large values
or reading large data sets is not slow anymore &lt;sup id=&quot;fnref:1&quot;&gt;&lt;sub&gt;&lt;a href=&quot;#fn:1&quot;&gt;1&lt;/a&gt;&lt;/sub&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Incremental rendering is another such optimization in Om Next, based on its knowledge
about an application&apos;s data requirements. In plain React, re-rendering always initiates
at the &lt;strong&gt;root component&lt;/strong&gt;, whether its children (in the tree) end up updating or
not. This means that each node in the component tree gets asked if it needs to update
â€” via the &lt;code class=&quot;language-text&quot;&gt;shouldComponentUpdate&lt;/code&gt; lifecycle method. Om Next, on the other hand, knows
exactly what data components need, which means it can always start diffing their
props at the root of the &lt;strong&gt;concrete subtrees&lt;/strong&gt; that need the data related to transactions.
The next image compares React and Om Next&apos;s updating phases after a transaction that
originated at the red node.&lt;/p&gt;
&lt;div style=&quot;display:table; margin: 30px 0&quot;&gt;
  &lt;figure style=&quot;display:table-cell&quot;&gt;
    &lt;img style=&quot;max-width:50%; margin: 0 auto&quot; src=&quot;https://cloud.githubusercontent.com/assets/661909/18786506/87c5eb28-819e-11e6-8610-af5217738dee.png&quot; alt=&quot;React rendering&quot;&gt;
    &lt;figcaption class=&quot;caption&quot;&gt;React&amp;apos;s update phase&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;figure style=&quot;display:table-cell&quot;&gt;
    &lt;img style=&quot;max-width:50%; margin: 0 auto&quot; src=&quot;https://cloud.githubusercontent.com/assets/661909/18786505/87a29114-819e-11e6-8aa5-c50ea811e06f.png&quot; alt=&quot;Om Next rendering&quot;&gt;
    &lt;figcaption class=&quot;caption&quot;&gt;Om Next&amp;apos;s update phase&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;
&lt;h2&gt;How can this work?&lt;/h2&gt;
&lt;p&gt;Astute readers might now be asking themselves â€” but how can incremental rendering
be made to work, if the Om Next parser dispatches on the top-level keys in a query?
Well, that&apos;s the entire purpose of path metadata and &lt;code class=&quot;language-text&quot;&gt;om.next/full-query&lt;/code&gt;. When
updating a subtree, Om Next does two things. Firstly, it calls the parser with the
&lt;code class=&quot;language-text&quot;&gt;full-query&lt;/code&gt; of the component rooted at that subtree â€” which is really just a fancy
way of saying &quot;give me a query starting at the root of my application, but narrowly
focused at the current component&apos;s query&quot;. It then extracts the data relevant to
the component that is updating, which is located at its data path. Cool stuff, right?
Even better, this behavior is extensible through the &lt;code class=&quot;language-text&quot;&gt;:ui-&amp;gt;props&lt;/code&gt; key in the reconciler!&lt;/p&gt;
&lt;p&gt;If the above sounded too dense, here&apos;s a practical example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Say we have an application that shows 2 tabs. We might have the components below:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui TabInfo
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:info&lt;/span&gt;/id &lt;span class=&quot;token operator&quot;&gt;:info&lt;/span&gt;/&lt;span class=&quot;token keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:info&lt;/span&gt;/items&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui Tab
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tab&lt;/span&gt;/title &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tab&lt;/span&gt;/info &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/get-query TabInfo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui Root
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tab1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/get-query Tab&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tab2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/get-query Tab&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Now let&apos;s imagine that the &lt;code class=&quot;language-text&quot;&gt;TabInfo&lt;/code&gt; component in tab #2 has performed a transaction
that adds more items to its &lt;code class=&quot;language-text&quot;&gt;:info/items&lt;/code&gt; list. Check out the differences below
between the application&apos;s root query and the &lt;code class=&quot;language-text&quot;&gt;full-query&lt;/code&gt; of the transacting component:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; Application&apos;s root query&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tab1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tab&lt;/span&gt;/title
         &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tab&lt;/span&gt;/info &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:info&lt;/span&gt;/id &lt;span class=&quot;token operator&quot;&gt;:info&lt;/span&gt;/&lt;span class=&quot;token keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:info&lt;/span&gt;/items&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tab2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tab&lt;/span&gt;/title
         &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tab&lt;/span&gt;/info &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:info&lt;/span&gt;/id &lt;span class=&quot;token operator&quot;&gt;:info&lt;/span&gt;/&lt;span class=&quot;token keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:info&lt;/span&gt;/items&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; `om.next/full-query` of tab #2&apos;s `TabInfo`&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tab2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tab&lt;/span&gt;/info &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:info&lt;/span&gt;/id &lt;span class=&quot;token operator&quot;&gt;:info&lt;/span&gt;/&lt;span class=&quot;token keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:info&lt;/span&gt;/items&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, the &lt;code class=&quot;language-text&quot;&gt;full-query&lt;/code&gt; is narrowly focused at the specific data requirements
that &lt;code class=&quot;language-text&quot;&gt;TabInfo&lt;/code&gt; declares. Two beneficial consequences follow: for one thing, it allows
the parser to dispatch on the same key as the root query; additionally, it makes
&lt;code class=&quot;language-text&quot;&gt;om.next/db-&amp;gt;tree&lt;/code&gt;&apos;s data denormalization perform faster, as we&apos;re only interested
in a specific subset of the data when compared to the application&apos;s root query.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What about the &quot;data path&quot; mentioned above? What is that?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The data path of a given component is simply a vector of keywords that describe how
we can get to the query of a given component starting from the query of an applications&apos;
root component. In our example above, the path of tab #2&apos;s &lt;code class=&quot;language-text&quot;&gt;TabInfo&lt;/code&gt; would be
&lt;code class=&quot;language-text&quot;&gt;[:tab2 :tab/info]&lt;/code&gt;. This means that Om Next can simply use &lt;code class=&quot;language-text&quot;&gt;get-in&lt;/code&gt; in the result
of parsing and pass the correct data to the updating component(s).&lt;/p&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;I hope this article helps you understand some of the inner workings that make Om
Next awesome :-) In a next post, I&apos;ll talk about how we can optimize incremental
rendering even further with &quot;path optimization&quot;.&lt;/p&gt;
&lt;p&gt;Stay tuned, and thanks for reading!&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&quot;fn:1&quot;&gt;
  &lt;sup&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/sup&gt; &lt;sub&gt;Om Next&amp;apos;s props are annotated with their &amp;quot;path&amp;quot; for
various internal purposes. Before, we naively walked the data structure that resulted
from parsing. Now we follow the data along the query path and only annotate the
matches. &lt;a href=&quot;#fnref:1&quot;&gt;&lt;img draggable=&quot;false&quot; class=&quot;emoji&quot; alt=&quot;&amp;#x21A9;&quot; src=&quot;/public/img/top.svg&quot;&gt;&lt;/a&gt;&lt;/sub&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Om Next Server-Side Rendering]]></title><description><![CDATA[
Just recently, Om Next added support for server-side rendering. This is a very exciting
addition, which greatly improves Om's fullstack story, making it possible to add
considerable performance improvements to your app's initial render.

]]></description><link>https://anmonteiro.com/2016/09/om-next-server-side-rendering/</link><guid isPermaLink="false">https://anmonteiro.com/2016/09/om-next-server-side-rendering/</guid><pubDate>Wed, 14 Sep 2016 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Just recently, Om Next added support for server-side rendering. This is a very exciting
addition, which greatly improves Om&apos;s fullstack story, making it possible to add
considerable performance improvements to your app&apos;s initial render.&lt;/p&gt;
&lt;!--more--&gt;
&lt;div style=&quot;margin:30px&quot;&gt;
  &lt;img style=&quot;max-width:45%;margin:0 auto&quot; src=&quot;https://cloud.githubusercontent.com/assets/661909/18569433/75929366-7b9a-11e6-9e91-2d7b98cc1ac2.png&quot;&gt;
&lt;/div&gt;
&lt;p&gt;A &lt;a href=&quot;https://github.com/omcljs/om/pull/764&quot;&gt;recent change&lt;/a&gt; to the Om project adds the
possibility to render Om Next components to a string. This feature resonates really
well with the fullstack story that Om Next aims to provide. Additionally, it has
great potential for making Om Next apps render much faster, by including all the
markup in initial server responses, which React would only render when the browser
loaded the app&apos;s JavaScript.&lt;/p&gt;
&lt;p&gt;Om Next&apos;s approach to server-side rendering had been developed on the separate
&lt;a href=&quot;https://github.com/ladderlife/cellophane&quot;&gt;Cellophane repository&lt;/a&gt; for some time,
inspired by the concepts presented in the very insightful
&lt;a href=&quot;https://www.youtube.com/watch?v=fICC26GGBpg&quot;&gt;&quot;Optimizing ClojureScript Apps For Speed&quot;&lt;/a&gt;
talk by &lt;a href=&quot;https://twitter.com/arohner&quot;&gt;Allen Rohner&lt;/a&gt;, and his &lt;a href=&quot;https://github.com/arohner/foam&quot;&gt;Foam&lt;/a&gt;
project.&lt;/p&gt;
&lt;p&gt;Everything that is necessary to render an entire Om Next application to a string
runs entirely in the JVM, via Clojure, without involving React or JavaScript at
any stage. What really is very exciting about Om Next server-side rendering (to me, at
least!) are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the returned markup gets picked up by React. This means that the
&lt;a href=&quot;https://facebook.github.io/react/docs/top-level-api.html#reactdomserver.rendertostring&quot;&gt;DOM elements are preserved and React only attaches event handlers&lt;/a&gt;.
Pretty cool, huh?&lt;/li&gt;
&lt;li&gt;it&apos;s blazingly fast: at least 2x faster than &lt;a href=&quot;https://github.com/weavejester/hiccup&quot;&gt;Hiccup&lt;/a&gt;.
There are some &lt;a href=&quot;https://github.com/ladderlife/cellophane/blob/master/perf/cellophane/perf.clj&quot;&gt;performance benchmarks&lt;/a&gt;
in the Cellophane repo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What&apos;s more, and probably expected, is that the API is exactly the same. Here&apos;s a
very simple example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; my-project.core
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:require&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;om.&lt;span class=&quot;token keyword&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:as&lt;/span&gt; om &lt;span class=&quot;token operator&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;defui&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;om.dom &lt;span class=&quot;token operator&quot;&gt;:as&lt;/span&gt; dom&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui SimpleComponent
  Object
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;render &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dom/div &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello, world!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; simple-factory &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/factory SimpleComponent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dom/render-to-str &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;simple-factory&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;;; &quot;&amp;lt;div data-reactroot=\&quot;\&quot; data-reactid=\&quot;1\&quot; data-react-checksum=\&quot;1632637923\&quot;&gt;Hello, world!&amp;lt;/div&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&apos;ve also put together a &lt;a href=&quot;https://github.com/anmonteiro/om-next-fullstack&quot;&gt;repository&lt;/a&gt;
with a fullstack example application that demonstrates how to hook up server-side
rendering in your own Om Next app. I encourage you try it out. To make sure it is
indeed working, go ahead and disable JavaScript! Meanwhile, server-side rendering
is now part of the &lt;code class=&quot;language-text&quot;&gt;1.0.0-alpha45&lt;/code&gt; release.&lt;/p&gt;
&lt;p&gt;Hit me up with any questions you might have in the comments below or on Twitter,
&lt;a href=&quot;https://twitter.com/_anmonteiro&quot;&gt;@_anmonteiro&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Om Next at Full Stack Fest 2016]]></title><description><![CDATA[
On the 6th of September, I had the pleasure to speak at [Full Stack Fest 2016](https://2016.fullstackfest.com/)
in Barcelona. The talk has been recorded and you can find a link to the video below.

]]></description><link>https://anmonteiro.com/2016/09/om-next-at-full-stack-fest-2016/</link><guid isPermaLink="false">https://anmonteiro.com/2016/09/om-next-at-full-stack-fest-2016/</guid><pubDate>Tue, 13 Sep 2016 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On the 6th of September, I had the pleasure to speak at &lt;a href=&quot;https://2016.fullstackfest.com/&quot;&gt;Full Stack Fest 2016&lt;/a&gt;
in Barcelona. The talk has been recorded and you can find a link to the video below.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;This talk was a slightly different version of the one I gave
&lt;a href=&quot;2016/05/clients-in-control-om-next-craft-conf-2016&quot;&gt;earlier this year&lt;/a&gt;
in Budapest. I also gave it the same title: &lt;em&gt;&quot;Clients in control: building demand-driven
systems with Om Next&quot;&lt;/em&gt;. It touches on the motivation for Om Next&apos;s appearance, its
influences in the JavaScript world, and the bits and pieces that make it stand out
from its counterparts.&lt;/p&gt;
&lt;p&gt;The target of this talk was a general audience (mostly JavaScript developers), so
I couldn&apos;t go too much into Clojure-y specifics.&lt;/p&gt;
&lt;p&gt;You can watch a video of it below. I&apos;ve also published the
&lt;a href=&quot;https://speakerdeck.com/anmonteiro/clients-in-control-building-demand-driven-systems-with-om-next-1&quot;&gt;slides&lt;/a&gt;.&lt;/p&gt;
&lt;div style=&quot;position:relative;width:100%;display:block;text-align:center;margin-bottom:30px;&quot;&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Zb18iPjDgwM&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Hope you enjoy it. Thanks for reading!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Om Next and Bootstrapped ClojureScript]]></title><description><![CDATA[
A small number of changes to Om Next makes it possible to use it from self-hosted
ClojureScript environments. Read on!

]]></description><link>https://anmonteiro.com/2016/08/om-next-and-bootstrapped-clojurescript/</link><guid isPermaLink="false">https://anmonteiro.com/2016/08/om-next-and-bootstrapped-clojurescript/</guid><pubDate>Tue, 23 Aug 2016 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;A small number of changes to Om Next makes it possible to use it from self-hosted
ClojureScript environments. Read on!&lt;/p&gt;
&lt;!--more--&gt;
&lt;div class=&quot;message&quot;&gt;
  &lt;strong style=&quot;text-decoration:underline&quot;&gt;Update:&lt;/strong&gt; Starting at version
  1.0.0-alpha42, Om Next now includes support for Bootstrap ClojureScript.
&lt;/div&gt;
&lt;div style=&quot;margin:20px&quot;&gt;
  &lt;img style=&quot;max-width:50%;margin:0 auto&quot; src=&quot;https://cloud.githubusercontent.com/assets/661909/17913293/e86948ba-6990-11e6-8b7d-ba5586d60b12.png&quot;&gt;
&lt;/div&gt;
&lt;p&gt;Something that doesn&apos;t cease to amaze me, even after more than a year now, is that
&lt;a href=&quot;http://swannodette.github.io/2015/07/29/clojurescript-17&quot;&gt;ClojureScript can compile itself&lt;/a&gt;.
The possibilities are immense, and so far we have only touched the tip of the iceberg.
There are however some caveats to it, which means that not every library out there
can work with &lt;a href=&quot;http://blog.fikesfarm.com/posts/2015-07-17-what-is-bootstrapped-clojurescript.html&quot;&gt;Bootstrapped ClojureScript&lt;/a&gt;.
But achieving compatibility is usually not troublesome, and there even exists a
&lt;a href=&quot;http://blog.fikesfarm.com/posts/2016-05-15-bootstrap-core-async.html&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;core.async&lt;/code&gt; fork&lt;/a&gt;
which works in self-hosted environments.&lt;/p&gt;
&lt;p&gt;With this in mind, I set out to discover what changes would be required for
Om Next to work in bootstrapped Clojurescript environments such as &lt;a href=&quot;http://planck-repl.org/&quot;&gt;Planck&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was set for a surprise. As it turns out, only a very small number of &lt;a href=&quot;https://github.com/omcljs/om/pull/752&quot;&gt;changes&lt;/a&gt;
are required for Om Next to work in Planck. I&apos;ve prepared a &lt;a href=&quot;https://gist.github.com/anmonteiro/4bf3982a0c301535b022709d58a1e94a&quot;&gt;simple script&lt;/a&gt;
which you can run to try out all this goodness right now. It only requires that
you have Planck 1.12 or higher installed.&lt;/p&gt;
&lt;p&gt;Below is an example of running Om Next in bootstrapped ClojureScript. Obviously
we can&apos;t use actual DOM rendering as Planck doesn&apos;t run in a browser context, but
React server rendering comes to the rescue!&lt;/p&gt;
&lt;p&gt;{% gist anmonteiro/4bf3982a0c301535b022709d58a1e94a planck-out.cljs %}&lt;/p&gt;
&lt;p&gt;While I currently only envision myself using Om Next in self hosted environments
to try out the casual snippet or clarify a user question, I suspect it will start
being used in an unforeseen number of cases in the foreseeable future.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[ClojureScript `require` now supports `:rename`]]></title><description><![CDATA[
There exist a [number of differences](https://github.com/clojure/clojurescript/wiki/Differences-from-Clojure) between Clojure and ClojureScript, especially concerning [namespace declarations](https://github.com/clojure/clojurescript/wiki/Differences-from-Clojure#namespaces) and `require` specifications. Some of these differences have recently been addressed with the introduction of [Clojure namespace aliasing](http://blog.fikesfarm.com/posts/2016-07-03-clojurescript-clojure-namespace-aliasing.html) ([JIRA ticket](http://dev.clojure.org/jira/browse/CLJS-1692)) and [implicit macro loading](http://dev.clojure.org/jira/browse/CLJS-1507). A further upcoming enhancement introduces the possibility to `:rename` referred symbols in dependency specifications.


]]></description><link>https://anmonteiro.com/2016/08/clojurescript-require-now-supports-rename/</link><guid isPermaLink="false">https://anmonteiro.com/2016/08/clojurescript-require-now-supports-rename/</guid><pubDate>Tue, 09 Aug 2016 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;There exist a &lt;a href=&quot;https://github.com/clojure/clojurescript/wiki/Differences-from-Clojure&quot;&gt;number of differences&lt;/a&gt; between Clojure and ClojureScript, especially concerning &lt;a href=&quot;https://github.com/clojure/clojurescript/wiki/Differences-from-Clojure#namespaces&quot;&gt;namespace declarations&lt;/a&gt; and &lt;code class=&quot;language-text&quot;&gt;require&lt;/code&gt; specifications. Some of these differences have recently been addressed with the introduction of &lt;a href=&quot;http://blog.fikesfarm.com/posts/2016-07-03-clojurescript-clojure-namespace-aliasing.html&quot;&gt;Clojure namespace aliasing&lt;/a&gt; (&lt;a href=&quot;http://dev.clojure.org/jira/browse/CLJS-1692&quot;&gt;JIRA ticket&lt;/a&gt;) and &lt;a href=&quot;http://dev.clojure.org/jira/browse/CLJS-1507&quot;&gt;implicit macro loading&lt;/a&gt;. A further upcoming enhancement introduces the possibility to &lt;code class=&quot;language-text&quot;&gt;:rename&lt;/code&gt; referred symbols in dependency specifications.&lt;/p&gt;
&lt;!--more--&gt;
&lt;div style=&quot;margin:20px&quot;&gt;
  &lt;img style=&quot;margin:0 auto&quot; src=&quot;https://cloud.githubusercontent.com/assets/661909/17553842/d9429ecc-5eff-11e6-97b2-08fe95d4fef5.jpg&quot;&gt;
&lt;/div&gt;
&lt;p&gt;Starting with the next version of Clojurescript, we&apos;ll be &lt;a href=&quot;http://dev.clojure.org/jira/browse/CLJS-1508&quot;&gt;able to use the &lt;code class=&quot;language-text&quot;&gt;:rename&lt;/code&gt; option&lt;/a&gt; when requiring dependencies. As with Clojure, &lt;code class=&quot;language-text&quot;&gt;:rename&lt;/code&gt; can be used under &lt;code class=&quot;language-text&quot;&gt;:require&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;:use&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;:refer-clojure&lt;/code&gt;. The following examples take us through the basics of how using &lt;code class=&quot;language-text&quot;&gt;:rename&lt;/code&gt; looks like in practice.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;code class=&quot;language-text&quot;&gt;require&lt;/code&gt; specifications, we can &lt;code class=&quot;language-text&quot;&gt;:rename&lt;/code&gt; referred symbols:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;cljs.user=&lt;span class=&quot;token keyword&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;require &apos;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;clojure.&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;intersection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
       #_=&lt;span class=&quot;token keyword&quot;&gt;&gt;&lt;/span&gt;                        &lt;span class=&quot;token operator&quot;&gt;:rename&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;intersection&lt;/span&gt; foo&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;
cljs.user=&lt;span class=&quot;token keyword&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;foo #&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; #&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
#&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Such is the case with &lt;code class=&quot;language-text&quot;&gt;:use&lt;/code&gt;. It is possible to &lt;code class=&quot;language-text&quot;&gt;:rename&lt;/code&gt; symbols referred with &lt;code class=&quot;language-text&quot;&gt;:only&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;cljs.user=&lt;span class=&quot;token keyword&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; foo.core
       #_=&lt;span class=&quot;token keyword&quot;&gt;&gt;&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:use&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;clojure.string &lt;span class=&quot;token operator&quot;&gt;:only&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;lower-case&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
       #_=&lt;span class=&quot;token keyword&quot;&gt;&gt;&lt;/span&gt;                         &lt;span class=&quot;token operator&quot;&gt;:rename&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;lower-case lc&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;
foo.core=&lt;span class=&quot;token keyword&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lc &lt;span class=&quot;token string&quot;&gt;&quot;FOO&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;code class=&quot;language-text&quot;&gt;:refer-clojure&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;:rename&lt;/code&gt; can be used with or without &lt;code class=&quot;language-text&quot;&gt;:excludes&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;cljs.user=&lt;span class=&quot;token keyword&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; foo.core
      #_ &lt;span class=&quot;token keyword&quot;&gt;=&lt;/span&gt;&gt;   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:refer-clojure&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:rename&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;map&lt;/span&gt; core-map&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;
foo.core=&lt;span class=&quot;token keyword&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;core-map &lt;span class=&quot;token keyword&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At the time of this writing, this enhancement is currently unreleased. However, you can try it out in two ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/clojure/clojurescript/wiki/Building-the-compiler&quot;&gt;build the ClojureScript compiler&lt;/a&gt; from master, or&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mfikes/planck#building&quot;&gt;build&lt;/a&gt; the &lt;a href=&quot;http://planck-repl.org/&quot;&gt;Planck&lt;/a&gt; bootstrapped REPL â€” &lt;a href=&quot;https://twitter.com/mfikes&quot;&gt;Mike Fikes&lt;/a&gt; has promptly updated the repository to use the ClojureScript commit that includes support for &lt;code class=&quot;language-text&quot;&gt;:rename&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
  &lt;span style=&quot;font-weight:bold&quot;&gt;Note:&lt;/span&gt; This feature is now part of ClojureScript releases since version 1.9.183.
&lt;/p&gt;
&lt;h3&gt;Parting thoughts&lt;/h3&gt;
&lt;p&gt;While there will always exist differences between Clojure and ClojureScript, this enhancement further narrows that gap and eases code portability between the two platforms.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The quest for a unified routing solution in Om Next]]></title><description><![CDATA[
There are several different options to implement routing in an Om Next application. However, any  one of those approaches is not straightforward to accomplish, and often requires more time than one would like to get right. Until now.

]]></description><link>https://anmonteiro.com/2016/06/the-quest-for-a-unified-routing-solution-in-om-next/</link><guid isPermaLink="false">https://anmonteiro.com/2016/06/the-quest-for-a-unified-routing-solution-in-om-next/</guid><pubDate>Sat, 11 Jun 2016 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;There are several different options to implement routing in an Om Next application. However, any  one of those approaches is not straightforward to accomplish, and often requires more time than one would like to get right. Until now.&lt;/p&gt;
&lt;!--more--&gt;
&lt;div class=&quot;message&quot;&gt;
  &lt;strong&gt;TL;DR&lt;/strong&gt;: I&apos;ve developed &lt;a href=&quot;https://github.com/anmonteiro/compassus&quot;&gt;Compassus&lt;/a&gt;, a routing library for Om Next.
&lt;/div&gt;
&lt;h4&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;The meaning that &lt;strong&gt;routing&lt;/strong&gt; is intended to convey throughout this post is the ability to swap UI components in and out of an application&apos;s main view according to some parameter (the &quot;selected route&quot;). This is not to be confused with URL or path navigation, terms that I will use where appropriate.&lt;/p&gt;
&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;Although my &lt;a href=&quot;2016/02/routing-in-om-next-a-catalog-of-approaches&quot;&gt;routing catalogue post&lt;/a&gt; details a number of different ways one can implement routing in an Om Next application, adding such a feature â€” which has mandatory presence in the type of applications we are building today â€” comes at a cost. Firstly, it is most definitely not straightforward for beginner users to integrate into their apps (and let&apos;s face it, given how long Om Next has been around, we are all beginners). Moreover, we end up writing an unavoidable amount of boilerplate code that will easily be repeated across every project we have to provide routing for. Finally, writing the parser code is quite challenging and a very probable source of bugs, especially when integrating remote calls.&lt;/p&gt;
&lt;h2&gt;Embracing tradeoffs&lt;/h2&gt;
&lt;p&gt;The fact that there are many different alternatives to approach routing implementations is at the same time a very good thing â€” it really shows how powerful Om Next is at providing enough building blocks that can be assembled in very flexible ways â€” and not such a great thing, exactly because there are so &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Paradox_of_Choice&quot;&gt;many alternatives&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Each choice comes with its own benefits, but is not short of tradeoffs. Routing with &lt;code class=&quot;language-text&quot;&gt;om.next/subquery&lt;/code&gt; is very concise, but it really only works for a bounded number of routes, provided each has its own React ref. Using &lt;code class=&quot;language-text&quot;&gt;om.next/set-query!&lt;/code&gt; is probably easier to implement due to simpler parser integration, but we lose the holistic view of the queries in our application. Routing via union queries is, in my personal opinion, the most powerful choice, but writing working parser code for every case is possibly much trickier than in every other scenario.&lt;/p&gt;
&lt;h2&gt;Settling for a solution&lt;/h2&gt;
&lt;p&gt;Stemming from both the above motivation and my own struggle to implement a routing solution in the various projects I&apos;ve been working on lately, I started thinking of ways to simplify all the work that needs to be put into integrating routing in an Om Next application. A usable solution for this problem would require working through several requirements:&lt;/p&gt;
&lt;style&gt;
ul li &gt; ul {
  margin-bottom: 0;
}
&lt;/style&gt;
&lt;ul&gt;
&lt;li&gt;An idiomatic, &lt;strong&gt;data-first representation&lt;/strong&gt; for application routes&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Automatic routing&lt;/strong&gt; from the route representation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A route representation should be enough to have working routing in an application&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Seamless integration with Om Next&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;without &lt;em&gt;a priori&lt;/em&gt; opinions about reconciler options&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Simplified (&lt;strong&gt;not limiting&lt;/strong&gt;) parser code for library consumers&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Built-in support for URL navigation and HTML5 browser history&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;providing seamless integration with existing routing libraries such as &lt;a href=&quot;https://github.com/juxt/bidi&quot;&gt;bidi&lt;/a&gt; and &lt;a href=&quot;https://github.com/gf3/secretary&quot;&gt;secretary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After working through these requirements, I settled for a solution. &lt;a href=&quot;https://github.com/compassus/compassus&quot;&gt;Compassus&lt;/a&gt; is the product of this work, and you can find more information in its &lt;a href=&quot;https://github.com/compassus/compassus&quot;&gt;GitHub repository&lt;/a&gt;. I&apos;ve also made the API docs available in &lt;a href=&quot;https://compassus.github.io/compassus/doc/1.0.0-alpha2/&quot;&gt;this link&lt;/a&gt;, as well as some &lt;a href=&quot;https://compassus.github.io/compassus/devcards&quot;&gt;devcards examples&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hope it is as useful for your applications&apos; routing needs as it has been for me. All feedback is appreciated. As always, thanks for reading!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;&lt;small&gt;Thanks to Tony Kay for reading a draft of this post.&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[&apos;Clients in control&apos; â€” Om Next at Craft Conference 2016]]></title><description><![CDATA[
At the end of April, I gave a talk about Om Next at [Craft Conf](http://craft-conf.com/) in Budapest. The talk was recorded and the link is below.

]]></description><link>https://anmonteiro.com/2016/05/clients-in-control-om-next-craft-conf-2016/</link><guid isPermaLink="false">https://anmonteiro.com/2016/05/clients-in-control-om-next-craft-conf-2016/</guid><pubDate>Fri, 13 May 2016 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;At the end of April, I gave a talk about Om Next at &lt;a href=&quot;http://craft-conf.com/&quot;&gt;Craft Conf&lt;/a&gt; in Budapest. The talk was recorded and the link is below.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;&lt;em&gt;&quot;Clients in control: building demand-driven systems with Om Next&quot;&lt;/em&gt; is what I decided to call it. It touches on the motivation for the appearance of systems like Falcor, Relay and Om Next, and presents a high-level overview of the ideas and implementation behind Om Next.&lt;/p&gt;
&lt;p&gt;The talk was targeted at a general audience, so I didn&apos;t go too much into Clojure(Script) specific parts. You can watch a video of it below. The slides and code I demoed are in this &lt;a href=&quot;https://github.com/anmonteiro/craftconf-demo&quot;&gt;repository&lt;/a&gt;.&lt;/p&gt;
&lt;div style=&quot;position:relative;width:100%;display:block;padding-bottom:56.25%;margin-bottom:20px;&quot;&gt;
  &lt;iframe width=&quot;100%&quot; height=&quot;100%&quot; src=&quot;https://www.ustream.tv/embed/recorded/86179814?html5ui&quot; allowfullscreen webkitallowfullscreen frameborder=&quot;0&quot; style=&quot;border: 0 none transparent;position:absolute;top: 0;left:0;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;At the end of my talk, I was gifted the piece below. What a lovely gift! I really loved the gesture.&lt;/p&gt;
&lt;div style=&quot;display:table;margin:0 auto;&quot;&gt;
  &lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;
    &lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;How cool is this? Thanks &lt;a href=&quot;https://twitter.com/CraftConf&quot;&gt;@CraftConf&lt;/a&gt; for the amazing gift! &lt;a href=&quot;https://twitter.com/hashtag/craftconf?src=hash&quot;&gt;#craftconf&lt;/a&gt; &lt;a href=&quot;https://t.co/KTOhzmcU5i&quot;&gt;pic.twitter.com/KTOhzmcU5i&lt;/a&gt;
    &lt;/p&gt;
    &amp;mdash; AntÃ³nio N. Monteiro (@_anmonteiro) &lt;a href=&quot;https://twitter.com/_anmonteiro/status/726009153525796864&quot;&gt;April 29, 2016&lt;/a&gt;
  &lt;/blockquote&gt;
  &lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Routing in Om Next â€” a Catalog of Approaches]]></title><description><![CDATA[
Although a standard routing solution is an orthogonal concern to Om Next's design and, at the time of this writing, there is still [ongoing development](https://github.com/omcljs/om/wiki/Routing-Support) with the objective of introducing simpler routing hooks, there are already several ways in which one can add proper route navigation to an Om Next app. This post aims to decrease the general community confusion around this topic by introducing a variety of different approaches that can be used to integrate routing in an Om Next app.

]]></description><link>https://anmonteiro.com/2016/02/routing-in-om-next-a-catalog-of-approaches/</link><guid isPermaLink="false">https://anmonteiro.com/2016/02/routing-in-om-next-a-catalog-of-approaches/</guid><pubDate>Mon, 22 Feb 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Although a standard routing solution is an orthogonal concern to Om Next&apos;s design and, at the time of this writing, there is still &lt;a href=&quot;https://github.com/omcljs/om/wiki/Routing-Support&quot;&gt;ongoing development&lt;/a&gt; with the objective of introducing simpler routing hooks, there are already several ways in which one can add proper route navigation to an Om Next app. This post aims to decrease the general community confusion around this topic by introducing a variety of different approaches that can be used to integrate routing in an Om Next app.&lt;/p&gt;
&lt;!--more--&gt;
&lt;div class=&quot;message&quot;&gt;
  &lt;strong&gt;Note:&lt;/strong&gt; I&apos;ve recently developed &lt;a href=&quot;https://github.com/anmonteiro/compassus&quot;&gt;Compassus&lt;/a&gt;, a routing library that automates all the pain of integrating routing in an Om Next application. Check the &lt;a href=&quot;2016/06/the-quest-for-a-unified-routing-solution-in-om-next&quot;&gt;announcement post&lt;/a&gt;!
&lt;/div&gt;
&lt;h2&gt;&lt;strong&gt;The end goal&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The example we will be working with throughout this post is presented below. It resembles a normal web application that has two routes: the &lt;strong&gt;Home&lt;/strong&gt; page and an &lt;strong&gt;About&lt;/strong&gt; page. Feel free to play with the links in the example&apos;s sidebar, and verify that the current route is updated, as well as the page&apos;s main content.&lt;/p&gt;
&lt;div style=&quot;margin-bottom: 20px;&quot;&gt;
  &lt;div id=&quot;dp-card-1&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;&lt;strong&gt;The Catalog&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This section will demonstrate different ways of accomplishing the behavior shown in the example above, namely using queries with unions, using &lt;code class=&quot;language-text&quot;&gt;set-query!&lt;/code&gt; and by leveraging the power of &lt;code class=&quot;language-text&quot;&gt;subquery&lt;/code&gt;. For each one, we will see the components, their queries and the parsing logic that is necessary to accomplish such behavior. The render logic falls out of the scope of this writing and is only shown when strictly necessary, for the sake of brevity. The &lt;code class=&quot;language-text&quot;&gt;Home&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;About&lt;/code&gt; components are common to all examples and are shown below. They each declare which properties they need from the state in their queries.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui Home
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:home&lt;/span&gt;/title &lt;span class=&quot;token operator&quot;&gt;:home&lt;/span&gt;/content&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui About
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:about&lt;/span&gt;/title &lt;span class=&quot;token operator&quot;&gt;:about&lt;/span&gt;/content&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We also define helpers that map routes to their components and the factories that create instances of such components:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; route-&gt;component
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:app&lt;/span&gt;/home Home
   &lt;span class=&quot;token operator&quot;&gt;:app&lt;/span&gt;/about About&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; route-&gt;factory
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;zipmap&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;keys&lt;/span&gt; route-&gt;component&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;map&lt;/span&gt; om/factory &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;vals&lt;/span&gt; route-&gt;component&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Throughout these sections, we will use the same &lt;code class=&quot;language-text&quot;&gt;app-state&lt;/code&gt; and the same way of representing routes. The state is shown below. We keep the current route, which in our case is the &lt;strong&gt;Home&lt;/strong&gt; route, and the data we present in this and the &lt;strong&gt;About&lt;/strong&gt; route.&lt;/p&gt;
&lt;div style=&quot;margin-bottom: 20px;&quot;&gt;
  &lt;div id=&quot;dp-card-2&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Our routes are represented by Om Next &lt;code class=&quot;language-text&quot;&gt;idents&lt;/code&gt;. Since we don&apos;t have any route that refers to an element in a collection, the second element of our routes will always be the &lt;code class=&quot;language-text&quot;&gt;_&lt;/code&gt; character. However, if we had &lt;em&gt;e.g.&lt;/em&gt; a list of people in our app, showing the profile of the person identified by the ID 3 would be denoted by the route &lt;code class=&quot;language-text&quot;&gt;[:app/people 3]&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Routing with Union Queries&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Our first example takes advantage of the expressiveness that union queries provide to declare hetereogenous user interfaces. Our &lt;code class=&quot;language-text&quot;&gt;Root&lt;/code&gt; component&apos;s query needs the current route, expressed by &lt;code class=&quot;language-text&quot;&gt;:app/route&lt;/code&gt; in its query, and the queries for all the components for which there is a route. Our simplistic case only has two routes, so the generated query for &lt;code class=&quot;language-text&quot;&gt;Root&lt;/code&gt; will be:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:app&lt;/span&gt;/route
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:route&lt;/span&gt;/data &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:app&lt;/span&gt;/home &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:home&lt;/span&gt;/title &lt;span class=&quot;token operator&quot;&gt;:home&lt;/span&gt;/content&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
              &lt;span class=&quot;token operator&quot;&gt;:app&lt;/span&gt;/about &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:about&lt;/span&gt;/title &lt;span class=&quot;token operator&quot;&gt;:about&lt;/span&gt;/content&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;Root&lt;/code&gt; component chooses which sub-component to render based on the current route found in its props. A rather simplistic &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt; method for our root component is included in the component definition below:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui Root
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:app&lt;/span&gt;/route
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:route&lt;/span&gt;/data &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;zipmap&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;keys&lt;/span&gt; route-&gt;component&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;map&lt;/span&gt; om/get-query &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;vals&lt;/span&gt; route-&gt;component&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  Object
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;render &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;app/route route/data&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/props this&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;route-&gt;factory &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;first&lt;/span&gt; route&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The parser code has two responsibilites: the &lt;code class=&quot;language-text&quot;&gt;read&lt;/code&gt; function must return only the data for the current route, and the &lt;code class=&quot;language-text&quot;&gt;mutate&lt;/code&gt; function needs to know how to change the app&apos;s route. An example of how this could be achieved is presented in the snippet below.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defmulti&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;read&lt;/span&gt; om/dispatch&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defmulti&lt;/span&gt; mutate om/dispatch&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defmethod&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:route&lt;/span&gt;/data
   &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;state query&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; k _&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;st @state
         route &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt; st &lt;span class=&quot;token operator&quot;&gt;:app&lt;/span&gt;/route&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
         route &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cond-&gt; route
                 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;second&lt;/span&gt; route&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &apos;_&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;token comment&quot;&gt;;; since the route is an `ident`, it could also&lt;/span&gt;
     &lt;span class=&quot;token comment&quot;&gt;;; be passed as the second argument to `db-&gt;tree`&lt;/span&gt;
     &lt;span class=&quot;token comment&quot;&gt;;; if our data was normalized&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:value&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;get-in st route&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defmethod&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:app&lt;/span&gt;/route
   &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;state query&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; k _&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;st @state&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:value&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt; st k&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defmethod&lt;/span&gt; mutate &lt;span class=&quot;token operator&quot;&gt;&apos;change&lt;/span&gt;/route!
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; _ &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;route&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:value&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:app&lt;/span&gt;/route&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token operator&quot;&gt;:action&lt;/span&gt; #&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;swap! state &lt;span class=&quot;token keyword&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:app&lt;/span&gt;/route route&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nothing else is needed. Routing will work once you plumb everything together with the help of the reconciler.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Routing with &lt;code class=&quot;language-text&quot;&gt;set-query!&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;In the previous example, we needed to include every subcomponent&apos;s query in the &lt;code class=&quot;language-text&quot;&gt;Root&lt;/code&gt;&apos;s union query so that the query for the current route was already in a union branch when the route changed. In this example we will see that we can implement routing by including the current route&apos;s query on demand, only when the route changes.&lt;/p&gt;
&lt;p&gt;A simplistic &lt;code class=&quot;language-text&quot;&gt;Root&lt;/code&gt; component for this case looks like the one below. We have the current route&apos;s query in the &lt;code class=&quot;language-text&quot;&gt;:route/data&lt;/code&gt; parameter, which is initially empty. Before the component first mounts, we swap in the query for the initial route.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui Root
  static om/IQueryParams
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;params &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:route&lt;/span&gt;/data &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &apos;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:app&lt;/span&gt;/route &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:route&lt;/span&gt;/data ?route/data&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  Object
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;componentWillMount &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;app/route&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/props this&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          initial-query &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/get-query &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;route-&gt;component &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;first&lt;/span&gt; route&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/set-query! this &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:params&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:route&lt;/span&gt;/data initial-query&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;render &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;app/route route/data&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/props this&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          active-component &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt; route-&gt;factory &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;first&lt;/span&gt; route&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;active-component data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because the root component&apos;s query is now changed on demand, the only modification that we need to introduce in our parser code is a call to &lt;code class=&quot;language-text&quot;&gt;set-query!&lt;/code&gt; in the &lt;code class=&quot;language-text&quot;&gt;change/route!&lt;/code&gt; mutation, so that we change the root query to include the new route&apos;s needed information. The complete parser code is presented below.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defmulti&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;read&lt;/span&gt; om/dispatch&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defmulti&lt;/span&gt; mutate om/dispatch&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defmethod&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:route&lt;/span&gt;/data
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:as&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; k _&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;st @state
        route &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:app&lt;/span&gt;/route st&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:value&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;get-in st &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;route&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defmethod&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:app&lt;/span&gt;/route
   &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;state query&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; k _&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;st @state&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:value&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt; st k&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defmethod&lt;/span&gt; mutate &lt;span class=&quot;token operator&quot;&gt;&apos;change&lt;/span&gt;/route!
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;state component&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; _ &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;route&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:value&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:app&lt;/span&gt;/route&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token operator&quot;&gt;:action&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
             &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;swap! state &lt;span class=&quot;token keyword&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:app&lt;/span&gt;/route route&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/set-query! component
               &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:params&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:route&lt;/span&gt;/data &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/get-query &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;route-&gt;component &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;first&lt;/span&gt; route&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;strong&gt;Routing with &lt;code class=&quot;language-text&quot;&gt;subquery&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;subquery&lt;/code&gt; is a nice little function that has been receiving very little attention in Om Next. It is, however, a very powerful construct that solves the routing problem for a bounded number of subviews in a very clean way &lt;sup&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/sup&gt;. All you really have to do it attach a React &lt;code class=&quot;language-text&quot;&gt;ref&lt;/code&gt; to the subviews. &lt;code class=&quot;language-text&quot;&gt;subquery&lt;/code&gt; takes care of the rest.&lt;/p&gt;
&lt;p&gt;Let&apos;s see an example. This approach pushes all the routing logic into the &lt;code class=&quot;language-text&quot;&gt;query&lt;/code&gt; function of the &lt;code class=&quot;language-text&quot;&gt;Root&lt;/code&gt; component. Our sub-components will be rendered with a &lt;code class=&quot;language-text&quot;&gt;ref&lt;/code&gt; which is exactly the keyword by which their route is identified. We use this knowledge in the &lt;code class=&quot;language-text&quot;&gt;query&lt;/code&gt; function to plug in the correct query at runtime.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui Root
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;subq-ref &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/component? this&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                     &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/props this&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:app&lt;/span&gt;/route &lt;span class=&quot;token keyword&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                     &lt;span class=&quot;token operator&quot;&gt;:app&lt;/span&gt;/home&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          subq-class &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt; route-&gt;component subq-ref&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:app&lt;/span&gt;/route &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:route&lt;/span&gt;/data &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/subquery this subq-ref subq-class&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  Object
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;render &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;app/route route/data&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/props this&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;route-&gt;factory &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;first&lt;/span&gt; route&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;assoc&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;:ref&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;first&lt;/span&gt; route&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, the parser code is exactly the same as in the example of routing using union queries, and is not included again.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Closing thoughts&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In this post, I&apos;ve presented 3 different alternatives to approach routing in Om Next. I hope it helps you decide which one is the most useful for your use case. You can find the complete source code for the examples in this post &lt;a href=&quot;https://github.com/anmonteiro/anmonteiro.github.io/tree/master/assets/cljs/om_next_routing&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any questions or suggestions, don&apos;t hesitate to contact me either on Twitter (&lt;a href=&quot;https://twitter.com/_anmonteiro&quot;&gt;@_anmonteiro&lt;/a&gt;) or by leaving a comment in the section below. As always, thanks for reading!&lt;/p&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/public/js/om_next_routing.js&quot;&gt;&lt;/script&gt;
&lt;hr&gt;
&lt;p&gt;&lt;sup&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/sup&gt; &lt;sub&gt;Note that this method will not be a clean solution if you want to route to arbitrary elements in a list, since the logic of adding &lt;code class=&quot;language-text&quot;&gt;ref&lt;/code&gt;s to every element in a list will soon become complex enough.&lt;/sub&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Om Next meets Devcards â€” the full reloadable experience]]></title><description><![CDATA[
In a recent post, I've put together a checklist covering the steps involved in [writing reloadable Om Next code](2016/01/writing-om-next-reloadable-code-a-checklist). If you are trying to use them in your devcards, however, you might find that current [Devcards helpers for Om Next](https://github.com/bhauman/devcards/pull/85) are still lacking full support for a pleasant, out-of-the-box reloadable experience, even when sticking to every recommendation in that list. Enter [\`devcards-om-next\`](https://github.com/anmonteiro/devcards-om-next).

]]></description><link>https://anmonteiro.com/2016/02/om-next-meets-devcards-the-full-reloadable-experience/</link><guid isPermaLink="false">https://anmonteiro.com/2016/02/om-next-meets-devcards-the-full-reloadable-experience/</guid><pubDate>Mon, 01 Feb 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In a recent post, I&apos;ve put together a checklist covering the steps involved in &lt;a href=&quot;2016/01/writing-om-next-reloadable-code-a-checklist&quot;&gt;writing reloadable Om Next code&lt;/a&gt;. If you are trying to use them in your devcards, however, you might find that current &lt;a href=&quot;https://github.com/bhauman/devcards/pull/85&quot;&gt;Devcards helpers for Om Next&lt;/a&gt; are still lacking full support for a pleasant, out-of-the-box reloadable experience, even when sticking to every recommendation in that list. Enter &lt;a href=&quot;https://github.com/anmonteiro/devcards-om-next&quot;&gt;`devcards-om-next`&lt;/a&gt;.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;The state of Om Next helpers for Devcards&lt;/h2&gt;
&lt;p&gt;As mentioned in the &lt;a href=&quot;2016/01/writing-om-next-reloadable-code-a-checklist&quot;&gt;checklist&lt;/a&gt;, Om Next&apos;s own &lt;code class=&quot;language-text&quot;&gt;add-root!&lt;/code&gt; will unmount any components currently mounted on the target DOM node before actually mounting the component in question. In a reloadable scenario, this behavior is undesirable because it will result in components losing their local state. Unfortunately, the current Devcards &lt;code class=&quot;language-text&quot;&gt;om-next-root&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;defcard-om-next&lt;/code&gt; helpers employ this exact approach, which although simple, makes impossible to set up an actual interactive programming environment.&lt;/p&gt;
&lt;h2&gt;The full experience: &lt;a href=&quot;https://github.com/anmonteiro/devcards-om-next&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;devcards-om-next&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;devcards-om-next&lt;/code&gt; is a small Devcards extension that aims to replace the current helpers with ones that know the dynamics of Om Next components. By being aware of how exactly to mount and reload components, these new &lt;code class=&quot;language-text&quot;&gt;om-next-root&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;defcard-om-next&lt;/code&gt; helpers enable the creation of fully reloadable Om Next component cards. For now, they are in their own library, but are expected to be &lt;a href=&quot;https://github.com/bhauman/devcards/pull/91#issuecomment-173391945&quot;&gt;integrated in Devcards&lt;/a&gt; itself going forward. Read on for an example of how to use them in your code. Also refer to the &lt;a href=&quot;https://github.com/anmonteiro/devcards-om-next/blob/master/src/devcards/devcards_om_next/devcards/core.cljs&quot;&gt;devcards demos&lt;/a&gt; in the &lt;a href=&quot;https://github.com/anmonteiro/devcards-om-next&quot;&gt;repository&lt;/a&gt; itself for more information.&lt;/p&gt;
&lt;h2&gt;Examples / How-tos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Start by adding the &lt;code class=&quot;language-text&quot;&gt;devcards-om-next&lt;/code&gt; dependency information to your project:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; for Leiningen:&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;devcards-om-next &lt;span class=&quot;token string&quot;&gt;&quot;0.3.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Require the &lt;code class=&quot;language-text&quot;&gt;devcards-om-next&lt;/code&gt; namespace, as well as the macros you intend to use:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; my-ns.core
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:require&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;devcards-om-next.core &lt;span class=&quot;token operator&quot;&gt;:as&lt;/span&gt; don
             &lt;span class=&quot;token operator&quot;&gt;:refer-macros&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;om-next-root defcard-om-next&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;om.&lt;span class=&quot;token keyword&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:as&lt;/span&gt; om &lt;span class=&quot;token operator&quot;&gt;:refer-macros&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;defui&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Write your cards in the normal reloadable manner. &lt;code class=&quot;language-text&quot;&gt;om-next-root&lt;/code&gt; is the simplest of the two. &lt;code class=&quot;language-text&quot;&gt;defcard-om-next&lt;/code&gt; is a shortcut for &lt;code class=&quot;language-text&quot;&gt;defcard&lt;/code&gt; plus &lt;code class=&quot;language-text&quot;&gt;om-next-root&lt;/code&gt;. Both take an Om Next component and a reconciler, but they can also take a state map or atom instead. Below is a small example. I encourage you to run it with &lt;a href=&quot;https://github.com/bhauman/lein-figwheel&quot;&gt;Figwheel&lt;/a&gt;, increment the counter, modify e.g. the button label and watch your changes being pushed to the browser as the component&apos;s local state remains unchanged &lt;sup&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/sup&gt;. Pretty cool!&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; use ^:once meta in `defui`&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui ^&lt;span class=&quot;token operator&quot;&gt;:once&lt;/span&gt; Counter
  Object
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;initLocalState &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:val&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;render &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/get-state this&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dom/div &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;val: &quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dom/button
          #js &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:onClick&lt;/span&gt; #&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/update-state! this update &lt;span class=&quot;token operator&quot;&gt;:val&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;inc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;token string&quot;&gt;&quot;inc!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; defonce the reconciler&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defonce&lt;/span&gt; counter-reconciler
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/reconciler &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:state&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                  &lt;span class=&quot;token operator&quot;&gt;:parser&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:read&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:value&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; the usual `defcard` calls `om-next-root`&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defcard om-next-root-example
  &quot;`om-next-root` takes &lt;span class=&quot;token number&quot;&gt;a&lt;/span&gt; component &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;optionally&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token number&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;map&lt;/span&gt; with the state &lt;span class=&quot;token keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;a&lt;/span&gt; reconciler&quot;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om-next-root Counter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; `defcard-om-next` takes every normal `defcard` argument&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;;; (documentation, devcard, options, etc.), and the arguments of `om-next-root`&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defcard-om-next defcard-om-next-example
  &lt;span class=&quot;token string&quot;&gt;&quot;`defcard-om-next` example with a Component class and a reconciler&quot;&lt;/span&gt;
  Counter
  counter-reconciler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I hope these new helpers are useful in your journey writing reloadable Om Next cards. Thanks for reading!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;sup&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/sup&gt; keep in mind that you must still follow the recommendations in the &lt;a href=&quot;2016/01/writing-om-next-reloadable-code-a-checklist&quot;&gt;reloadable code checklist&lt;/a&gt; to see this in action &lt;em&gt;i.e.&lt;/em&gt;, you must supply a reconciler that has been defined with &lt;code class=&quot;language-text&quot;&gt;defonce&lt;/code&gt; for it to work. The &lt;code class=&quot;language-text&quot;&gt;(om-next-root Component)&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;(defcard-om-next my-card Component)&lt;/code&gt; shortcuts don&apos;t count as reloadable (they define a reconciler under the hood everytime) and will therefore reset the component&apos;s local state.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Writing Om Next Reloadable Code â€” A Checklist]]></title><description><![CDATA[
It didn't take long since [Figwheel](https://github.com/bhauman/lein-figwheel) came into our ClojureScript environments for it to become a crucial part of our development workflow. Its code hot loading magic provides the basis for an easy, enjoyable [interactive programming](https://en.wikipedia.org/wiki/Interactive_programming) experience. The rest â€” writing code that can be repeatedly evaluated without disturbing our running program's state â€” is up to us. In this post I will go through what you need to know to start writing reloadable code in Om Next.

]]></description><link>https://anmonteiro.com/2016/01/writing-om-next-reloadable-code-a-checklist/</link><guid isPermaLink="false">https://anmonteiro.com/2016/01/writing-om-next-reloadable-code-a-checklist/</guid><pubDate>Thu, 21 Jan 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;It didn&apos;t take long since &lt;a href=&quot;https://github.com/bhauman/lein-figwheel&quot;&gt;Figwheel&lt;/a&gt; came into our ClojureScript environments for it to become a crucial part of our development workflow. Its code hot loading magic provides the basis for an easy, enjoyable &lt;a href=&quot;https://en.wikipedia.org/wiki/Interactive_programming&quot;&gt;interactive programming&lt;/a&gt; experience. The rest â€” writing code that can be repeatedly evaluated without disturbing our running program&apos;s state â€” is up to us. In this post I will go through what you need to know to start writing reloadable code in Om Next.&lt;/p&gt;
&lt;!--more--&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h3&gt;&lt;strong&gt;&lt;code&gt;defonce&lt;/code&gt; your app-state and reconciler&lt;/strong&gt;&lt;/h3&gt;&lt;/li&gt;
&lt;p&gt;As stated in the &lt;a href=&quot;https://github.com/bhauman/lein-figwheel#writing-reloadable-code&quot;&gt;Figwheel docs&lt;/a&gt;, top-level definitions that are defined with &lt;code&gt;def&lt;/code&gt; will be redefined every time you hit the save button, possibly compromising the state of your components at that point in time. So remember to always &lt;code&gt;defonce&lt;/code&gt; any top-level definitions that contain local state; this way the identifier won&apos;t be redefined and any changes to it won&apos;t be seen &lt;sup&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;li&gt;&lt;h3&gt;&lt;strong&gt;&lt;code&gt;(defui ^:once MyComponent)&lt;/code&gt; is also a thing&lt;/strong&gt;&lt;/h3&gt;&lt;/li&gt;
&lt;p&gt;Applying the &lt;code&gt;:once&lt;/code&gt; metadata to your Om Next components is the equivalent of using &lt;code&gt;defonce&lt;/code&gt; to define the top-level variables in your program. It will prevent the React components constructors from being redefined, while patching those components&apos; JavaScript prototypes to use the newly written (and hotloaded) code.&lt;/p&gt;
&lt;li&gt;&lt;h3&gt;&lt;strong&gt;only call &lt;code&gt;add-root!&lt;/code&gt; on the initial load&lt;/strong&gt;&lt;/h3&gt;&lt;/li&gt;
&lt;code&gt;add-root!&lt;/code&gt; mounts an Om Next component in the DOM. The problem with calling &lt;code&gt;add-root!&lt;/code&gt; on reload is that successive calls to this function will result in the Om Next reconciler unmounting any components currently mounted on the target node prior to actually performing the new mounting operation. Below is a simple code example of how to achieve what I&apos;ve been describing. I imagine variations of it can be used as a &lt;a href=&quot;https://github.com/bhauman/lein-figwheel#configure-your-builds&quot;&gt;Figwheel reload hook&lt;/a&gt;.
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defonce&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;atom &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defn&lt;/span&gt; init &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;nil?&lt;/span&gt; @&lt;span class=&quot;token keyword&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;target &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;js/document.getElementById &lt;span class=&quot;token string&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/&lt;span class=&quot;token number&quot;&gt;add&lt;/span&gt;-root! reconciler RootComponent target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reset! &lt;span class=&quot;token keyword&quot;&gt;root&lt;/span&gt; RootComponent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;.forceUpdate &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/class-&gt;any reconciler RootComponent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I hope the above advice will prove useful in your Om Next journey. Thanks for reading!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;sup&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/sup&gt; also keep in mind that this might not be desirable if you change whatever that definition contains. A full reload will probably be necessary in that case.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 2]]></title><description><![CDATA[
This is part two of a series of posts that aim to demonstrate how to build classical Software Engineering object recursion patterns in Om Next. In the [previous post](2016/01/exploration-patterns-om-next-part-1), we explored the Om Next constructs of the Composite. This time around we will use the [Decorator](https://en.wikipedia.org/wiki/Decorator_pattern) design pattern to build a simple component hierarchy that provides runtime extensibility.

]]></description><link>https://anmonteiro.com/2016/01/exploration-patterns-om-next-part-2/</link><guid isPermaLink="false">https://anmonteiro.com/2016/01/exploration-patterns-om-next-part-2/</guid><pubDate>Sat, 09 Jan 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is part two of a series of posts that aim to demonstrate how to build classical Software Engineering object recursion patterns in Om Next. In the &lt;a href=&quot;2016/01/exploration-patterns-om-next-part-1&quot;&gt;previous post&lt;/a&gt;, we explored the Om Next constructs of the Composite. This time around we will use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;Decorator&lt;/a&gt; design pattern to build a simple component hierarchy that provides runtime extensibility.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;The Decorator design pattern&lt;/h2&gt;
&lt;div style=&quot;max-width:75%;margin:15px auto 0;&quot;&gt;
  &lt;img src=&quot;https://cloud.githubusercontent.com/assets/661909/12217911/81cb227e-b70f-11e5-814e-fa564fe5c021.png&quot; alt=&quot;Decorator design pattern&quot;&gt;
&lt;/div&gt;
&lt;p&gt;As with the Composite, the Decorator also appears in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;Gang of Four book&lt;/a&gt;. It can be viewed as a restricted form of the Composite (1-Recursion &lt;em&gt;vs&lt;/em&gt; Composite&apos;s n-Recursion), although it serves a different purpose. The Decorator&apos;s aim is to add â€” or remove â€” functionality (&lt;em&gt;decorate&lt;/em&gt;) to an object at runtime. The same can be achieved by subclassing, although that approach will only provide compile-time extensibility. As can be perceived by the diagram above, several decorators can form a chain, with each new decorator providing a new piece of functionality. The core object lies at the end of the decorator chain.&lt;/p&gt;
&lt;h2&gt;The example&lt;/h2&gt;
&lt;p&gt;If you have read my &lt;a href=&quot;2016/01/exploration-patterns-om-next-part-1&quot;&gt;last post&lt;/a&gt;, you saw that we built an example that rendered squares inside other squares. The example we will build today will also have a geometric square â€” our core object â€” and we are going to add functionality that decorates it with pieces of text and/or images.
We adopt the nomenclature present in the pattern diagram, except for our concrete decorators, which we will call &lt;code class=&quot;language-text&quot;&gt;TextDecorator&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;ImageDecorator&lt;/code&gt;. Other than that, we need to define components for the &lt;code class=&quot;language-text&quot;&gt;ConcreteComponent&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;Component&lt;/code&gt;. The former implements the square rendering functionality, while the latter is responsible for combining the queries of both decorators and the core â€” &lt;code class=&quot;language-text&quot;&gt;ConcreteComponent&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;The data&lt;/h3&gt;
&lt;p&gt;The core object is just a representation of the square: its &lt;code class=&quot;language-text&quot;&gt;width&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;height&lt;/code&gt; and the &lt;code class=&quot;language-text&quot;&gt;color&lt;/code&gt;. Here&apos;s how it looks like:&lt;/p&gt;
&lt;div style=&quot;margin-bottom: 20px;&quot;&gt;
  &lt;div id=&quot;dp-card-1&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, the data in our decorators is quite similar to the Composite case, in the sense that it is recursive. However, since the Decorator pattern employs 1-ObjectRecursion, each data item in this example doesn&apos;t have a vector of children, but solely a &quot;pointer&quot; to the next decorator. As you can see below, we call this pointer &lt;code class=&quot;language-text&quot;&gt;:next&lt;/code&gt;. Notice how the data that represents the square is the end of the recursion.&lt;/p&gt;
&lt;div style=&quot;margin-bottom: 20px;&quot;&gt;
  &lt;div id=&quot;dp-card-2&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;The Om Next components (&lt;em&gt;or&lt;/em&gt;: &quot;Show me some code!&quot;)&lt;/h3&gt;
&lt;p&gt;We start by defining our &lt;code class=&quot;language-text&quot;&gt;ConcreteComponent&lt;/code&gt;. Its query is quite simple: the square&apos;s attributes.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui ConcreteComponent
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &apos;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:width&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:height&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The concrete decorators are presented below. They each query for their own set of attributes; those represent the functionality they add to the core object. The only attributes our concrete decorators have in common are the &lt;code class=&quot;language-text&quot;&gt;id&lt;/code&gt; by which they are identified, and the recursion query (&lt;code class=&quot;language-text&quot;&gt;{:next ...}&lt;/code&gt;) which simply tells Om Next that we are expecting to find an object of the same type under that entry &lt;sup&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui ImageDecorator
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &apos;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:decorator&lt;/span&gt;/image &lt;span class=&quot;token operator&quot;&gt;:image&lt;/span&gt;/max-width &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:next&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;..&lt;/span&gt;.&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui TextDecorator
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &apos;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:decorator&lt;/span&gt;/text &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:next&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;..&lt;/span&gt;.&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How should &lt;code class=&quot;language-text&quot;&gt;Component&lt;/code&gt; be defined, then? Just like in the Decorator pattern diagram, it sits on top of our hierarchy, and delegates functionality to its child components. As such, it needs to aggregate the queries of all the children and define their identity. Our &lt;code class=&quot;language-text&quot;&gt;Ident&lt;/code&gt;s are defined using the following approach. We know that &lt;code class=&quot;language-text&quot;&gt;TextDecorator&lt;/code&gt;s have a &lt;code class=&quot;language-text&quot;&gt;:decorator/text&lt;/code&gt; attribute and &lt;code class=&quot;language-text&quot;&gt;ImageDecorator&lt;/code&gt;s have a &lt;code class=&quot;language-text&quot;&gt;:decorator/image&lt;/code&gt; attribute. If we find none in &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;, we are in the presence of the core object itself. &lt;code class=&quot;language-text&quot;&gt;Component&lt;/code&gt; is shown below.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui Component
  static om/Ident
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ident &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;id decorator/text decorator/image&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;cond&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;nil?&lt;/span&gt; text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:text&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;nil?&lt;/span&gt; image&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:image&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;:else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:component&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:text&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/get-query TextDecorator&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;token operator&quot;&gt;:image&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/get-query ImageDecorator&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;token operator&quot;&gt;:component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/get-query ConcreteComponent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last piece of our example is a component that contains the top-level query which finalizes the definition of the union query. This is also our root component. We will call it &lt;code class=&quot;language-text&quot;&gt;DecoratorApp&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui DecoratorApp
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:decorator&lt;/span&gt;/app &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/get-query Component&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;The end result&lt;/h2&gt;
&lt;p&gt;After we implement our Om parser and render methods, we see the final result. The card below shows the result of passing only the square data to the example we just built. Pretty boring, heh? Scroll down!&lt;/p&gt;
&lt;div style=&quot;margin-bottom: 20px;&quot;&gt;
  &lt;div id=&quot;dp-card-3&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;However, if we pass the state that contains our decorators, we see that the previously boring square has been decorated with that data! One more thing: if you simply supply data that has more (or less, for that case) decorators to our example, those will be reflected in our core object. We have thus achieved runtime extensibility.&lt;/p&gt;
&lt;div style=&quot;margin-bottom: 20px;&quot;&gt;
  &lt;div id=&quot;dp-card-4&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The complete source code for this post is published in this &lt;a href=&quot;https://gist.github.com/anmonteiro/2b282aa35380558a8b1d#file-decorator-cljs&quot;&gt;gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;sup&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/sup&gt; &lt;sub&gt;here, &quot;an object of the same type&quot; refers to any one that the union query satisfies (which might not share the same query). Simple recursion can also be specified in Om Next, which allows to strictly recurse into an object which has the exact same query. For tips on how to use that syntax, visit &lt;a href=&quot;2016/01/om-next-query-syntax&quot;&gt;my post&lt;/a&gt; on that topic&lt;/sub&gt;&lt;/p&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/js/exploration-dp-2.js&quot;&gt;&lt;/script&gt;</content:encoded></item><item><title><![CDATA[An Exploration of Object Recursion Design Patterns with Om Next Recursive Queries - Part 1]]></title><description><![CDATA[
The recent [landing of recursive union queries](https://github.com/omcljs/om/pull/562) in Om Next allows for defining recursive, heterogeneous data in a simple, expressive way. In a series of posts, I will explore how this conjugates with well-known Software Engineering structural design patterns that are based on object recursion. In this part 1 we will put together a simple component hierarchy that uses the [Composite](https://en.wikipedia.org/wiki/Composite_pattern) design pattern. Let's dig into it.

]]></description><link>https://anmonteiro.com/2016/01/exploration-patterns-om-next-part-1/</link><guid isPermaLink="false">https://anmonteiro.com/2016/01/exploration-patterns-om-next-part-1/</guid><pubDate>Thu, 07 Jan 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The recent &lt;a href=&quot;https://github.com/omcljs/om/pull/562&quot;&gt;landing of recursive union queries&lt;/a&gt; in Om Next allows for defining recursive, heterogeneous data in a simple, expressive way. In a series of posts, I will explore how this conjugates with well-known Software Engineering structural design patterns that are based on object recursion. In this part 1 we will put together a simple component hierarchy that uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/Composite_pattern&quot;&gt;Composite&lt;/a&gt; design pattern. Let&apos;s dig into it.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;The Composite design pattern&lt;/h2&gt;
&lt;div style=&quot;max-width:75%;margin:15px auto 0;&quot;&gt;
  &lt;img src=&quot;https://cloud.githubusercontent.com/assets/661909/12181450/8858f8ac-b582-11e5-99e2-3c11f1913801.png&quot; alt=&quot;Composite design pattern&quot;&gt;
&lt;/div&gt;
&lt;p&gt;The Composite is part of the design pattern collection in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;Gang of Four book&lt;/a&gt;. Its purpose is to &lt;strong&gt;compose&lt;/strong&gt; trees of objects that fulfill the same contract by building and iterating over them. The secret weapon here is that, while iterating, there is no need to know if we&apos;re working on a leaf node or an inner node â€” we can simply treat every node in the same way. Inner nodes will take care of iterating over their children in the process.&lt;/p&gt;
&lt;h2&gt;Our example&lt;/h2&gt;
&lt;p&gt;In our simplified example, we want to render a square that can arbitrarily contain other squares. Using the nomenclature in the above diagram, we need to define Om Next components for both the &lt;code class=&quot;language-text&quot;&gt;Leaf&lt;/code&gt; and the &lt;code class=&quot;language-text&quot;&gt;Composite&lt;/code&gt;. &lt;code class=&quot;language-text&quot;&gt;Composite&lt;/code&gt; components can have &lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt;, whereas &lt;code class=&quot;language-text&quot;&gt;Leaf&lt;/code&gt; components cannot. We will also have our version of &lt;code class=&quot;language-text&quot;&gt;Component&lt;/code&gt;, which aggregates the queries for both others, and dispatches rendering to them &lt;sup&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3&gt;The data&lt;/h3&gt;
&lt;p&gt;We start with the data below. Each square contains attributes for its width, height and color. Each item also has an &lt;code class=&quot;language-text&quot;&gt;id&lt;/code&gt;; this reveals helpful in normalizing the data.&lt;/p&gt;
&lt;div style=&quot;margin-bottom: 20px;&quot;&gt;
  &lt;div id=&quot;dp-card-1&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;The Om Next components&lt;/h3&gt;
&lt;p&gt;Our &lt;code class=&quot;language-text&quot;&gt;Leaf&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;Composite&lt;/code&gt; components are shown below &lt;sup&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/sup&gt;. Their queries are trivial, in the sense that they just declare the attributes we have talked about before. The only exception, which you might have not seen before, is the &lt;code class=&quot;language-text&quot;&gt;{:children ...}&lt;/code&gt; part. This is how we declare recursion in Om Next. Refer to my post about Om Next&apos;s &lt;a href=&quot;2016/01/om-next-query-syntax&quot;&gt;query syntax&lt;/a&gt; where I explain this and other bits in detail.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui Leaf
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &apos;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:width&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:height&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui Composite
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &apos;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:width&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:height&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;..&lt;/span&gt;.&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have declared our most concrete components, we need to declare the one that is analogous to the Component in the Composite pattern diagram. Our &lt;code class=&quot;language-text&quot;&gt;Component&lt;/code&gt; needs to aggregate the queries of the others, and declare its &lt;code class=&quot;language-text&quot;&gt;Ident&lt;/code&gt;, a unique key by which each data item is identified in our example. Besides defining an &lt;code class=&quot;language-text&quot;&gt;id&lt;/code&gt;, we could also have a the type of an item in our data; in our simple example this is not necessary as we know leaves can&apos;t have children. It looks like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui Component
  static om/Ident
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ident &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;if-not&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;nil?&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:composite&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:leaf&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:leaf&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/get-query Leaf&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;token operator&quot;&gt;:composite&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/get-query Composite&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We will need a root component, which we will call &lt;code class=&quot;language-text&quot;&gt;CompositeApp&lt;/code&gt;. This one helps define the union query in &lt;code class=&quot;language-text&quot;&gt;Component&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui CompositeApp
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:composite&lt;/span&gt;/item &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/get-query Component&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once we have properly implemented our parser and render methods, we get the following result, which is exactly what we intended. Squares that contain other squares.&lt;/p&gt;
&lt;div style=&quot;margin-bottom: 20px;&quot;&gt;
  &lt;div id=&quot;dp-card-2&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can find the complete source code for this post &lt;a href=&quot;https://gist.github.com/anmonteiro/2b282aa35380558a8b1d#file-composite-cljs&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the next post we will talk about the &lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;Decorator&lt;/a&gt; design pattern. Stay tuned!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;sup&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/sup&gt; &lt;sub&gt;these components are not really heterogeneous in the sense that they only differ in the &lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt; attribute and we could get away with just one component (a leaf would be an item without children). However, the purpose here is to demonstrate the Composite design pattern and, as such, we&apos;ll be a little more verbose.&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/sup&gt; &lt;sub&gt;render methods are omitted for brevity.&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;&lt;sub&gt;3&lt;/sub&gt;&lt;/sup&gt; &lt;sub&gt;at the time of this writing, you&apos;ll need to clone Om Next from master and install it in your local repository in order to run the example code&lt;/sub&gt;&lt;/p&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/js/exploration-dp-1.js&quot;&gt;&lt;/script&gt;</content:encoded></item><item><title><![CDATA[Om Next Query Syntax Explained]]></title><description><![CDATA[
As more people start tinkering with Om Next, similar questions keep popping up increasingly often. While this is a natural thing given any new learning efforts, there can never be too many resources when we start learning something new. This write-up is an attempt to get people up and running with Om Next's query syntax by providing comprehensive examples and a quick syntax reference for the future.

]]></description><link>https://anmonteiro.com/2016/01/om-next-query-syntax/</link><guid isPermaLink="false">https://anmonteiro.com/2016/01/om-next-query-syntax/</guid><pubDate>Mon, 04 Jan 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;As more people start tinkering with Om Next, similar questions keep popping up increasingly often. While this is a natural thing given any new learning efforts, there can never be too many resources when we start learning something new. This write-up is an attempt to get people up and running with Om Next&apos;s query syntax by providing comprehensive examples and a quick syntax reference for the future.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;&lt;strong&gt;Read queries&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This section covers the syntax for read queries, which are the ones we put into components that implement the &lt;code class=&quot;language-text&quot;&gt;IQuery&lt;/code&gt; protocol. The examples start out with the simplest form, progressing to more complex use cases as more syntax is revealed.&lt;/p&gt;
&lt;h3&gt;Property read&lt;/h3&gt;
&lt;p&gt;The simplest, self-explanatory case of reading a single property.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:some&lt;/span&gt;/&lt;span class=&quot;token keyword&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Parameterized property read&lt;/h3&gt;
&lt;p&gt;A property read that takes in one or more parameters (possibly defined in a component&apos;s implementation of the &lt;code class=&quot;language-text&quot;&gt;IQueryParams&lt;/code&gt; protocol). These parameters are passed as the third argument to the &lt;code class=&quot;language-text&quot;&gt;read&lt;/code&gt; parsing function.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:some&lt;/span&gt;/&lt;span class=&quot;token keyword&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:some&lt;/span&gt;/param &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; Using it in IQuery &amp;amp; IQueryParams&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui SomeComponent
  static om/IQueryParams
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;params &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:some&lt;/span&gt;/param &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &apos;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:some&lt;/span&gt;/&lt;span class=&quot;token keyword&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:some&lt;/span&gt;/param ?some/param&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Join query&lt;/h3&gt;
&lt;p&gt;A join refers to reading a property of the state, e.g. a vector of elements, while specifying the exact (sub-)set of sub-properties that should be read for each item in that vector.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; given this state&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; state &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:some&lt;/span&gt;/&lt;span class=&quot;token keyword&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:subkey&lt;/span&gt;/one &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
                        &lt;span class=&quot;token operator&quot;&gt;:subkey&lt;/span&gt;/two &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
                        &lt;span class=&quot;token operator&quot;&gt;:subkey&lt;/span&gt;/three &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                       &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:subkey&lt;/span&gt;/one &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
                        &lt;span class=&quot;token operator&quot;&gt;:subkey&lt;/span&gt;/two &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
                        &lt;span class=&quot;token operator&quot;&gt;:subkey&lt;/span&gt;/three &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; this query will yield the elements of `:some/key`&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;;; containing only the properties `:subkey/one` and `:subkey/two`&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:some&lt;/span&gt;/&lt;span class=&quot;token keyword&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:subkey&lt;/span&gt;/one &lt;span class=&quot;token operator&quot;&gt;:subkey&lt;/span&gt;/two&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; this one reads every sub-key&lt;/span&gt;
&apos;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:some&lt;/span&gt;/&lt;span class=&quot;token keyword&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Parameterized join query&lt;/h3&gt;
&lt;p&gt;As with property query, we can also parameterize joins. The syntax for a parameterized join follows.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:some&lt;/span&gt;/&lt;span class=&quot;token keyword&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:subkey&lt;/span&gt;/one &lt;span class=&quot;token operator&quot;&gt;:subkey&lt;/span&gt;/two&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:some&lt;/span&gt;/param &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Reference (Idents &amp;#x26; Links) queries&lt;/h3&gt;
&lt;p&gt;When working with normalized data, using an &lt;code class=&quot;language-text&quot;&gt;Ident&lt;/code&gt; reference in a query will direct the Om Next parser to lookup the element with that reference at the root of the application state.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; using an `ident` will yield (get-in state [:item/by-id 0])&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:item&lt;/span&gt;/by-id &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; Using a `_` will produce (get-in state [:active/panel])&lt;/span&gt;
&apos;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:active&lt;/span&gt;/panel _&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Union query&lt;/h3&gt;
&lt;p&gt;Certain types of applications require us to handle heterogeneous data that share the same parent. Union queries provide the basis to handle such heterogeneity by allowing us to define just that â€” there might live different pieces of data under a certain application state key.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; Given the following app state:&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; state &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:items&lt;/span&gt;/&lt;span class=&quot;token keyword&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:item&lt;/span&gt;/id &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:item&lt;/span&gt;/type &lt;span class=&quot;token operator&quot;&gt;:foo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:foo&lt;/span&gt;/value &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                         &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:item&lt;/span&gt;/id &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:item&lt;/span&gt;/type &lt;span class=&quot;token operator&quot;&gt;:bar&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:bar&lt;/span&gt;/value &lt;span class=&quot;token number&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; Foo has property `:foo/value`&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui Foo
  static om/Ident
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ident &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;item/type item/id&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;type id&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:item&lt;/span&gt;/id &lt;span class=&quot;token operator&quot;&gt;:item&lt;/span&gt;/type &lt;span class=&quot;token operator&quot;&gt;:foo&lt;/span&gt;/value&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; Bar has property `:bar/value`&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui Bar
  static om/Ident
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ident &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;item/type item/id&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;type id&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:item&lt;/span&gt;/id &lt;span class=&quot;token operator&quot;&gt;:item&lt;/span&gt;/type &lt;span class=&quot;token operator&quot;&gt;:bar&lt;/span&gt;/value&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; An item can be either Foo or Bar&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui Item
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:foo&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/get-query Foo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;token operator&quot;&gt;:bar&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/get-query Bar&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; The item list contains items (either Foo items or Bar items)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui ItemList
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:items&lt;/span&gt;/&lt;span class=&quot;token keyword&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/get-query Item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; the entire (ItemList) query will then be:&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:items&lt;/span&gt;/&lt;span class=&quot;token keyword&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:foo&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:item&lt;/span&gt;/id &lt;span class=&quot;token operator&quot;&gt;:item&lt;/span&gt;/type &lt;span class=&quot;token operator&quot;&gt;:foo&lt;/span&gt;/value&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
               &lt;span class=&quot;token operator&quot;&gt;:bar&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:item&lt;/span&gt;/id &lt;span class=&quot;token operator&quot;&gt;:item&lt;/span&gt;/type &lt;span class=&quot;token operator&quot;&gt;:bar&lt;/span&gt;/value&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Recursive query&lt;/h3&gt;
&lt;p&gt;You can also specify Om Next queries that recurse into themselves. This is useful when your components can host themselves. The following example illustrates this.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; say we have the following app state. notice that each&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;;; node can contain children of its type. this is where&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;;; recursion is useful&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; state &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tree&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:value&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;
                   &lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:value&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;43&lt;/span&gt;
                               &lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:value&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;99&lt;/span&gt;
                                           &lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                              &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:value&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;101&lt;/span&gt;
                               &lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; We would need 2 components. One which expresses a node:&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;;; (the new thing here is the symbol &apos;... â€” it represents&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;;; the recursion)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui Node
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &apos;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:value&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;..&lt;/span&gt;.&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; One that expresses the node tree&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui Tree
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    `&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tree&lt;/span&gt; ~&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/get-query Node&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; the entire query would be:&lt;/span&gt;
&apos;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tree&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:value&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;..&lt;/span&gt;.&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;;; we can also specify a recursion limit by specifying&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;;; a number instead of &apos;... .&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;;; the query below will only allow 5-depth recursion&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tree&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:value&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Recursive union query&lt;/h3&gt;
&lt;p&gt;Our last example is a composition of the last two. What if we have heterogeneous recursive components? That almost makes my brain hurt! Let&apos;s get into it:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; heterogeneous recursive state&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; state
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tree&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/type &lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/foo
          &lt;span class=&quot;token operator&quot;&gt;:foo&lt;/span&gt;/value &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;
          &lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/type &lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/foo
                      &lt;span class=&quot;token operator&quot;&gt;:bar&lt;/span&gt;/value &lt;span class=&quot;token number&quot;&gt;43&lt;/span&gt;
                      &lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/type &lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/bar
                                  &lt;span class=&quot;token operator&quot;&gt;:bar&lt;/span&gt;/value &lt;span class=&quot;token number&quot;&gt;99&lt;/span&gt;
                                  &lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                     &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/type &lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/bar
                                 &lt;span class=&quot;token operator&quot;&gt;:bar&lt;/span&gt;/value &lt;span class=&quot;token number&quot;&gt;101&lt;/span&gt;
                                 &lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; &apos;:node/bar&apos; nodes contain `:bar/value`&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui BarNode
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &apos;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/type &lt;span class=&quot;token operator&quot;&gt;:bar&lt;/span&gt;/value &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;..&lt;/span&gt;.&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; &apos;:node/foo&apos; nodes contain `:foo/value`&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui FooNode
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &apos;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/type &lt;span class=&quot;token operator&quot;&gt;:foo&lt;/span&gt;/value &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;..&lt;/span&gt;.&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; An ItemNode can be either FooNode or BarNode&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui ItemNode
  static om/Ident
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ident &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;node&lt;/span&gt;/type id&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;type id&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    `&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/foo ~&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/get-query FooNode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/bar ~&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/get-query BarNode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defui Tree
  static om/IQuery
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    `&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tree&lt;/span&gt; ~&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/get-query ItemNode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; the complete query:&lt;/span&gt;
&apos;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tree&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/foo &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/type &lt;span class=&quot;token operator&quot;&gt;:foo&lt;/span&gt;/value &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;..&lt;/span&gt;.&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/bar &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/type &lt;span class=&quot;token operator&quot;&gt;:bar&lt;/span&gt;/value &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;..&lt;/span&gt;.&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; again, expressing a recursion limit&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tree&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/foo &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/type &lt;span class=&quot;token operator&quot;&gt;:foo&lt;/span&gt;/value &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
         &lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/bar &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/type &lt;span class=&quot;token operator&quot;&gt;:bar&lt;/span&gt;/value &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;strong&gt;Mutations&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Mutation syntax is pretty simple in the sense that there aren&apos;t so many combinations one can compose. The cases of a simple mutation and a mutation with parameters are shown below. Thanks for reading!&lt;/p&gt;
&lt;h3&gt;Simple mutation&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;/something!&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; it would look like this in a call to `transact!`&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/transact! &lt;span class=&quot;token number&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;/something!&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Parameterized mutation&lt;/h3&gt;
&lt;p&gt;Now, in order to pass parameters to a mutation, one can use the following syntax:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;/something! &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:some&lt;/span&gt;/param &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; which would look like this when calling `transact!`&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;om/transact! &lt;span class=&quot;token number&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;/something! &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:some&lt;/span&gt;/param &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;strong&gt;Everything in one place&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;For future (and quick) reference, a single list with every example from this post follows. As a freebie, here&apos;s a reference card (&lt;a href=&quot;https://cloud.githubusercontent.com/assets/661909/12114476/81a8a37e-b3aa-11e5-9c3f-2986e2eaee78.png&quot;&gt;light&lt;/a&gt;, &lt;a href=&quot;https://cloud.githubusercontent.com/assets/661909/12114475/81a710b8-b3aa-11e5-9ece-78bdafb9af64.png&quot;&gt;dark&lt;/a&gt;) with the contents below.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; Reads&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:some&lt;/span&gt;/&lt;span class=&quot;token keyword&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;;; property read&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:some&lt;/span&gt;/&lt;span class=&quot;token keyword&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:some&lt;/span&gt;/param &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;;; parameterized property read&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:some&lt;/span&gt;/&lt;span class=&quot;token keyword&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:subkey&lt;/span&gt;/one &lt;span class=&quot;token operator&quot;&gt;:subkey&lt;/span&gt;/two&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;;; join&lt;/span&gt;
&apos;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:some&lt;/span&gt;/&lt;span class=&quot;token keyword&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;;; join (read all subkeys)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:some&lt;/span&gt;/&lt;span class=&quot;token keyword&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:subkey&lt;/span&gt;/one &lt;span class=&quot;token operator&quot;&gt;:subkey&lt;/span&gt;/two&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:some&lt;/span&gt;/param &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;;; parameterized join&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:item&lt;/span&gt;/by-id &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;;; ident reference&lt;/span&gt;
&apos;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:active&lt;/span&gt;/panel _&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;;; link reference&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:items&lt;/span&gt;/&lt;span class=&quot;token keyword&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:foo&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:item&lt;/span&gt;/id &lt;span class=&quot;token operator&quot;&gt;:item&lt;/span&gt;/type &lt;span class=&quot;token operator&quot;&gt;:foo&lt;/span&gt;/value&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
               &lt;span class=&quot;token operator&quot;&gt;:bar&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:item&lt;/span&gt;/id &lt;span class=&quot;token operator&quot;&gt;:item&lt;/span&gt;/type &lt;span class=&quot;token operator&quot;&gt;:bar&lt;/span&gt;/value&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;;; union query&lt;/span&gt;

&apos;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tree&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:value&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;..&lt;/span&gt;.&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;;; recursive query&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tree&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:value&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;;; recursive query with recursion limit&lt;/span&gt;

&apos;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tree&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/foo &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/type &lt;span class=&quot;token operator&quot;&gt;:foo&lt;/span&gt;/value &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;..&lt;/span&gt;.&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/bar &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/type &lt;span class=&quot;token operator&quot;&gt;:bar&lt;/span&gt;/value &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;..&lt;/span&gt;.&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;;; recursive union query&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:tree&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/foo &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/type &lt;span class=&quot;token operator&quot;&gt;:foo&lt;/span&gt;/value &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
         &lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/bar &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:node&lt;/span&gt;/type &lt;span class=&quot;token operator&quot;&gt;:bar&lt;/span&gt;/value &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:children&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;;; recursive union query with recursion limit&lt;/span&gt;


&lt;span class=&quot;token comment&quot;&gt;;; Mutations&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;/something!&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;;; simple mutation&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;/something! &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:some&lt;/span&gt;/param &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;;; parameterized mutation&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/omcljs/om/blob/9ea96efc0367d6b49a7aeb8eef5014fb55f3ba6e/src/main/om/next/impl/parser.cljc#L15-L22&quot;&gt;Official query expression grammar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.datomic.com/pull.html&quot;&gt;Datomic Pull Syntax Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/omcljs/om/wiki&quot;&gt;Om Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Om Next Study Material]]></title><description><![CDATA[
It has been a while since Martin Klepsch posted his [Om Next reading list](http://www.martinklepsch.org/posts/om-next-reading-list.html). If you're learning Om Next or planning to, there are a bunch more excellent resources that have recently appeared, and this post compiles a list of some of them.

]]></description><link>https://anmonteiro.com/2015/12/om-next-study-material/</link><guid isPermaLink="false">https://anmonteiro.com/2015/12/om-next-study-material/</guid><pubDate>Thu, 10 Dec 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;It has been a while since Martin Klepsch posted his &lt;a href=&quot;http://www.martinklepsch.org/posts/om-next-reading-list.html&quot;&gt;Om Next reading list&lt;/a&gt;. If you&apos;re learning Om Next or planning to, there are a bunch more excellent resources that have recently appeared, and this post compiles a list of some of them.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h3&gt;&lt;strong&gt;David Nolen&apos;s talks&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/swannodette&quot;&gt;David Nolen&lt;/a&gt; has recently given a few talks presenting Om Next. They are presented in this section in chronological order â€” some content from previous talks might already be slightly outdated, but they all contain very good content (you can always get updated content every next talk :-) ).&lt;/p&gt;
&lt;h4&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ByNs9TG30E8&quot;&gt;&lt;strong&gt;EuroClojure Om Next talk&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This talk, which dates back to July 2015, presents the top-level concepts behind the general design of Om and the motivation for Om Next. It features a very small preview of Om Next, which wasn&apos;t still in alpha at the time.&lt;/p&gt;
&lt;h4&gt;&lt;a href=&quot;http://livestream.com/intentmedia/events/4386134&quot;&gt;&lt;strong&gt;ClojureNYC Meetup talk&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;David presented Om Next at a Clojure meetup in NYC back in the end of September. This talk presents more in-depth concepts about Om Next and a simple TodoMVC demo at the end.&lt;/p&gt;
&lt;h4&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=xz389Ek2eS8&quot;&gt;&lt;strong&gt;&quot;Hello Om Next!&quot; talk at SoftwareGR&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;At the end of October, David gave a more comprehensive talk at &lt;a href=&quot;http://softwaregr.org/&quot;&gt;SoftwareGR&lt;/a&gt;, a software development interest group in Michigan. This talk features some problems and their Om Next-flavored solutions, such as remoting, HTTP caching and UI testing.&lt;/p&gt;
&lt;h4&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=MDZpSIngwm4&quot;&gt;&lt;strong&gt;Clojure/Conj talk&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is the most up-to-date talk about Om Next until now, dating back to November, and in it David presents a lot of content, at an incredible pace! Among other things, this is where &lt;code class=&quot;language-text&quot;&gt;temp-id&lt;/code&gt;s were talked about for the first time. Refer to this one for the most up-to-date content.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Tutorials!&lt;/strong&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;a href=&quot;https://github.com/omcljs/om/wiki#om-next&quot;&gt;&lt;strong&gt;Om Wiki Tutorials&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Needless to say that you should definitely go through &lt;em&gt;every&lt;/em&gt; Om Next tutorial on the Wiki page. There are plenty of tutorials already written, and some more to come, so keep checking back!&lt;/p&gt;
&lt;h4&gt;&lt;a href=&quot;https://github.com/awkay/om-tutorial&quot;&gt;&lt;strong&gt;Tony Kay&apos;s Om Tutorial&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This &lt;a href=&quot;http://awkay.github.io/om-tutorial/&quot;&gt;devcards-based&lt;/a&gt; tutorial goes through every Om Next concept and features exercises for the reader to practice what they have learnt in every section.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Reading actual code&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Reading source code is my favorite way of learning how to use a certain language or framework, and these are some code resources that you definitely want to check:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Om&apos;s &lt;a href=&quot;https://github.com/omcljs/om/blob/master/src/main/om/next.cljc&quot;&gt;source code&lt;/a&gt; and &lt;a href=&quot;https://github.com/omcljs/om/blob/master/src/test/om/next/tests.cljc&quot;&gt;tests&lt;/a&gt; are always a nice way to get more in-depth knowledge on how the internals work;&lt;/li&gt;
&lt;li&gt;Some gists have appeared &lt;a href=&quot;https://gist.github.com/anthgur/2cddf81e04ea78f372c6&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://gist.github.com/tomconnors/c1cceaae84fd059e37a3&quot;&gt;there&lt;/a&gt; with some example Om code. These two in particular show ways of achieving application routing with Om Next;&lt;/li&gt;
&lt;li&gt;Several people have also open-sourced their example apps. You can find some &lt;a href=&quot;https://github.com/swannodette/om-next-demo&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://github.com/Jannis/om-next-kanban-demo&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://github.com/advancedtelematic/parking-visualization&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I hope all the above content is useful in your path learning Om Next. I&apos;d love to hear your suggestions regarding any additional content that you have found helpful during your Om Next study path. Happy hacking!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[clj-isitup - a simple isitup.org API client]]></title><description><![CDATA[
For sometime around last year, I had been toying with a simple [isitup.org](https://isitup.org/) API client and command line tool in Clojure. Just until a few days ago, it was just sitting in [my GitHub page](https://github.com/anmonteiro). Until I decided to put it out there.

]]></description><link>https://anmonteiro.com/2015/11/clj-isitup-a-simple-isitup-org-api-client/</link><guid isPermaLink="false">https://anmonteiro.com/2015/11/clj-isitup-a-simple-isitup-org-api-client/</guid><pubDate>Tue, 17 Nov 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;For sometime around last year, I had been toying with a simple &lt;a href=&quot;https://isitup.org/&quot;&gt;isitup.org&lt;/a&gt; API client and command line tool in Clojure. Just until a few days ago, it was just sitting in &lt;a href=&quot;https://github.com/anmonteiro&quot;&gt;my GitHub page&lt;/a&gt;. Until I decided to put it out there.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;So &lt;code class=&quot;language-text&quot;&gt;clj-isitup&lt;/code&gt; is out there now, both on  &lt;a href=&quot;https://github.com/anmonteiro/clj-isitup&quot;&gt;GitHub&lt;/a&gt; and in &lt;a href=&quot;https://clojars.org/clj-isitup&quot;&gt;Clojars&lt;/a&gt;. It is working pretty well, but it still needs some polishing around the corners, such as its own &lt;a href=&quot;https://github.com/anmonteiro/clj-isitup/issues/3&quot;&gt;command line executable&lt;/a&gt; (for now you can try it out via &lt;code class=&quot;language-text&quot;&gt;lein run&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;lein trampoline&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Go ahead then, and you too toy with it. Feel free to report any issues or add your own thoughts in the comments below.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Hosting files on the cloud via GitHub Issues]]></title><description><![CDATA[
Ever wanted to host pictures or other files on GitHub without storing them in a repository? Here's a simple hack which allows us to host our files directly on GitHub's cloud.

]]></description><link>https://anmonteiro.com/2015/09/hosting-files-on-the-cloud-via-github-issues/</link><guid isPermaLink="false">https://anmonteiro.com/2015/09/hosting-files-on-the-cloud-via-github-issues/</guid><pubDate>Fri, 25 Sep 2015 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Ever wanted to host pictures or other files on GitHub without storing them in a repository? Here&apos;s a simple hack which allows us to host our files directly on GitHub&apos;s cloud.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;To use this simple approach, we first have to open an issue on any GitHub repository of our choice. Once the issue is open, we simply have to drag a file of our choosing to the comment box, just like in the picture below.&lt;/p&gt;
&lt;img title=&quot;Drag file to comment box&quot; src=&quot;https://cloud.githubusercontent.com/assets/661909/10117392/c12a9ab0-6455-11e5-96b2-720f8e77759b.png&quot;&gt;
&lt;p&gt;The file will now be uploaded. While that happens, we get feedback that it is in fact being uploaded via the following message:&lt;/p&gt;
&lt;img title=&quot;Waiting for upload&quot; src=&quot;https://cloud.githubusercontent.com/assets/661909/10117456/cbc13590-6457-11e5-8b8b-2423d099d38c.png&quot;&gt;
&lt;p&gt;Then, once the file has finished uploading to GitHub&apos;s cloud, the comment box will have updated with either an HTML &lt;code class=&quot;language-text&quot;&gt;img&lt;/code&gt; tag containing the link to an uploaded picture, or a &lt;a href=&quot;https://help.github.com/articles/markdown-basics/#links&quot;&gt;Markdown link&lt;/a&gt; to the uploaded file (for files other than images). This is how it looks:&lt;/p&gt;
&lt;img title=&quot;File uploaded&quot; src=&quot;https://cloud.githubusercontent.com/assets/661909/10117484/c128a37e-6458-11e5-8c63-9fb3444e80ed.png&quot;&gt;
&lt;p&gt;And that&apos;s all. We can now link to our uploaded file from anywhere we want.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Solving Closure Library's Html5history double event dispatch]]></title><description><![CDATA[
Most Clojurescript apps that rely on browser routing are wired in some manner to either the Google Closure Library's [HTML5 History](https://closure-library.googlecode.com/git-history/docs/class_goog_history_Html5History.html) module or - in an increasingly lower number of cases - the [History](https://closure-library.googlecode.com/git-history/docs/class_goog_History.html) module. While both [`pushState`](https://developer.mozilla.org/en-US/docs/Web/API/History_API)- and [fragment](https://en.wikipedia.org/wiki/Fragment_identifier)-based routing are supported, the module always dispatches two navigation events when opting for the latter, which can become a source of unexpected behavior. Here's how to fix it.

]]></description><link>https://anmonteiro.com/2015/09/solving-closure-librarys-html5history-double-event-dispatch/</link><guid isPermaLink="false">https://anmonteiro.com/2015/09/solving-closure-librarys-html5history-double-event-dispatch/</guid><pubDate>Thu, 10 Sep 2015 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Most Clojurescript apps that rely on browser routing are wired in some manner to either the Google Closure Library&apos;s &lt;a href=&quot;https://closure-library.googlecode.com/git-history/docs/class_goog_history_Html5History.html&quot;&gt;HTML5 History&lt;/a&gt; module or - in an increasingly lower number of cases - the &lt;a href=&quot;https://closure-library.googlecode.com/git-history/docs/class_goog_History.html&quot;&gt;History&lt;/a&gt; module. While both &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;pushState&lt;/code&gt;&lt;/a&gt;- and &lt;a href=&quot;https://en.wikipedia.org/wiki/Fragment_identifier&quot;&gt;fragment&lt;/a&gt;-based routing are supported, the module always dispatches two navigation events when opting for the latter, which can become a source of unexpected behavior. Here&apos;s how to fix it.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h3&gt;Understanding the problem&lt;/h3&gt;
&lt;p&gt;Opting for the hash based routing approach with Google Closure&apos;s Html5history module can be done with the following (simplistic) Clojurescript code:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; instantiate an Html5History object&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;history &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;goog.history.Html5History.&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;;; listen for navigation events&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;goog.events/listen history
                      goog.history.EventType.NAVIGATE
                      #&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;.log js/console &lt;span class=&quot;token string&quot;&gt;&quot;Navigate event fired&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;;; opt for fragment routing and start using the module&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;;; also returns the instance for practical purposes&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;;; (e.g. for use in a function)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;doto&lt;/span&gt; history
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;.setUseFragment &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;.setEnabled &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inspecting the (used above) &lt;a href=&quot;https://github.com/google/closure-library/blob/master/closure/goog/history/html5history.js#L203&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;setUseFragment&lt;/code&gt;&lt;/a&gt; function internals reveals the following:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;useFragment&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  goog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;events&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;window_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; goog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;events&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;EventType&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;HASHCHANGE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onHistoryEvent_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      goog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;events&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unlisten&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;window_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; goog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;events&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;EventType&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;HASHCHANGE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onHistoryEvent_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, looking at the &lt;a href=&quot;https://github.com/google/closure-library/blob/master/closure/goog/history/html5history.js#L76&quot;&gt;object instantiation&lt;/a&gt; we see that the module also listens for the &lt;code class=&quot;language-text&quot;&gt;goog.events.EventType.POPSTATE&lt;/code&gt; event. On browsers that don&apos;t support the &lt;a href=&quot;http://caniuse.com/#search=pushstate&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;pushState&lt;/code&gt; API&lt;/a&gt; this represents absolutely no problem, since one should use &lt;code class=&quot;language-text&quot;&gt;goog.History&lt;/code&gt; instead of &lt;code class=&quot;language-text&quot;&gt;goog.History.Html5History&lt;/code&gt; anyway. But on browsers in which pushState is supported, we end up receiving two &lt;code class=&quot;language-text&quot;&gt;NAVIGATE&lt;/code&gt; events. This can easily become the root of unexpected behavior.&lt;/p&gt;
&lt;h3&gt;Applying a solution&lt;/h3&gt;
&lt;p&gt;Since our focus is on using fragment routing, we don&apos;t really need to be listening to the &lt;code class=&quot;language-text&quot;&gt;popstate&lt;/code&gt; browser event. On the other hand, we want to preserve &lt;code class=&quot;language-text&quot;&gt;popstate&lt;/code&gt; behavior in case we switch to the &lt;code class=&quot;language-text&quot;&gt;pushState&lt;/code&gt; API routing. To tackle this, I use the following approach:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; only remove popstate event listener when using&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;;; fragment based routing&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;.-useFragment_ history&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;events/unlisten &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;.-window_ history&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                     goog.events.EventType.POPSTATE
                     &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;.-onHistoryEvent_ history&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                     &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
                     history&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It allows to unsubscribe from &lt;code class=&quot;language-text&quot;&gt;popstate&lt;/code&gt; events while still preserving that behavior when not using fragments.&lt;/p&gt;
&lt;p&gt;If you&apos;ve got any feedback, don&apos;t hesitate to &lt;a href=&quot;https://twitter.com/%7B%7B%20site.author.twitter_username%20%7D%7D&quot;&gt;contact me&lt;/a&gt; or post in the comments below. Happy coding!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Setting up Heroku config variables with Clojure]]></title><description><![CDATA[
Configuration or environment variables are really useful whether you want to externally affect the way your apps run or if you simply want to keep private, sensitive data out of your version control system. The other day I ran into some trouble having [Heroku](https://www.heroku.com/) read the config variables of a Clojure app of mine. So here's how to get it working.

]]></description><link>https://anmonteiro.com/2015/09/setting-up-heroku-config-variables-with-clojure/</link><guid isPermaLink="false">https://anmonteiro.com/2015/09/setting-up-heroku-config-variables-with-clojure/</guid><pubDate>Wed, 02 Sep 2015 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Configuration or environment variables are really useful whether you want to externally affect the way your apps run or if you simply want to keep private, sensitive data out of your version control system. The other day I ran into some trouble having &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt; read the config variables of a Clojure app of mine. So here&apos;s how to get it working.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h3&gt;1. Add the variables to Heroku&lt;/h3&gt;
&lt;p&gt;In your Heroku app dashboard, go into settings and click &quot;Reveal Config Vars&quot;. If you haven&apos;t added any configuration variables yet, it should look something like this:&lt;/p&gt;
&lt;img title=&quot;No configuration variables&quot; src=&quot;https://cloud.githubusercontent.com/assets/661909/10079248/392b124c-62e9-11e5-9b9f-3b796b135d09.png&quot;&gt;
&lt;p&gt;Go ahead, then, and click &quot;Edit&quot; to add the configuration variables you want to add. The next image shows what you should now be seeing. Type in the key and the value for each one.&lt;/p&gt;
&lt;img title=&quot;Add configuration variables&quot; src=&quot;https://cloud.githubusercontent.com/assets/661909/10079262/49fb210c-62e9-11e5-965f-2c97fbec80e5.png&quot;&gt;
&lt;h3&gt;2. Reference your variables in your Clojure code&lt;/h3&gt;
&lt;p&gt;Now for the trickier part. You might be tempted to simply write something like the following (which was actually what I was doing):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; MY-VAR &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;System/getenv &lt;span class=&quot;token string&quot;&gt;&quot;MY-VAR&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, as per &lt;a href=&quot;https://devcenter.heroku.com/articles/getting-started-with-clojure#define-config-vars&quot;&gt;Heroku&apos;s documentation&lt;/a&gt;, only &lt;em&gt;&quot;at runtime, config vars are exposed as environment variables to the application&quot;&lt;/em&gt;, and since &lt;code class=&quot;language-text&quot;&gt;def&lt;/code&gt; calls are bound at compile time, the above code would not work.&lt;/p&gt;
&lt;h4 style=&quot;text-shadow: 1px 0 #000;letter-spacing: 1px;&quot;&gt; So, what&apos;s the solution?&lt;/h4&gt;
&lt;p&gt;Well, the solution is to bind your variables at runtime, inside a function call which executes when the app is started.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;- But you shouldn&apos;t declare vars inside functions, or &lt;a href=&quot;https://github.com/bbatsov/clojure-style-guide#alter-var&quot;&gt;change them&lt;/a&gt; using &lt;code class=&quot;language-text&quot;&gt;def&lt;/code&gt; calls!&lt;/strong&gt; - the attentive reader argues; correctly. The code that follows doesn&apos;t do either.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;;; option A ;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;;;;;;;;;;;;;;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; 1) declare a nil atom&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; MY-VAR &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;atom &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; 2) &quot;reset!&quot; it in a function that is called when the app starts&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defn&lt;/span&gt; init-config &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reset! MY-VAR &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;System/getenv &lt;span class=&quot;token string&quot;&gt;&quot;MY-VAR&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;token comment&quot;&gt;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;;; option B ;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;;;;;;;;;;;;;;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; 1. declare an unbound var (can also be bound,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;;;  but its value will change)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; MY-VAR&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; 2. &quot;alter-var-root&quot; it in a function which is&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;;;  called when the app starts&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defn&lt;/span&gt; init-config &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;alter-var-root #&lt;span class=&quot;token operator&quot;&gt;&apos;MY-VAR&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;constantly&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;System/getenv &lt;span class=&quot;token string&quot;&gt;&quot;MY-VAR&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Either option will work in Heroku, as long as reading the environment is done at runtime. A third alternative can be accomplished by using the &lt;a href=&quot;https://github.com/weavejester/environ&quot;&gt;Environ&lt;/a&gt; library. It allows for a more programatic approach and encompasses a handful of other features that you might find useful. Refer to its GitHub page for more information.&lt;/p&gt;
&lt;p&gt;If you liked this post or have any questions / suggestions, be sure to &lt;a href=&quot;mailto:%7B%7B%20site.author.email%20%7D%7D&quot;&gt;drop me a line&lt;/a&gt; or reach me on &lt;a href=&quot;https://twitter.com/%7B%7B%20site.author.twitter_username%20%7D%7D&quot;&gt;Twitter&lt;/a&gt;. Happy hacking!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Jekyll related posts revamped]]></title><description><![CDATA[
[Jekyll](http://jekyllrb.com/) hosted in [Github Pages](https://pages.github.com) features a simple "Related posts" variable per post page, which contains the 10 most recent posts. As one might think, these most *recent* posts might not quite correspond, at all, to any *related* posts. So I devised a way to show recent **and** related posts in this blog using solely [Liquid](https://github.com/Shopify/liquid/wiki) tags.

]]></description><link>https://anmonteiro.com/2015/08/jekyll-related-posts-revamped/</link><guid isPermaLink="false">https://anmonteiro.com/2015/08/jekyll-related-posts-revamped/</guid><pubDate>Fri, 28 Aug 2015 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; hosted in &lt;a href=&quot;https://pages.github.com&quot;&gt;Github Pages&lt;/a&gt; features a simple &quot;Related posts&quot; variable per post page, which contains the 10 most recent posts. As one might think, these most &lt;em&gt;recent&lt;/em&gt; posts might not quite correspond, at all, to any &lt;em&gt;related&lt;/em&gt; posts. So I devised a way to show recent &lt;strong&gt;and&lt;/strong&gt; related posts in this blog using solely &lt;a href=&quot;https://github.com/Shopify/liquid/wiki&quot;&gt;Liquid&lt;/a&gt; tags.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;It works by going through the related posts collection and selecting the posts that contain any tags in common with the current post, up to a defined limit. If there are enough posts to fill that limit, fine, it stops there. Otherwise, it goes again through the most recent, possibly unrelated posts, and outputs them until the limit is finally reached.&lt;/p&gt;
&lt;p&gt;It can also be easily adapted to work with Jekyll&apos;s categories instead of tags, by changing at most 3 or 4 lines of code.
The full gist is presented below.&lt;/p&gt;
&lt;p&gt;{% gist anmonteiro/e471cc7a491d4069636a %}&lt;/p&gt;
&lt;p&gt;If you have any questions or suggestions, don&apos;t hesitate to drop me a line, either on &lt;a href=&quot;https://twitter.com/%7B%7B%20site.author.twitter_username%20%7D%7D&quot;&gt;Twitter&lt;/a&gt; or by &lt;a href=&quot;mailto:%7B%7B%20site.author.email%20%7D%7D&quot;&gt;email&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Custom subdomains in GitHub project pages]]></title><description><![CDATA[
If you host your website, blog or project pages in [GitHub Pages](https://pages.github.com/), you might already be rolling your own [custom domain](https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/). However, while there is plenty of information on how to set that up, what you might not know is that you can also set up a custom subdomain for your project pages.

]]></description><link>https://anmonteiro.com/2015/08/custom-subdomains-in-github-project-pages/</link><guid isPermaLink="false">https://anmonteiro.com/2015/08/custom-subdomains-in-github-project-pages/</guid><pubDate>Sun, 23 Aug 2015 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;If you host your website, blog or project pages in &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, you might already be rolling your own &lt;a href=&quot;https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/&quot;&gt;custom domain&lt;/a&gt;. However, while there is plenty of information on how to set that up, what you might not know is that you can also set up a custom subdomain for your project pages.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p class=&quot;message&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; when you use your own domain (e.g. &lt;code&gt;mydomain.com&lt;/code&gt;) with GitHub Pages, you get your project pages under that domain for free (e.g. &lt;code&gt;myusername.github.io/pjname&lt;/code&gt; will also be available under &lt;code&gt;mydomain.com/pjname&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;So, if you&apos;d like to publish your project page under &lt;code class=&quot;language-text&quot;&gt;pjname.mydomain.com&lt;/code&gt;, even though it will live under &lt;code class=&quot;language-text&quot;&gt;mydomain.com/pjname&lt;/code&gt; anyway, but you might just prefer it this way), simply follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/adding-a-cname-file-to-your-repository/&quot;&gt;Add a CNAME file&lt;/a&gt; to your project&apos;s repository. The content of this file must be a single line specifying the bare subdomain for your project&apos;s custom subdomain (e.g. &lt;code class=&quot;language-text&quot;&gt;pjname.mydomain.com&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;In your DNS provider&apos;s settings, create a new CNAME record that points &lt;code class=&quot;language-text&quot;&gt;pjname&lt;/code&gt; to either the root (usually denoted by &lt;code class=&quot;language-text&quot;&gt;@&lt;/code&gt;), if you have previously set up an &lt;a href=&quot;https://help.github.com/articles/about-custom-domains-for-github-pages-sites/#apex-domains&quot;&gt;apex domain&lt;/a&gt;, or to &lt;code class=&quot;language-text&quot;&gt;myusername.github.io&lt;/code&gt; if you&apos;ve set up a &lt;a href=&quot;https://help.github.com/articles/about-custom-domains-for-github-pages-sites/#subdomains&quot;&gt;custom subdomain&lt;/a&gt;. It should look something like this:&lt;/li&gt;
&lt;/ol&gt;
&lt;img title=&quot;DNS CNAME records&quot; src=&quot;https://cloud.githubusercontent.com/assets/661909/10079183/f59da364-62e8-11e5-9f48-da75657059f6.png&quot;&gt;
&lt;p&gt;And that&apos;s it! After a few moments the changes should take effect. Thanks for reading!&lt;/p&gt;
&lt;p&gt;If you have any questions or suggestions, be sure to reach me on &lt;a href=&quot;https://twitter.com/%7B%7B%20site.author.twitter_username%20%7D%7D&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Grand opening]]></title><description><![CDATA[
Hello, and welcome to my humble corner in the Internet. This is where I'll focus on writing about **software engineering**, **programming** and **lifestyle**.

As I'm hosting the blog on [GitHub Pages](https://pages.github.com), there are no comments for now. However, you can always reach me on Twitter - [@{{ site.author.twitter_username }}](http://twitter.com/{{ site.author.twitter_username }}) - or by [email](mailto:{{ site.author.email }}).

]]></description><link>https://anmonteiro.com/2015/08/grand-opening/</link><guid isPermaLink="false">https://anmonteiro.com/2015/08/grand-opening/</guid><pubDate>Mon, 17 Aug 2015 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hello, and welcome to my humble corner in the Internet. This is where I&apos;ll focus on writing about &lt;strong&gt;software engineering&lt;/strong&gt;, &lt;strong&gt;programming&lt;/strong&gt; and &lt;strong&gt;lifestyle&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;As I&apos;m hosting the blog on &lt;a href=&quot;https://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt;, there are no comments for now. However, you can always reach me on Twitter - &lt;a href=&quot;http://twitter.com/%7B%7B%20site.author.twitter_username%20%7D%7D&quot;&gt;@{{ site.author.twitter_username }}&lt;/a&gt; - or by &lt;a href=&quot;mailto:%7B%7B%20site.author.email%20%7D%7D&quot;&gt;email&lt;/a&gt;.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Go on and read some more &lt;a href=&quot;%7B%7B%20site.baseurl%20%7D%7D/about&quot;&gt;about me&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;</content:encoded></item></channel></rss>